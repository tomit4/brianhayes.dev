<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
	<channel>
		<title>brianhayes.dev</title>
		<link>https://brianhayes.dev</link>
		<description>Personal Blog About Web Dev and Tech</description>
		<generator>rsspls version 0.7.1</generator>
		<lastBuildDate>Sun, 28 Jan 2024 17:24:26 PST</lastBuildDate>
		<item>
			<title>JavaScript</title>
			<link>https://brianhayes.dev/blog/javascript_the_webs_muscles</link>
			<description><![CDATA[<article class="demo-button">
        <h1>Introduction</h1>
        <p>You may have noticed that this article's publish date is far later than my previous article on <a aria-label="link to article, css, the web's makeup" class="inline-link" href="https://brianhayes.dev/blog/css_the_webs_makeup.html" role="link">CSS: The Web's Makeup</a>. While this is mainly due to other responsibilities which have as of recent required my attention, I must also admit that I have been a bit intimidated on writing on the subject of JavaScript. JavaScript is the first programming language I ever learned, and I am still continuing to learn it. Thusly, I don't yet feel I have any authority to write on the subject of JavaScript, even in the context of this article, which is meant as an introduction.</p>
        <p>Nevertheless, it is quite likely that I will never feel ready to give an overview of JavaScript. Thusly, I shall simply have to do my best. In covering the topic, I cannot overemphasize the incredibly large role JavaScript has played in bringing the web to the state it is in today. I have come across many social media posts that joke/deride JavaScript for no longer being a programming language reserved solely to the realm of the web, but rather has pervaded into nearly every facet of modern computer applications. </p>
        <p>With the arrival of the JavaScript runtime, NodeJS, the software framework, Electron, and the mobile framework, React Native, JavaScript has made its way into many ecosystems previously the purview of other programming languages. From its humble beginnings as a simple scripting language meant solely to add small bits of interactivity to web pages, JavaScript is now a fully fledged programming language that can interact with native C libraries directly on your computer (NodeJS), utilize User Interface libraries to write desktop applications (Electron), and even write platform agnostic mobile applications (React Native). It is not an understatement to say that JavaScript is everywhere!</p>
        <p>Perhaps you might now understand my reluctance to cover such a vast subject, as a single article, even one that attempts to be an introduction to the very basic aspects of the language, can only barely scratch the surface of the subject that is JavaScript. Indeed, entire blogs, books, videos, and podcasts have been produced that solely revolve around The JavaScript Programming Language and the vast ecosystem around it. </p>
        <p>JavaScript is both beloved and hated by programmers for a wide variety of reasons. Regardless of these sentiments, JavaScript has long been, and continues to be, one of the most popular programming languages in the world due to its ubiquity within the world wide web. In short, with the rise of the web, so too went JavaScript. </p>
        <p>Even if it is not one's intent to become a web developer, it is in my humble opinion that it is worthwhile for anyone looking to create any substantial application on the web to at least have a basic familiarity with JavaScript's syntax, especially when it comes to how it interacts with the Document Object Model.</p>
        <p>This will certainly not be my only article written which involves JavaScript in the context of programming, and I am sure to not cover the entirety of the JavaScript programming language in this article. It is my hope, however, to give you a basic understanding of JavaScript and by extension, core programming concepts. This will include introductory examples involving the subjects of  variable declaration and usage, boolean statements, conditionals, function declarations, arrays, objects, and finally basic interactions with the console and document objects. Firstly, however, I feel it is important to briefly overview what is JavaScript and it's history.</p>
        <h2>What Is JavaScript?</h2>
        <p>JavaScript is a high level programming language that originally was created to add interactivity to HTML elements after the initial web page had loaded. The language is dynamically typed, supporting prototype based object oriented as well as functional and imperative programming styles. All major web browsers include a dedicated JavaScript engine which executes code on the user's device. On its own, JavaScript does not have native interfaces for interacting with standard Input/Output (I/O), unlike lower level languages, but JavaScript is often utilized with a wide array of APIs via a runtime system native to the browser, which facilitates interactivity with I/O.</p>
        <p>As mentioned in the introduction, JavaScript is no longer solely the domain of client side scripting on the browser. That said, JavaScript still is predominantly utilized for client side scripting to add interactivity to the browser via scripted events. Examples of this interactive behavior include:</p>
        <div class="inline-list">
          <ul>
            <li>
              <p>Loading new content to the web page without reloading the entire page.</p>
            </li>
            <li>
              <p>Interacting with HTML elements via dynamically changing CSS attributes to add animations</p>
            </li>
            <li>
              <p>Validating Input Forms</p>
            </li>
            <li> 
              <p>Redirecting the User to Another Page</p>
            </li>
            <li>
              <p>Storing and retrieving data on the user's device (i.e. <a aria-label="wikipedia link to http cookie article" class="inline-link" href="https://en.wikipedia.org/w/index.php?title=HTTP_cookie" rel="noopener noreferrer" role="link" target="_blank">HTTP cookies</a>).</p>
            </li>
          </ul>
        </div>
        <p>The use of JavaScript has more recently moved outside of the realm of the browser and into the server space with the advent of NodeJS arriving on the programming scene in 2009. This alone would have solidified JavaScript as the predominant programming language of the web, as it now allowed for servers as well as client side applications to be entirely written in JavaScript. Additionally, JavaScript now is utilized to create platform agnostic desktop and mobile applications using the Electron Software Framework and the React Native Framework respectively.</p>
        <p>It is obvious that JavaScript's reach has expanded far and wide, but how did this humble programming language get to where it is today?</p>
        <h2>The History Of JavaScript</h2>
        <p>The history of JavaScript is closely tied to that of the Browser, and by extension, The World Wide Web. <a aria-label="link to wikipedia article on the history of the world wide web" class="inline-link" href="https://en.wikipedia.org/wiki/History_of_the_World_Wide_Web" rel="noopener noreferrer" role="link" target="_blank">The History Of The World Wide Web</a> is a subject outside the scope of this article. Sufficient to say that in 1990, one year after the inception of the World Wide Web itself, Tim Berners-Lee (the inventor of The World Wide Web) released the first web browser, simply known as the Line Mode Browser. Run from the terminal, this basic browser bore little resemblence to today's modern browsers, but demonstrated the promise of what the World Wide Web would come to fulfill: that of an easily accessible, interconnected world. As an aside, one can still run basic browsers from the terminal, <a aria-label="a link to the links browser website" class="inline-link" href="http://links.twibright.com/user_en.html" rel="noopener noreferrer" role="link" target="_blank">The Links Browser</a> is one of the oldest examples of these types of browser still in use today.</p>
        <p>Three years later, in 1993, Lee would go on to release the <a aria-label="a link to the wikipedia article on the mosaic browser" class="inline-link" href="https://en.wikipedia.org/wiki/Mosaic_(web_browser)" rel="noopener noreferrer" role="link" target="_blank">Mosaic Browser</a>, which is credited as being the first web browser to gain widespread popularity. With its use of a graphical user interface instead of a terminal, the Mosaic Browser was widely considered to be much more accessible to the average person. The popularity and ease of use of The Mosaic Browser would usher in the Internet boom of the 1990s.</p>
        <p>One year after The Mosaic Browser's release, Marc Andreessen, the leader of the Mosaic team, would found the company, Netscape. Their flagship product, the Netscape Navigator Browser, itself heavily inspired by The Mosaic Browser, would soon overshadow its predecessor in popularity. Shortly thereafter, in 1995, Microsoft would release the  Internet Explorer Browser, sparking a browser war with Netscape.</p>
        <p>These early days of the web were filled with static sites, which, while sufficent for the reading of documents, lacked interactivity once the page loaded. In order to interact with early web pages, one would have to initiate an event (such as a click on a button), which would cause the entire page to refresh in order for new content to be loaded and rendered. While still impressive for its time, it limited the kinds of interactions early web users could have with the pages they visited. It became apparent to those working at the forefront of this new burgeoning field to change this and add more dynamism to these user interactions. </p>
        <p>Thusly, in 1995, Netscape decided to add a scripting language to The Netscape Navigator Browser. Two routes were taken to achieve this ultimate goal. The first, in collaboration with Sun Microsystems, aimed to embed the Java Programming Language into the browser. The other route was put into the hands of a computer programmer named Brendan Eich, who was tasked with embedding the Scheme Programming Language. </p>
        <p>It wasn't long before Netscape management had determined that the best option was rather for Eich to develop a new programming language, which would incorporate syntax more similar to Java than Scheme. Although originally called "LiveScript" when first shipped with the Navigator beta in September of 1995, it was soon renamed to JavaScript when the official version release occurred in December of that year. Originally intended "to help nonprogrammers create dynamic, interactive web sites," it probably occurred to no one at the time how ubiquitous their new creation would become.</p>
        <h2>JavaScript Basics</h2>
        <p>While the history of JavaScript is much more extensive than this, this article will be lengthy enough without going into the entirety of JavaScript's history. Nevertheless, should you wish to find out more, I highly encourage you to <a aria-label="a link to the wikipedia article on the history of javascript" class="inline-link" href="https://en.wikipedia.org/w/index.php?title=JavaScript#History" rel="noopener noreferrer" role="link" target="_blank">read the Wikipedia article on the subject</a>, from which the majority of the previous section was referenced. </p>
        <p>The remainder of this article will be an extensive introduction to general programming concepts as they relate to JavaScript, including variables, data types, conditionals, control flow statements, and functions. As I mentioned at the beginning of this article, the topic of JavaScript is vast, but it is my hope that in reading this, you will have been given a basic grasp on the fundamentals of working with JavaScript and how to add basic interactivity to your web pages.  Firstly, however, it is important that we set up a working environment so that we can see the results of the JavaScript we write. For this we'll be working in the browser's console, available via the browser's native developer tools.</p>
        <h2>The Console</h2>
        <p>Later on, in part two of this article, I will explain how to interact with JavaScript within the context of files that are directly linked to an HTML document, much like the document we created in <a aria-label="a link to the article HTML, the web's skeleton" class="inline-link" href="https://brianhayes.dev/blog/html_the_webs_skeleton.html" role="link">HTML: The Web's Skeleton</a>. For now, however, it is time to introduce one of the most valuable tools available to the modern web developer, that of the developer console. Open up your preferred browser and hit the F12 key. You should be presented with a separate partition or window that displays the underpinnings of the webpage you are currently on.</p>
        <figure><img alt="a screenshot showing the developer console alongside an open web page" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/devtools_ss_01.webp" title="the devtools console opened up at brianhayes.dev"></figure>
        <figcaption>Pressing the F12 key opens the browser's devtools</figcaption>
        <p>Notice the tabs on the top of the new window/partition. Navigate to the tab labeled "Console". Here, you should see a blinking cursor. You can think of this as being like a coding sandbox in which JavaScript can be written to test out code. Should you choose to follow along, simply copy the code snippets in the subsequent examples into this console. Let's start off with variable declarations.</p>
        <h2>Variables</h2>
        <p>Much like in mathematics, variables in programming tie a particular piece of data to a symbol representing that data. The most simple example of this can be demonstrated by declaring the equivalency between a named symbol, and the data it represents. In JavaScript, this is done by using the var keyword. Inside your console, type out the following code:</p>
        <pre><code>var greeting = "Hello World!";</code></pre>
        <p>This simple statement should be somewhat self explanatory, but let's break it down regardless. Firstly, let us address the <code class="inline-code">var</code> keyword. In JavaScript, like all programming languages, there are reserved keywords, with <code class="inline-code">var</code> being one of them. This keyword is to let the JavaScript interpreter know that we are declaring a variable. The next word, <code class="inline-code">greeting</code>, is the name of the variable we are declaring. JavaScript has no reference to <code class="inline-code">greeting</code> until we have declared it. Next, we utilize an equal sign to declare that <code class="inline-code">greeting</code> is equal to the following value. In this case we apply what is known in programming as a <em>string</em>, or a series of characters. The quotations are required to delineate that we are declaring a string. To summarize, we are declaring a variable called <code class="inline-code">greeting</code> which holds the string value of "Hello World!".</p>
        <p>If we write out this statement and then hit the "Enter" key inside of our browser's console window, the console will give us a return value of <code class="inline-code">undefined</code>. This may seem perplexing to the unitiated. Simply put, while the console is acknowledging our assignment, we have not returned anything yet, we have simply declared our variable <code class="inline-code">greeting</code> to exist. In other words, we have not asked the JavaScript interpreter to do anything other than hold onto the declaration of <code class="inline-code">greeting</code> in memory. Let's now retrieve our value using a simple call to the console like so:</p>
        <pre><code>console.log(greeting);</code></pre>
        <p>After typing out this bit of code and hitting enter, the JavaScript interpreter will then print out the value we have assigned to the <code class="inline-code">greeting</code> variable, "Hello World!":</p>
        <figure><img alt="a screenshot of the devtools displaying a basic javascript hello world example" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/devtools_ss_02.webp" title="declaring a variable and then logging the value to the console in javascript"></figure>
        <figcaption>Variable declaration and logging to the console</figcaption>
        <p>While simple, the declarations of variables in programming is akin to learning your ABCs in the alphabet. By creating associations between variable names with values they represent, we can establish semantic associations to make our code more readable to both ourselves and others. Let's declare some other variables in the next section, where I will introduce you to the other basic data types within JavaScript.</p>
        <h2>Data Types</h2>
        <h3>Numbers</h3>
        <p>All programming languages have a series of data types which serve various purposes. Much of JavaScript's data types have to do with abstractions that are easily parsed/understood by the underlying computer architecture. Strings are one of the easiest to grasp examples for the beginner, as they are simply a sequence of characters meant usually to represent names, words, or statements. Another easy to understand data structure is that of numbers. Unlike variable declaration of strings, numbers are not encapsulated inside of quotation marks, and one can simply assign a variable like so:</p>
        <pre><code>var age = 40;</code></pre>
        <p>As you can see, the semantic aspects of declaring variables are already starting to show. Age is often associated with a numeric value, while the greeting variable above is indeed a statement often interpreted as a greeting. It is often said that naming variables is one of the programmer's greatest challenges. As you become more versed in programming, this difficulty will become more apparent. For now, however, simply think on the confusion a fellow programmer would have if we had simply switched our values for these two declarations:</p>
        <pre><code>var age = "Hello World!";
var greeting = 40;</code></pre>
        <p>This is an obviously confusing series of declarations as each value the variables represent, while valid JavaScript, would not be looked on favorably by anyone having to parse through and read this code. These kinds of naming conventions often relate to the particular type of data being stored within the variable. Perhaps the importance of proper naming conventions will become even more apparent in the next data type we will cover, booleans.</p>
        <h3>Booleans</h3>
        <p>Booleans are perhaps the most simple to understand data type, as the value stored within a boolean variable can hold only the value of <code class="inline-code">true</code> or <code class="inline-code">false</code>, and their declaration is just that simple:</p>
        <pre><code>var isOverForty = false;
var isUnderFifty = true;</code></pre>
        <p>Here, we introduce a few conventions. As you can see, I am declaring two variables, one called <code class="inline-code">isOverForty</code>. Notice the capitalization of each word, demarcating a kind of statement which corresponds to whether the value holds a boolean <code class="inline-code">true</code> or <code class="inline-code">false</code> value. This kind of capitalization is what is known as <em>Camel Case</em>, where each new word, rather than demarcated by a space like in traditional writing, is instead demarcated with a capitalized letter. This is because spaces in programming often indicate a new declaration or statement in programming, and thusly to ensure that a single variable is declared, no spaces can be used when naming variables that involve multiple words in the name. Additionally, to ensure the readability of the variable name, each letter is demarcated with a visually noticable capitalized letter.</p>
        <p>Also notice the choice of semantics, <code class="inline-code">isOverForty</code> indicates a <code class="inline-code">true</code> or <code class="inline-code">false</code> value. It would be very poor practice to name this variable <code class="inline-code">mightBeOverForty</code>, as that indicates that it's value could be <em>either</em> <code class="inline-code">true</code> <em>or</em> <code class="inline-code">false</code>. Because we are storing a boolean value of <code class="inline-code">false</code> here, it is better to give this variable a name that indicates to us that the expected return value is <em>definitively</em> <code class="inline-code">true</code> or <code class="inline-code">false</code>.</p>
        <p>Strings, numbers, and booleans within the JavaScript Programming Language (and other programming languages), are what are known as <em>Primitive</em> data types. There are other primitive data types (null, undefined, and symbols) which will not be covered in this introduction. The other two data types that we'll be covering are what are known as <em>Reference</em> data types. Specifically, we are referring to <em>Arrays</em>, and <em>Objects</em>. These data types can be thought of as stores or collections of data. Technically, <em>Functions</em> are also a Reference data type, but to ensure this introduction is kept as simple as possible, we'll be covering Arrays and Objects first before moving onto the slightly more complex subject of Functions. Let's start by introducing the Array data type.</p>
        <h3>Arrays</h3>
        <p>If you work in JavaScript long enough, you will eventually come across the saying "Everything is an object in JavaScript". We have yet to cover Objects as a data type, but know that this statement is more than just a sentiment, it is a statement of fact. For now, simply keep in your mind that Arrays and Objects in JavaScript share a lot in common.</p>
        <p>The most simple way to think of Arrays in JavaScript are as a grouping of variables that itself can be contained within a variable. This is expressed by utilizing the square "[ ]" brackets to denote you are declaring an array of values being stored. Thusly a simple array of names could be declared like so:</p>
        <pre><code>var groupOfNames = ["Mary", "John", "Larry", "Zoe"];</code></pre>
        <p>Practically speaking, one can create an array of any amount of values, of any type of values, and even include Arrays (or Objects) within Arrays. Usually Arrays are made up of variables of only one data type, but it is perfectly valid to create an Array of values, each of different data types. Here are a few examples:</p>
        <pre><code>var groupOfAges = [12, 16, 59, 42, 0];
var groupOfGroups = [["Mary", "John"], ["Larry"], ["Zoe", "Lenny"]];
var groupOfRandomValues = [42, "Mary", true, "Don", 64, ["Nested String", 0], false];</code></pre>
        <p>Arrays are the most basic way of grouping values together in JavaScript, with a few caveats that contradict the expectations of those new to the language. One is that Arrays are what is known as "Zero Indexed". This essentially means that the first element in an array is not referenced "the 1st element", but rather "the 0th element" by the JavaScript interpeter. This is a convention in many programming languages. Thusly when wishing to reference a particular element of an array, one must subtract 1 from the count of elements up to the element they wish to reference. The following code snippet demonstrates this:</p>
        <pre><code>var groupOfNames = ["Mary", "John", "Larry", "Brett"];
var firstNameInGroupOfNames = groupOfNames[0];
var secondNameInGroupOfNames = groupOfNames[1];

console.log(firstNameInGroupOfNames);
// returns "Mary"

console.log(secondNameInGroupOfNames);
// returns "John"</code></pre>
        <p>This convention seems straight forward enough to the beginner, but you'll see this convention unfortunately can often result in what are known as "off by one" errors when working with control flow statements (introduced later on in this article), as it is easily forgotten when first starting out. </p>
        <p>Lastly, I'll point out that should you desire to grab the last element in an array, regardless of it's length, one can always refer to the last element in an array like so:</p>
        <pre><code>var groupOfNames = ["Mary", "John", "Larry", "Brett"];
var lastNameInGroupOfNames = groupOfNames[groupOfNames.length - 1];

console.log(lastNameInGroupOfNames);
// returns "Brett"</code></pre>
        <p>This code snippet, to the beginner, might raise an eyebrow, as to why the "-1" is necessary. The .length property is an Array specific property that refers to the counted number of elements in the Array, but this number is always equivalent to index of the last element of the Array plus 1, as it is a count of the elements in the Array, and not simply a reference to the index. Thusly, to get the last element of an Array, one must reference it's length and then subtract 1 from it.</p>
        <p>We'll be returning to Arrays later on in this article when we start working with control flow statements. For now, let's cover the other Reference data type in JavaScript, which also happens to be the most ubiquitously used, the JavaScript Object.</p>
        <h3>Objects</h3>
        <p>As mentioned earlier, the saying "Everything is an Object in JavaScript" is very often referenced when delving deep into the intricacies of the language. Objects are somewhat similar to Arrays in that they are stores of any kind of data types, with one small difference that makes Objects vastly more powerful than Arrays (at least when it comes to levels of abstraction). Unlike Arrays, which are automatically indexed by number, Objects can be indexed by strings. Thusly high level abstractions can be encapsulated within an Object. To start, one declares an Object very much like an array, but instead using the curly braces syntax, "{ }". Let's declare a basic object called <code class="inline-code">person</code> to demonstrate:</p>
        <pre><code>var person = {
  name: "Mary",
  age: 25,
  favoriteFood: "chicken",
  isEmployed: true
};</code></pre>
        <p>Notice the way this object is declared. After instantiating our object, <code class="inline-code">person</code>, we open a set of curly braces and declare a <em>key</em>, <code class="inline-code">name</code>, and its corresponding <em>value</em>, <code class="inline-code">"Mary"</code>. This <em>key/value</em> pair declaration is then followed by a comma and carriage return before going onto declare more <em>key/value</em> pairs in a similar fashion until we finish off with the <em>key</em>, <code class="inline-code">"isEmployed"</code>, and finally close off the curly braces, encapsulating our new created Object, and finishing its declaration.</p>
        <p>Notice the <em>keys</em> are always followed by a colon <code class="inline-code">":"</code> character, and then the <em>values</em> are declared very much like variables, ensuring strings are encapsulated by quotation marks, numbers and booleans are similarly declared like variables (without the quotation marks). Unlike arrays, where referencing these values by index can sometimes be unreadable, Objects allow the programmer to create <em>key/value</em> pair references that start to appear like English nouns, adjectives, and verbs.</p>
        <p>So if we wish to reference our <code class="inline-code">person</code> Object's <code class="inline-code">name</code>, <code class="inline-code">age</code>, and <code class="inline-code">isEmployed</code> values. We can simply reference it like so, using the <em>object dot key</em> syntax:</p>
        <pre><code>var person = {
  name: "Mary",
  age: 25,
  favoriteFood: "chicken",
  isEmployed: true
};

console.log(person.name);
// returns "Mary"

console.log(person.age);
// returns 25

console.log(person.isEmployed);
// returns true</code></pre>
        <p>Objects can do so much in the realm of JavaScript. Hence why JavaScript is referred to as an "Object Oriented" programming language. Even the previous data types I've referenced can technically be thought of as Objects. We'll return to Objects later on when we cover Functions. We have now covered the basics of most common JavaScript data types. </p>
        <p>But declaring variables and storing data is only part of programming/coding. In order to work with this data in any meaningful way, we'll need other tools. What if we wish to change each element in an Array? What if we wish to list out only the <em>keys</em> or <em>values</em> in an object? This involves an essential concept in programming, the control flow statement.</p>
        <h2>Loops</h2>
        <p>Control Flow Statements, more commonly known as "loops", allow for a specific set of instructions to be invoked over and over again until a certain condition is met. After this condition is met, the loop is "broken out of", and the iteration is stopped. There are many forms of control flow statements, the most common being that of the "for loop". Other control flow statements include the "while loop" and the "do while" loop. There are also what are known as "higher order" functions which perform different operations on the data being passed to it. For the sake of keeping this article as introductory as possible, we'll only be covering one of these control flow statements, that of the classic "for loop".</p>
        <p>Technically the for loop is a JavaScript function, which we haven't covered yet, but I feel that loops are a fine segue from the subject of Arrays and Objects, as loops are often used to iterate over, and sometimes change, the data within these Reference data types. Let's simply declare an array of names, then instead of referencing each one by index, we'll use a for loop to simply log each name to the console:</p>
        <pre><code>var groupOfNames = ["Mary", "John", "Larry", "Lenny", "Bruce"];

for (var i = 0; i &lt;= groupOfNames.length -1; i++) {
  console.log(groupOfNames[i]);
}

/*
 * returns:
 * Mary
 * John
 * Larry
 * Lenny
 * Bruce
*/</code></pre>
        <p>Here we declare an array of strings called <code class="inline-code">groupOfNames</code>. The for loop's syntax can look quite foreign to those who have never seen one before, so let's break it down. The reserved keyword <code class="inline-code">for</code> is first used to indicate that we wish to start a for loop. Afterwards which, we declare the logic to take place inside our for loop using an opening parentheses character, <code class="inline-code">(</code>. This is what indicates we are invoking a function call (more on that later). Inside these parentheses, we are defining a series of <em>arguments</em>, which tell the <code class="inline-code">for</code> function how to behave. Each argument is delineated by a comma character. In the case of a standard for loop, the function expects three arguments. Let's break down each argument in further detail.</p>
        <p>Firstly we have the statement:</p>
        <pre><code>var i = 0;</code></pre>
        <p>This statement should seem familiar, we simply declare a variable <code class="inline-code">i</code> and set it hold the value of the number <code class="inline-code">0</code>. The use of the letter <code class="inline-code">i</code> is based off of convention. It is meant to stand for <em>iterator</em>, and is generally what is used to keep count as we go through the loop.</p>
        <p>The second argument to our for function call looks like a mathematical comparison, which indeed it is:</p>
        <pre><code>i &lt;= groupOfNames.length - 1;</code></pre>
        <p>Much like in mathematics, the <code class="inline-code">&lt;=</code> indeed refers to "less than or equal to". This is our first equality statement covered thus far, and by the end of this article we will cover a few more. So what does this translate to? Well if our iterator, <code class="inline-code">i</code>, is <em>less than or equal to</em> the length of our <code class="inline-code">groupOfNames</code> array (minus one to account for the zero indexing). The statement here returns a boolean value of <code class="inline-code">true</code> or <code class="inline-code">false</code>. It is basically telling the for loop, as long as this condition is true, run the following code again.</p>
        <p>Lastly we have the third argument of the for loop:</p>
        <pre><code>i++;</code></pre>
        <p>This <code class="inline-code">++</code> is what is known as an increment operator. It is basically telling the for loop that at the end of each iteration, add one to the iterator number, <code class="inline-code">i</code>. Thusly on the first loop, after the first name is printed to the console, <code class="inline-code">i</code>, which was initially set to the number, <code class="inline-code">0</code>, is now set to the number, <code class="inline-code">1</code>. Let's also log to the console the iterator itself to hammer home the point:</p>
        <pre><code>var groupOfNames = ["Mary", "John", "Larry", "Lenny", "Bruce"];

for (var i = 0; i &lt;= groupOfNames.length -1; i++) {
  console.log("index: ", i);
  console.log(groupOfNames[i]);
}

/*
 * returns:
 * index: 0
 * Mary
 * index: 1
 * John
 * index: 2
 * Larry
 * index: 3
 * Lenny
 * index: 4
 * Bruce
*/</code></pre>
        <p>Hopefully the above example illustrates not only the basics of a classic for loop, but also reiterates the concepts around zero indexing of arrays introduced earlier. Let's now loop over an array of objects, and in the process, change each of the object's <code class="inline-code">age</code> value:</p>
        <pre><code>var groupOfPeople = [
  {
    name: "Mary",
    age: 25
  },
  {
    name: "John",
    age: 37
  },
  {
    name: "Leslie",
    age: 64
  }
];

for (var i = 0; i &lt;= groupOfPeople.length - 1; i++) {
  var person = groupOfPeople[i];
  var statementOfAge = person.name + " is my name, my age is: " + person.age;
  console.log(statementOfAge);

  person.age = ++person.age;
  var statementOfAgeAfterOneYear = "After one year's time, I, " + person.name + " will be " + person.age + " years old";
  console.log(statementOfAgeAfterOneYear);
}

console.log(groupOfPeople);</code></pre>
        <p>This code is a bit more complicated than what we covered thus far, but hopefully my naming conventions have made it clear what the expected output of this for loop will be.</p>
        <p>Let's cover first our declaration of our <code class="inline-code">groupOfPeople</code> array. Unlike our previous example, which simply was a collection of names, here we are declaring a series of objects, each object representing one single person. Each person is declared with a <code class="inline-code">name</code> and an <code class="inline-code">age</code> <em>key</em>, and have a corresponding string (their name), and number (their age). Very much like our previous example on referencing an array, we do so using the square bracket syntax, which is demonstrated within our for loop on the first line:</p>
        <pre><code>var person = groupOfPeople[i];</code></pre>
        <p>This is more for semantics as to not be confusing. By shortening my reference to each individual <code class="inline-code">person</code> from <code class="inline-code">groupofPeople[i]</code>, I can more easily read the rest of the code inside my for loop.</p>
        <p>Next a series of what is know as "string concatenation" operations occur. Unlike with numbers, when strings are <em>added</em> to each other using the <code class="inline-code">+</code> operator, the previous string is concatenated with whatever the following value is. If what follows is not a string, like the <code class="inline-code">age</code> value, JavaScript will <em>coerce</em> the value into a string.</p>
        <pre><code>var statementOfAge = person.name + " is my name, my age is: " + person.age;</code></pre>
        <p>And of course, we then log out this statement to the console.</p>
        <p>Next we then do something we have not covered in this article thus far. We reassign the person's <code class="inline-code">age</code> value to itself, but prepended with a <code class="inline-code">++</code> operator. Unlike in our for loop declaration, where the iterator is appended the <code class="inline-code">++</code> operator, the prepending of the <code class="inline-code">++</code> operator ensures that the value is changed prior to the remainder of the subsequent statement(s).</p>
        <pre><code>person.age = ++person.age;</code></pre>
        <p>Then, we declare a new variable, <code class="inline-code">statementOfAgeAfterOneYear</code>, in which we then concatenate a new string, stating what the person's <code class="inline-code">age</code> will be after one year.</p>
        <pre><code>var statementOfAgeAfterOneYear = "After one year's time, I, " + person.name + " will be " + person.age + " years old";</code></pre>
        <p>We once again log this statement to the console to reflect the change in the person's <code class="inline-code">age</code>.</p>
        <p>Once the for loop is finished, delineated by the closing curly brace <code class="inline-code">}</code> character, we simply log to the console the entire <code class="inline-code">groupOfPeople</code> array. This demonstrates that the change of the <code class="inline-code">age</code> value on each of our persons in the <code class="inline-code">groupOfPeople</code> array did <em>actually change</em> our original array of objects. Let's take a look at our final print outs to the console:</p>
        <pre><code>/*
 * returns:
 * Mary is my name, my age is: 25
 * After one year's time, I, Mary will be 26 years old
 * John is my name, my age is: 37
 * After one year's time, I, John will be 38 years old
 * Leslie is my name, my age is: 64
 * After one year's time, I, Leslie will be 65 years old
 * 
 * 
 * [
 *   {
 *     name: Mary,
 *     age: 26
 *   },
 *   {
 *     name: John,
 *     age: 38
 *   },
 *   {
 *     name: Leslie,
 *     age: 65
 *   }  
 * ]
*/ </code></pre>
        <p>We have now covered the quintessential for loop. There are other control flow statements to investigate (while, do while loops), and modern JavaScript has many variations on these as well. Covering the varying control flow statements would take an entire article (or two) to really investigate the myriad of control flow statements available, but understanding the basic for loop can carry a JavaScript programmer very far, especially when used in the context of functions and conditional statements.</p>
        <h2>Functions and Conditionals</h2>
        <p>Functions are a series of procedures encapsulated within a block of code. Unlike procedures that take place within the global scope of the program (an explanation of scope will come shortly), functions take in a form of input and generate a form of output that is related to the input. Prior to covering functions however, I feel it is necessary to briefly touch on conditional statements.</p>
        <p>Recall in our standard for loop examples, we have encapsulated inside the initial parentheses, <code class="inline-code">( )</code>, a series of <em>arguments</em>, delineated by a semicolon character, <code class="inline-code">;</code>.</p>
        <pre><code>for (var i = 0; i &lt;= groupOfPeople.length - 1; i++) {</code></pre>
        <p>Note the second <em>argument</em> in this for loop:</p>
        <pre><code>i &lt;= groupOfPeople.length - 1;</code></pre>
        <p>You may recall in our previous section that this utilizes a mathematical comparison, the <code class="inline-code">&lt;=</code> or <em>less than or equal</em> operator which in essence tells our for loop that as long as "<code class="inline-code">i</code> is <em>less than or equal</em> to the <code class="inline-code">groupOfPeople</code> array's length," to continue repeating the following sequence of code encapsulated inside of the curly braces <code class="inline-code">{ }</code>.</p>
        <p>This is what is known as a <em>conditional statement</em>. A conditional statement declares a comparative operation between two or more values that either returns <code class="inline-code">true</code> or <code class="inline-code">false</code>.</p>
        <p>Technically these statements return <em>truthy</em> or <em>falsy</em> values, and this is one of the major reasons JavaScript is often criticized, as these comparitive statements can sometimes return a boolean value that is not expected. In the interest of keeping this introduction to the concept of conditional statements simple, however, we will not delve into these nuances at this time.</p>
        <h3>If Statements</h3>
        <p>The most common conditional statement one will see in many programs is the <code class="inline-code">if</code> statement. The <code class="inline-code">if</code> statement is very readable even to novice programmers, and relatively easy to pick up. Let us examine this simple block of code:</p>
        <pre><code>var person = {
  name: "Janice",
  age: 42
}

if (person.age == 42) {
  console.log("person's age is 42!");
}

// returns "person's age is 42!"</code></pre>
        <p>This <code class="inline-code">if</code> statement is almost self explanatory, but let's break it down regardless. The reserved keyword, <code class="inline-code">if</code>, is used to instantiate a conditional statement. Within the parentheses characters <code class="inline-code">( )</code>, a conditional statement is passed which can only return a <code class="inline-code">true</code> or <code class="inline-code">false</code> boolean value. In this case, the <code class="inline-code">person</code> object's <code class="inline-code">age</code> <em>value</em> is compared to the number, <code class="inline-code">42</code>, using the double equal sign equivalency operator, <code class="inline-code">==</code>. Should the <code class="inline-code">person.age</code> <em>value</em> be equal to <code class="inline-code">42</code>, the code encapsulated within the curly braces is executed. In this case, the <code class="inline-code">person.age</code> variable is equal to <code class="inline-code">42</code>, so the logged message is dispalyed in the console.</p>
        <p>Had the <code class="inline-code">person.age</code> <em>not</em> have been equal to <code class="inline-code">42</code>, no call to the console would have been invoked, and nothing would have been logged or outputted.</p>
        <h3>Else Clauses</h3>
        <p>While sometimes in programs, having a simple statement that only runs if a condition is true works just fine, but other times we wish to run some other code should that statement <em>not</em> return true. Very much like the syntax of the English language, we can follow up our <code class="inline-code">if</code> statement with an <code class="inline-code">else</code> statement, which should run if our initial <code class="inline-code">if</code> statement not return <code class="inline-code">true</code>. Here is a simple example:</p>
        <pre><code>var person = {
  name: "Janice",
  age: 43
}

if (person.age == 42) {
  console.log("person's age is 42!");
} else {
  console.log("person's age is NOT 42!");
}

// returns "person's age is NOT 42!"</code></pre>
        <p>Else clauses in <code class="inline-code">if</code> statements are useful when there is some other outcome we wish to occur should our initial conditional statement fails.</p>
        <h3>Else If Clauses</h3>
        <p>But what if we have multiple conditionals we wish to check against? Let's utilize a for loop with conditional statements to demonstrate how to do so, now also using the <code class="inline-code">else if</code> clause:</p>
        <pre><code>var groupOfPeople = [
  {
    name: "Mary",
    age: 21
  },
  {
    name: "John",
    age: 18
  },
  {
    name: "Leslie",
    age: 25
  }
];

for (var i = 0; i &lt;= groupOfPeople.length - 1; i++) {
  var person = groupOfPeople[i];
  var statement = "";

  if (person.age &lt; 21) {
    statement = "My name is: " + person.name + " and I am under 21";
  } else if (person.age == 21) {
    statement = "My name is: " + person.name + " and I recently turned 21";
  } else {
    statement = "My name is: " + person.name + " and I am over 21";
  }

  console.log(statement);
}

/*
 * returns:
 * My name is: Mary and I recently turned 21
 * My name is: John and I am under 21
 * My name is: Leslie and I am over 21
*/</code></pre>
        <p>Here we utilize a for loop which utilizes two conditional clauses, whether <code class="inline-code">person.age</code> is less than <code class="inline-code">21</code>:</p>
        <pre><code>(person.age &lt; 21)</code></pre>
        <p>And also to see if the person's age is equal to <code class="inline-code">21</code>:</p>
        <pre><code>(person.age == 21)</code></pre>
        <p>Within our for loop, we iterate over the <code class="inline-code">groupOfPeople</code> array, checking each object's <code class="inline-code">age</code> property to see if the number value it returns is either <em>less than 21</em> or <em>equal to 21</em>. If neither of these conditions returns <code class="inline-code">true</code>, the <code class="inline-code">else</code> clause is run:</p>
        <pre><code>statement = "My name is: " + person.name + " and I am over 21";</code></pre>
        <p>Also note here how we initialize the variable statement to an empty string:</p>
        <pre><code>var statement = "";</code></pre>
        <p>This <code class="inline-code">statement</code> variable is set to an empty string every time our for loop runs, and then is assigned a new value based off of the set of <code class="inline-code">if</code>/<code class="inline-code">else if</code>/<code class="inline-code">else</code> conditionals that evaluate afterwards. Finally, at the end of each iteration, the <code class="inline-code">statement</code> is logged to the console. </p>
        <h3>Functions</h3>
        <p>Functions are a series of code that is encapsulated into a reusable series of control flow statements and conditionals. It takes a series of inputs and outputs a result related to that input. Let's say I have two different arrays which include objects that represent people and their respective ages. I wish to extract all the people from these arrays that are over 21 and store them in a new array called <code class="inline-code">canDrink</code>. I then wish to log this new <code class="inline-code">canDrink</code> array to the console. I could do so with two consecutive for loops like so:</p>
        <pre><code>var groupOne = [
  {
    name: "Mary",
    age: 25
  },
  {
    name: "Albert",
    age: 16
  },  
  {
    name: "Louis",
    age: 23
  }
];

var groupTwo = [
  {
    name: "Clarence",
    age: 42
  },
  {
    name: "Alphonse",
    age: 12
  },  
  {
    name: "Lucy",
    age: 24
  }
];

var canDrink = [];

for (var i = 0; i &lt;= groupOne.length -1; i++) {
  var person = groupOne[i];
  if (person.age &gt; 21) {
    canDrink.push(person);
  }
}

for (var i = 0; i &lt;= groupTwo.length -1; i++) {
  var person = groupTwo[i];
  if (person.age &gt; 21) {
    canDrink.push(person);
  }
}

console.log(canDrink);

/*
 * returns:
 * [
 *  {
 *    name: "Mary", 
 *    age: 25
 *  },
 *  {
 *    name: "Louise",
 *    age: 23
 *  },
 *  {
 *    name: "Clarence",
 *    age: 42
 *  },
 *  {
 *    name: "Lucy",
 *    age: 24
 *  }
 * ] 
*/</code></pre>
        <p>As you can see, the two for loops are only slightly different, one grabbing the persons from <code class="inline-code">groupOne</code> who are over <code class="inline-code">21</code>, and one grabbing the persons from <code class="inline-code">groupTwo</code> who are over <code class="inline-code">21</code>. The code, <code class="inline-code">canDrink.push</code>, by the way, is what is known as a method, specifically a method owned by the Array prototype (more on prototypes in a future article). The <code class="inline-code">push</code> method is relatively self explanatory. It simply adds the element passed to it onto the array it is called on. Thusly the <code class="inline-code">person</code> object is being <em>pushed</em> onto the end of the <code class="inline-code">canDrink</code> array in this particular example.</p>
        <p>There's a simple saying in programming, "Don't Repeat Yourself" (known by the acronym, DRY), and while this rule isn't exactly dogma, one should consider rewriting code that repeats itself like our example here. Note that there really is just one difference between the two for loops (the array being operated on).</p>
        <p>This is a classic case where a function can be utilized to encapsulate our for loop and the logic it uses so that we can accomplish the same task with a bit less code. See the following example:</p>
        <pre><code>var groupOne = [
  {
    name: "Mary",
    age: 25
  },
  {
    name: "Albert",
    age: 16
  },  
  {
    name: "Louis",
    age: 23
  }
];

var groupTwo = [
  {
    name: "Clarence",
    age: 42
  },
  {
    name: "Alphonse",
    age: 12
  },  
  {
    name: "Lucy",
    age: 24
  }
];

var canDrink = [];

function grabPersonsOfLegalAgeFrom(group) {
  for (var i = 0; i &lt;= group.length -1; i++) {
    var person = group[i];
    if (person.age &gt; 21) {
      canDrink.push(person);
    }
  }
}

grabPersonsOfLegalAgeFrom(groupOne);
grabPersonsOfLegalAgeFrom(groupTwo);

console.log(canDrink);

/*
 * returns:
 * [
 *  {
 *    name: "Mary", 
 *    age: 25
 *  },
 *  {
 *    name: "Louise",
 *    age: 23
 *  },
 *  {
 *    name: "Clarence",
 *    age: 42
 *  },
 *  {
 *    name: "Lucy",
 *    age: 24
 *  }
 * ] 
*/</code></pre>
        <p>Functions are one of the essential building blocks of nearly all programming languages. By encapsulating our for loop inside of a declared function, <code class="inline-code">grabPersonsOfLegalAgeFrom</code>, and passing it the more generic argument, <code class="inline-code">group</code>, we have created a piece of reusable logic. Notice that we even call it <em>twice</em>, using our first for loop to grab all persons within the <code class="inline-code">groupOne</code> array that are over <code class="inline-code">21</code> and pushing them into the <code class="inline-code">canDrink</code> array, and then calling the <code class="inline-code">grabPersonsOfLegalAgeFrom</code> function once again to do the same with the <code class="inline-code">groupTwo</code> array. Let's break down this new chunk of code:</p>
        <pre><code>var canDrink = [];

function grabPersonsOfLegalAgeFrom(group) {
  for (var i = 0; i &lt;= group.length -1; i++) {
    var person = group[i];
    if (person.age &gt; 21) {
      canDrink.push(person);
    }
  }
}

grabPersonsOfLegalAgeFrom(groupOne);
grabPersonsOfLegalAgeFrom(groupTwo);</code></pre>
        <p>Firstly, we instantiate our <code class="inline-code">canDrink</code> variable, assigning it the value of an empty array. We then invoke the creation of a new function by utilizing the reserved keyword, <code class="inline-code">function</code>. The new function is assigned the name <code class="inline-code">grabPersonsOfLegalAgeFrom</code>. Note that the lengthy name is a convention to ensure the readability of our code. </p>
        <pre><code><b>function</b> grabPersonsOfLegalAgeFrom</code></pre>
        <p>While I could have easily named the function <code class="inline-code">grabAdults</code> or <code class="inline-code">grabPeople</code> or even just <code class="inline-code">g</code>, I try my best to name my functions in a way that other programmers (or my future self) can easily understand what the function is supposed to do, even if they don't necessarily understand the code inside the function itself.</p>
        <p>The declared <code class="inline-code">grabPersonsOfLegalAgeFrom</code> function is then appended a pair of parentheses <code class="inline-code"> ( )</code>, inside of which the <em>argument</em>, <code class="inline-code">group</code> is provided.</p>
        <pre><code>function grabPersonsOfLegalAgeFrom(<b>group</b>)</code></pre>
        <p>Arguments are the input to functions. Ideally, arguments should be somehow related to the function's output. A function can be declared with as many arguments as you'd like, including no arguments. When declared, a JavaScript function makes no assumptions as to the data types of the variables being passed to it as arguments. Thusly in truth we could have passed a string variable, a number variable, an object, etc. to the <code class="inline-code">grabPersonsOfLegalAgeFrom</code> function and JavaScript would still <e>attempt to execute the code (possibly returning some unexpected output). </e></p>
        <p>After the declaration of our argumeents, we close off our parentheses, <code class="inline-code">( )</code>, and then instantiate the function body using curly braces, <code class="inline-code"> { }</code>. Inside the body of our function, we then encapsulate our previous logic from before. This time, however, the generic <code class="inline-code">group</code> argument is passed instead of the specific <code class="inline-code">groupOne</code> and <code class="inline-code">groupTwo</code> arrays. Afterwards which, we close off our function declaration using a closing curly brace, <code class="inline-code">}</code>.</p>
        <p>Lastly we <em>invoke</em> or <em>call</em> our function directly by simply writing it's name, then passing the <code class="inline-code">groupOne</code> array as an argument to the <code class="inline-code">grabPersonsOfLegalAgeFrom</code> function. This syntax essentially tells the JavaScript interpreter, "run the code inside this function, and pass this variable as the argument(s) to it".</p>
        <pre><code>grabPersonsOfLegalAgeFrom(groupOne);
grabPersonsOfLegalAgeFrom(groupTwo);</code></pre>
        <p>Had these two lines been omitted, the <code class="inline-code">canDrink</code> array would remain empty, as the function, <code class="inline-code">grabPersonsOfLegalAgeFrom</code>, although indeed is <em>defined</em>, was never <em>called</em>, and the code inside of it, thusly, never ran.</p>
        <h3>Scope and Returns</h3>
        <p>You'll note the declaration of the array <code class="inline-code">canDrink</code> in the previous example is instantiated prior to the declaration of the <code class="inline-code">grabPersonsOfLegalAgeFrom</code> function:</p>
        <pre><code>var canDrink = [];

function grabPersonsOfLegalAgeFrom(group) {</code></pre>
        <p>If you take some extra time to think on this, one might wonder: "Why not just instantiate the <code class="inline-code">candDrink</code> array <em>inside</em> of the <code class="inline-code">grabPersonsOfLegalAgeFrom</code> function? Why declare it <em>prior</em> to the function?" For the sake of demonstration, let's go ahead and input this code into our Developer Console and see the result of doing so:</p>
        <pre><code>var groupOne = [
  {
    name: "Mary",
    age: 25
  },
  {
    name: "Albert",
    age: 16
  },  
  {
    name: "Louis",
    age: 23
  }
];

var groupTwo = [
  {
    name: "Clarence",
    age: 42
  },
  {
    name: "Alphonse",
    age: 12
  },  
  {
    name: "Lucy",
    age: 24
  }
];

function grabPersonsOfLegalAgeFrom(group) {
  var canDrink = [];
  for (var i = 0; i &lt;= group.length -1; i++) {
    var person = group[i];
    if (person.age &gt; 21) {
      canDrink.push(person);
    }
  }
}

grabPersonsOfLegalAgeFrom(groupOne);
grabPersonsOfLegalAgeFrom(groupTwo);

console.log(canDrink);</code></pre>
        <p>If we copy this code into the browser's console and run it, we'll receive the following error:</p>
        <pre><code>Uncaught ReferenceError: canDrink is not defined</code></pre>
        <p>To the beginner, this might cause some annoyance. One can clearly see the <code class="inline-code">canDrink</code> variable is declared, just this time inside of the <code class="inline-code">grabPersonsOfLegalAgeFrom</code> function. Why did this subtle change cause an error? Before explaining, let's adjust our code slightly by putting a log to the console inside of the <code class="inline-code">grabPersonsOfLegalAgeFrom</code> function:</p>
        <pre><code>function grabPersonsOfLegalAgeFrom(group) {
  var canDrink = [];
  for (var i = 0; i &lt;= group.length -1; i++) {
    var person = group[i];
    if (person.age &gt; 21) {
      canDrink.push(person);
    }
  }
  console.log(canDrink);
}

grabPersonsOfLegalAgeFrom(groupOne);
grabPersonsOfLegalAgeFrom(groupTwo);

console.log(canDrink);</code></pre>
        <p>The output to this gives us some insights into what is happening. By having a log to the console inside of our <code class="inline-code">grabPersonsOfLegalAgeFrom</code> function, as well as outside of it, we see that the inner logs to the console are actually showing us results:</p>
        <pre><code>/*
 * returns
 * [
 *   {
 *     name: "Mary",
 *     age: 25
 *   },
 *   {
 *     name: "Louis",
 *     age: 23
 *   }
 * ]
 * and then returns
 * [
 *   {
 *     name: "Clarence",
 *     age: 42,
 *   },
 *   {
 *     name: "Lucy",
 *     age: 24,
 *   }
 * ]
 * and then logs the error:
 * Uncaught ReferenceError: canDrink is not defined
*/</code></pre>
        <p>First and foremost, unlike our previous return value, which was all encapsulated within a single array, the inner <code class="inline-code">canDrink</code> array is logged <em>twice</em>: two separate arrays are presented each from the respective original <code class="inline-code">groupOne</code> and <code class="inline-code">groupTwo</code> arrays. The people inside it are indeed over <code class="inline-code">21</code>, but why two arrays?</p>
        <p>Scope within the JavaScript programming language can be thought of as the <em>context</em> in which variables can be "seen". Prior to our little investigation here, our <code class="inline-code">canDrink</code> array was instantiated inside of what is known as the <em>global scope</em>. This means there are no contexts outside of the one we instantiated it. It is visible to all functions, for loops, if statements, etc. because it was instantiated at the top most level, or "global", scope.</p>
        <p>When we decided to investigate and see what happened if we instead instantiated the <code class="inline-code">canDrink</code> array inside of the <code class="inline-code">grabPersonsOfLegalAgeFrom</code> function, we made the <code class="inline-code">canDrink</code> variable "visible" only within the context of the <code class="inline-code">grabPersonsOfLegalAgeFrom</code> function. This means that the inner <code class="inline-code">for</code> loop and <code class="inline-code">if</code> statement all had access to and could "see" that <code class="inline-code">canDrink</code> exists, but any reference to it outside of the function would be as if we were to try and reference a variable we never declared. In programming, you cannot directly reference a variable that you did not first instantiate. In this case, we cannot reference the <code class="inline-code">canDrink</code> array outside of the function.</p>
        <p>One might then say, "Ok, so why not just end our little experiment here and just declare <code class="inline-code">canDrink</code> as a global variable?". For the sake of this trivial program, we indeed could do so, but in larger scale applications, it is considered poor practice to declare every variable as a global variable. Global variables indeed exist in nearly every program, but every time we instantiate a variable, we are asking the browser, and by extension, the computer it's running on, to reserve a new place in memory (RAM) to hold onto the reference of our new variable. In a large enough program, if all variables were declared simply in the global scope, the memory footprint of our program would become unnecessary large.</p>
        <p>Additionally, variables declared in the global scope that do not use the reserved keyword <code class="inline-code">const</code> (more on that in the next article), can be redeclared by any function that has access to the global scope. In other words, if you have multiple programmers working on a single file and one of them accidentally overwrites a global variable, they may throw off all the other functions that reference that variable, thus creating unexpected behavior in our program. Worse yet, our program wouldn't even throw any useful error messages as this is technically viable JavaScript, and thusly it would be difficult to pinpoint where exactly this unexpected behavior was originating from.</p>
        <p>Please note that one cannot eliminate the use of global variables entirely. It's just good practice to keep the global scope of our programs as clean and concise as possible, ensuring variables are only declared in the global scope when they are to be returned to the user in some form or fashion, or are utilized by too many functions to justify repeatedly encapsulating said variables in multiple local scopes.</p>
        <p>Ultimately when JavaScript threw this ReferenceError, it was not only letting us know that we didn't have a global variable called <code class="inline-code">canDrink</code>, but it was helping us determine what course of action to take to resolve this error (hopefully in an elegant fashion). Rather than simply reverting back to putting <code class="inline-code">canDrink</code> into the global scope, let's use a <code class="inline-code">return</code> statement within our <code class="inline-code">grabPersonsOfLegalAgeFrom</code> function, and then encapsulate the return values into variables that we can then utilize to return our <code class="inline-code">canDrink</code> array as before:</p>
        <pre><code>var groupOne = [
  {
    name: "Mary",
    age: 25
  },
  {
    name: "Albert",
    age: 16
  },  
  {
    name: "Louis",
    age: 23
  }
];

var groupTwo = [
  {
    name: "Clarence",
    age: 42
  },
  {
    name: "Alphonse",
    age: 12
  },  
  {
    name: "Lucy",
    age: 24
  }
];

function grabPersonsOfLegalAgeFrom(group) {
  var canDrink = [];
  for (var i = 0; i &lt;= group.length -1; i++) {
    var person = group[i];
    if (person.age &gt; 21) {
      canDrink.push(person);
    }
  }
  return canDrink;
}

var personsOfLegalAgeFromGroupOne = grabPersonsOfLegalAgeFrom(groupOne);
var personsOfLegalAgeFromGroupTwo = grabPersonsOfLegalAgeFrom(groupTwo);

var globalCanDrink = personsOfLegalAgeFromGroupOne.concat(personsOfLegalAgeFromGroupTwo);

console.log(globalCanDrink);</code></pre>
        <p>This is a contrived example, and probably is no better than the prior examples where <code class="inline-code">canDrink</code> was initially declared in the global scope as an empty array. This example, however, demonstrates the use of the <code class="inline-code">return</code> keyword, which is often used when you wish to output a value from a function and then subsequently encapsulate it in another variable (or work with it directly in another function).</p>
        <p>By returning the <code class="inline-code">canDrink</code> array from our <code class="inline-code">grabPersonsOfLegalAgeFrom</code> function, we are now able to reference that value directly. Often this is more easily managed by declaring a variable that then holds the return value of the invoked function. </p>
        <p>To hammer home the point let's look at how our calls to <code class="inline-code">grabPersonsOfLegalAgeFrom</code> function have changed. In our previous piece of code, in which the <code class="inline-code">canDrink</code> array was initially declared in the global scope, our calls to <code class="inline-code">grabPersonsOfLegalAgeFrom</code> were simply invoked, <em>pushing</em> the people who's age is over <code class="inline-code">21</code> into the global <code class="inline-code">canDrink</code> array:</p>
        <pre><code>grabPersonsOfLegalAgeFrom(groupOne);
grabPersonsOfLegalAgeFrom(groupTwo);</code></pre>
        <p>Our new version instead encapsulates the returned <code class="inline-code">canDrink</code> array inside two new variables:</p>
        <pre><code>var personsOfLegalAgeFromGroupOne = grabPersonsOfLegalAgeFrom(groupOne);
var personsOfLegalAgeFromGroupTwo = grabPersonsOfLegalAgeFrom(groupTwo);</code></pre>
        <p>And then uses the Array prototype's <code class="inline-code">.concat</code> method to essentially merge/join the two arrays together so that our result is the same as our previous example's. I chose to encapsulate this in a variable called <code class="inline-code">globalCanDrink</code> to ensure that the differentiation from the canDrink's local scope is made overtly clear.</p>
        <pre><code>var globalCanDrink = personsOfLegalAgeFromGroupOne.concat(personsOfLegalAgeFromGroupTwo);

console.log(globalCanDrink);</code></pre>
        <p>Finally a call to the console shows our results, which are the same as our original example's:</p>
        <pre><code>/*
 * returns:
 * [
 *  {
 *    name: "Mary", 
 *    age: 25
 *  },
 *  {
 *    name: "Louise",
 *    age: 23
 *  },
 *  {
 *    name: "Clarence",
 *    age: 42
 *  },
 *  {
 *    name: "Lucy",
 *    age: 24
 *  }
 * ] 
*/</code></pre>
        <h1>Conclusion </h1>
        <p>The subject of JavaScript is so vast that one could spend a lifetime trying to cover it all in detail. The same technically could be said of CSS and even HTML. Ultimately, however, the use of these three tools together are the backbone of the web itself, and it is my opinion that exploring each of these subjects together in the process of making web pages and applications to be the best way to learn each of them, as they were originally designed to work in concert together.</p>
        <p>In my next article, I will be walking you through a small codebase that exemplifies a basic todo list application. It will utilize many of the concepts we have covered thus far as well as concepts covered in my previous two articles, <a aria-label="a link to the article HTML: The Web's Skeleton" class="inline-link" href="https://brianhayes.dev/blog/html_the_webs_skeleton.html" role="link">HTML: The Web's Skeleton</a>, and <a aria-label="a link to the article CSS: The Web's Makeup" class="inline-link" href="https://brianhayes.dev/blog/css_the_webs_makeup.html" role="link">CSS: The Web's Makeup</a>. Additionally, very basic git commands and other developer tools will be utilized to give you an introduction into the essential workflow of creating a basic interactive web page.</p>
        <p>I do hope that this introduction to the JavaScript Programming Language has proven insightful and useful to you. Originally my hope was to encapsulate the subject matter into a single article, but as you can see, JavaScript is a vast language, and we haven't even started utilizing it on an acutal web page. I look forward to shedding further light on the topic in the next article, <a aria-label="link to the article: HTML, CSS, and JS" class="inline-link" href="https://brianhayes.dev/blog/javascript_the_webs_muscles#" role="link">HTML, CSS, and JS: All Together</a>.</p>
      </article>]]></description>
			<guid isPermaLink="false">https://brianhayes.dev/blog/javascript_the_webs_muscles</guid>
			<pubDate>Sun, 28 Jan 2024 00:00:00 +0000</pubDate>
		</item>
<item>
			<title>Command Line</title>
			<link>https://brianhayes.dev/blog/command_line</link>
			<description>&lt;article class="demo-button"&gt;&lt;h1&gt;Introduction&lt;/h1&gt;&lt;p&gt;Learning to Program can be an intimidating venture. Not only is there a plethora of programming languages, libraries, frameworks, text editors, and more, there is also the overwhelming amount of opinions amongst more experienced programmers one might consider when deciding between which of these tools is best. Navigating all of this is no easy task and it is something I still struggle with when examining a field of software development I have little knowledge of (pretty much all of it).&lt;/p&gt;&lt;p&gt;How does one know which text editor to choose? Which programming language should I learn first? Should I use MacOS or Windows? (hint: neither). One of the more uncommon (although not necessarily rare) questions asked amongst beginner developers is, which shell should I use?&lt;/p&gt;&lt;p&gt;Before I dive into this topic, I feel like it may be prudent to address the simple question of:&lt;/p&gt;&lt;h2&gt;What Is A Shell?&lt;/h2&gt;&lt;p&gt;If you have done any amount of beginner programming, systems administration, database management, or other computer related work, it is likely you have already interacted with The Terminal (Emulator), The Command Line and its close companion, The Shell. I shall very briefly address what each of these are, and why, together, they are the most important tool for anyone interested in interacting with computers at any meaningful level.&lt;/p&gt;&lt;p&gt;In Windows, it is known as The Command Prompt(or Powershell), in MacOS it is known as The Terminal, and in Linux and BSD, it is also known simply as the Terminal. The history of the terminal is extensive, and I would only doing you a disservice to you were I to attempt to explain it in depth to you. For the sake of brevity, I shall simply explain how The Command Line and shell pertain to you, the prospective Computer Programmer, and why it is so important for all programmers to become familiar with it.&lt;/p&gt;&lt;p&gt;If you were to open up Command Prompt in Windows, or the Terminal in MacOS, you would be presented with a black (or blue) colored screen, usually prefaced by a series of characters known as a prompt, and a cursor indicating the program is awaiting you to type something (to provide input via the keyboard). To the uninitiated, this is intimidating, especially after inputting something and getting a mean looking error message (oftentimes highlighted in red). I must admit, whenever anyone who is unfamiliar with computers has seen me working in the terminal, they have often thrown around terms like "hacker," which I find to be so funny, because it simply shows how the mainstream media has failed to portray technology in an accurate light (save for modern exceptions like Mr. Robot, Halt and Catch Fire, and Silicon Valley). Although hackers do indeed use the command line, so do nearly all computer related professions!&lt;/p&gt;&lt;p&gt;When I first began programming, I started focusing mainly on the tool of the text editor. It was only when I began to seriously dive into the world of Linux that I began to seriously play around in the terminal. Even in my earliest days playing around in Linux, however, I rarely interacted with the Terminal. This is partially because for at least some time at the beginning, typing in the shell felt laborious, more boring than programming (which it still is), and not worth investigating beyond the few times I had to invoke a command, or start a program. And it's true that the shell is just a tool that allows you to invoke commands that call other programs...but that's why it will always be one of the best pieces of software ever written.&lt;/p&gt;&lt;p&gt;Just like everything in the world of programming, there is rarely just one option when it comes to tools, and almost never just one way to do things. The same is true of shells, but just like these other aspects of the programming world, it doesn't mean there haven't been some clear winners in that space as well.&lt;/p&gt;&lt;p&gt;Although I know I will get some push back on this from Windows Users, it simply is the case that the UNIX-style shell won out. Specifically the BASH shell is the one most utilized by default in nearly all Linux Distributions, and was also the primary shell utilized in MacOS until recently (which currently utilizes the Z shell). Regardless of which shell you utilize, many of them have similar commands that perform a plethora of operations via your operating system. It is due to this common history with the BASH Shell, and the features that are available specifically within the BASH shell scripting language, that it is worthwhile to dive deep into the subject of the shell and shell scripting, as it is your direct link to working on and with the operating system while utilizing a high level language to do so. BASH, while not a full featured programming language, is an extremely powerful scripting language which owes its (somewhat niche) popularity to the simple fact that GNU/Linux is everywhere, and thusly, so is its default shell, bash. Indeed, it is due to the basic UNIX tool set and the eventual choice by the maintainers of GNU/Linux, BSD, and MacOS that BASH proliferated.&lt;/p&gt;&lt;p&gt;At this point in the article I will digress on the subject of scripting, as a beginner is best suited to learning a few basic commands, understanding some of BASH's basic features, and how the use of the terminal in programming is essential. Please note that while you can follow along in Windows, I will not be covering Windows specific Powershell commands. Unfortunately Windows does not have BASH in its software suite by default, and you must install Windows SubSystem For Linux or Cygwin to utilize many of the same commands.&lt;/p&gt;&lt;p&gt;Following the instructions below, note the effects.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#opening_a_terminal.txt

- MacOS - Click the Launchpad Icon in the Dock, type Terminal and click Terminal
- Linux/BSD - Look up which Terminal Emulator your distribution uses by default and open it&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You will be presented with a simple black, amber, or blue colored window with a prompt ending in either % or $ (ZSH uses %, BASH uses $). There is also usually a rectangular cursor indicating the shell is awaiting input from you. Typing just anything into the terminal and getting error messages gets old quick, so let's explore our first command, ls:&lt;/p&gt;&lt;figure&gt;&lt;img alt="results of the ls command" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/ls_command.webp" title="results of the ls command"&gt;&lt;/figure&gt;&lt;figcaption&gt;Example Results of the "ls" Command&lt;/figcaption&gt;&lt;p&gt;Colloquially, each command will, in theory, be an abbreviation or shortened anagram for a word that will remind you of the action often associated with the command. In this case ls stands simply for 'list' as in 'list all my files and directories'. Here you can see that when I type in ls, I am presented with the contents of what is known as my $HOME directory (we'll cover the $ later). Usually, the ls command has been slightly modified so that colors appear on some of the results, indicating the type of file the result is, or whether or not the result is a directory.&lt;/p&gt;&lt;p&gt;If we then, for our second command, type 'ls' again, but this time follow it with a '-a', we are presented with slightly different results:&lt;/p&gt;&lt;figure&gt;&lt;img alt="results of the ls command with -a flag" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/ls_with_aflag.webp" title="results of the ls command with -a flag"&gt;&lt;/figure&gt;&lt;figcaption&gt;Example Results of the "ls" Command With "-a" flag&lt;/figcaption&gt;&lt;p&gt;Here we see that we now have alot more files and directories, many preceded with a '.', which are our 'hidden' files and directories. There have been more than a few discussions on the concept of hidden files, but needless to say, these files/directories are not visible without the '-a' appended to our 'ls' command. I point this out more as an introduction to the concept of flags '-a' is considered a flag of the 'ls' command that changes the results in some fashion. In this case it stands for 'all', as in show 'list all of my files, yes even the hidden ones.'&lt;/p&gt;&lt;p&gt;Many commands, although not all commands, have flags which somehow change the behavior of the program being called.&lt;/p&gt;&lt;p&gt;I won't go into all the commands available in the shell as there are quite a lot, but I will provide you with some standard commands to research and become familiar with, as they will become invaluable later on:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#basic_shell_commands.txt

- man
- cd 
- mkdir/rmdir
- touch/rm
- cp
- mv
- mv
- echo/print/printf&amp;amp;#- cat/tac
- less
- head
- read
- find
- sed
- grep
- awk
- tr
- df
- top
- ps
- diff
- dd
- who&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, all of these tools are great, but lack luster by comparison to your standard Graphical User Interface (GUI) programs that most users interact with on their desktops. The power of the shell isn't in that it can execute programs (although that is its main purpose), it is its ability to chain together and redirect and manipulate the input and output of various programs to yield a desired result...that's right, the BASH shell is a scripting language, which with the use of various operators can chain together to manipulate textual inputs and outputs. Take this simple example:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[ ~]$ echo \ 
"this text is inputted from the command line" \
&amp;gt; from_the_command_line.txt&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here we simultaneously created a file called 'from_the_command_line.txt' and wrote the text 'this text is inputted from the command line' into it. If we then inspect the contents of this file using cat:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[ ~]$ cat from_the_command_line.txt&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;figure&gt;&lt;img alt="results of the cat command on a file" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/redirection_01.webp" title="results of the cat command on a file"&gt;&lt;/figure&gt;&lt;figcaption&gt;Example Results Of The "cat" Commmand On A File&lt;/figcaption&gt;&lt;p&gt;We'll see that indeed, the text 'this text is inputted from the command line' is indeed there. What is happening here?&lt;/p&gt;&lt;h2&gt;Redirection Basics&lt;/h2&gt;&lt;p&gt;Well just like every problem in programming, we divide the program up into sizeable chunks, and explain each part to the best of our abilities (and hopefully our peers very kindly correct us if we are wrong).&lt;/p&gt;&lt;p&gt;Firstly, what does echo do? Well if you researched my list up above a bit, you'll know that the first recommended command was the 'man' command. Why? well it's the manual of course! Any command you wish to know more about can be investigated by invoking 'man' before the command you wish to know more about, if you type:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[ ~]$ man echo&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You'll see an extensive explanation of the 'echo' command and its various flags. A relatively easy to understand program, echo simply displays any text following the command back to you. So the input that was entered after the 'echo' command is also the output of the command. Thusly invoking:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[ ~]$ echo 'this litle sheep went bah'&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Displays:&lt;/p&gt;&lt;figure&gt;&lt;img alt="bash shell example of basic echo command" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/echo_command.webp" title="bash shell example of basic echo command"&gt;&lt;/figure&gt;&lt;figcaption&gt;Results Of The "echo" Commmand&lt;/figcaption&gt;&lt;p&gt;But what about the '&amp;gt;' character in our initial example? Well this is what is known as a redirection operator. This '&amp;gt;' will 'redirect' whatever is the output of the first command(echo) as the input written to the following file or program. Please note that this will overwrite any existing text already present in the file, so don't experiment on any file with valuable information to you. If you do wish to append to the file, without overwriting its existing text, simply double up on the greater than symbol:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[ ~]$ echo 'appended text' &amp;gt;&amp;gt; from_the_command_line.txt&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;figure&gt;&lt;img alt="bash shell example of appending text using echo and the &gt;&gt; redirection flag" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/echo_append.webp" title="bash shell example of appending text using echo and the &gt;&gt; redirection flag"&gt;&lt;/figure&gt;&lt;figcaption&gt;Using The "&amp;gt;&amp;gt;" Operator Appends Text When Used With "echo"&lt;/figcaption&gt;&lt;p&gt;If you wish to research one of the most powerful operators in bash, research the pipe ('|') operator!&lt;/p&gt;&lt;p&gt;Hopefully at this point, you are starting to understand the role of the shell and the command line a bit better. For this next example, I am going to demonstrate how many programs have a command line interface with which one may interact, or at least initialize, a program, be it a Graphical or Terminal based application.&lt;/p&gt;&lt;h2&gt;The Power Of The Shell&lt;/h2&gt;&lt;p&gt;One of the first epiphanies for me regarding the terminal was when I realized I could invoke pretty much any program in my operating system with simple commands. If I wished to open my browser (librewolf), I simply had to type into the terminal its name:&lt;/p&gt;&lt;figure&gt;&lt;img alt="librewolf browser being called from the bash shell" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/librewolf.webp" title="librewolf browser being called from the bash shell"&gt;&lt;/figure&gt;&lt;figcaption&gt;Librewolf Browser being called from The Command Line&lt;/figcaption&gt;&lt;p&gt;While this may not seem like a big deal to some, it was upon doing this that I realized why the terminal was powerful, it allowed any program to be invoked as long as you knew its name. Rather than clicking through a myriad of nested directories to find where I had put an executable (like when using Windows File Explorer), I simply had to type it out and it would open up on my screen.&lt;/p&gt;&lt;p&gt;When I first installed Linux, the first piece of graphical software I had become familiar with was the backup utility, Timeshift, which essentially takes a 'snapshot' of the current state of your desktop and allows you to 'revert' back to that snapshot should you want/need to.&lt;/p&gt;&lt;p&gt;Timeshift has both a Graphical User Interface(GUI) as well as a Command Line Interface(CLI). I first learned to use Timeshift utilizing the GUI, but then I became curiouos about the CLI. It wasn't long before I realized that most of the information available via the GUI interface could be accessed via the CLI. I really only needed four commands from the CLI, these were:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#timeshift_commands.txt

- timeshift --create
- timeshift --delete
- timeshift --list
- timeshift --restore&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And every once in a while, after an update on my system, I would invoke the 'timeshift create' command to create a snapshot of my current system. Timeshift has occasionally saved me from big mistakes I've made, and is a good piece of software.&lt;/p&gt;&lt;p&gt;The reason I point this out is that even though timeshift isn't a part of the shell as a subject, I am simply pointing it out as a practical example of when utilizing the text interface of Timeshift's CLI, via the shell, became more useful to me than interfacing with the GUI version. This became even more the case when I discovered the existence of shell aliases.&lt;/p&gt;&lt;h2&gt;A Rose By Any Other Name&lt;/h2&gt;&lt;p&gt;Of course, I've provided you now with the knowledge of how to do your own research regarding any command, so be sure to pull up:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[ ~]$ man alias&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And do more research, but I'll give you a general idea of why this is such a powerful tool for anyone invested in computers to know. Essentially aliases are a series of commands invoked by a custom command of your naming.&lt;/p&gt;&lt;p&gt;If you invoke:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[ ~]$ alias cdls="cd ~/Documents &amp;amp; ls"&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You will navigate into your Documents directory and then list out its contents after invoking your custom command, 'cdls'&lt;/p&gt;&lt;p&gt;The "&amp;amp;" is another operator that waits for one command to complete before then invoking the following command. The "&amp;amp;" operator can be chained as many times as desired and when applied to an alias, essentially condenses a very long command into a shorter command (unless you name your alias something very long I suppose).&lt;/p&gt;&lt;p&gt;Now, the somewhat annoying thing is that these aliases, when created this way, are forgotten as soon as you close the terminal or your shell session somehow ends. Aliases can be saved, however, by placing them in your ~/.bashrc file. This configuration file is checked by the shell prior to initiation, including alias assignments. Thusly, if you simply append:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#.bashrc 
#!/usr/bin/env bash 

alias cdls="cd ~/Documents &amp;amp; ls"&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To the end of your ~/.bashrc file, you will have created a custom command that persists even after you have closed your terminal and shut down your computer.&lt;/p&gt;&lt;p&gt;This is the very essentials of scripting, the chaining of programs together to create different results. An alias is essentially a one line script.&lt;/p&gt;&lt;p&gt;While it wasn't one of my first aliases I ever wrote, I do have a single alias I will share with you that I use often, it simply invokes timeshift three times, once to delete the old backup, once to create a new backup, and once to list out all backups so I can confirm that the backup was made, I called it tshift, this is the command in my .bashrc:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#.bashrc 
#!/usr/bin/env bash 

alias tshift="sudo timeshift --delete &amp;amp;&amp;amp; sudo timeshift --create &amp;amp;&amp;amp; sudo timeshift --list"&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, tshift is far less characters to type, and it is a very handy, but very simple, alias I have created for myself. (if you are on Linux and unfamiliar with the sudo command, please see the man pages for sudo, if you are on MacOs, a simple query into your favorite search engine I am sure will yield good results).&lt;/p&gt;&lt;h1&gt;Conclusion&lt;/h1&gt;&lt;p&gt;Aliases is where I leave this short introduction to the Command Line and shell. It is at this point that the subject of BASH scripting should be covered, and that is an extensive topic of its own.&lt;/p&gt;&lt;p&gt;I do hope that you have now gained a better understanding and appreciation for the command line and the shell. The shell provides a direct, unobfuscated, and elegantly simple interface through which all computer users can accomplish more with less, and is one of the best tools you can become familiar with. So get comfy in it!&lt;/p&gt;&lt;/article&gt;</description>
			<guid isPermaLink="false">https://brianhayes.dev/blog/why_use_linux.html</guid>
			<pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate>
		</item>
<item>
			<title>CSS</title>
			<link>https://brianhayes.dev/blog/css_the_webs_makeup</link>
			<description>&lt;article class="demo-button"&gt;&lt;h1&gt;Introduction&lt;/h1&gt;&lt;p&gt;In my &lt;a aria-label="link to article, html the web's skeleton" class="inline-link" href="https://brianhayes.dev/blog/html_the_webs_skeleton.html" role="link"&gt;previous article&lt;/a&gt;, I gave a general introduction to the basics of The HyperText Markup Language (HTML) as well as The Document Object Model (DOM). To briefly review, HTML provides a general scaffolding onto which stylings (via Cascading Style Sheets) and interactivity (via JavaScript) can be utilized to render pages and applications on the Web. Having a basic understanding of HTML, and how the DOM renders and organizes HTML elements, is a necessary prerequisite to garnering further knowledge on how to style the web. This article, very much in the spirit of the previous, is meant as a general introduction to the basics of how to do said styling, using Cascading Style Sheets, more commonly known as CSS.&lt;/p&gt;&lt;h2&gt;The Cascade&lt;/h2&gt;&lt;p&gt;CSS, at its essence, is a &lt;a aria-label="link to wiki page on style sheet language" class="inline-link" href="https://en.wikipedia.org/wiki/Style_sheet_language" rel="noopener noreferrer" role="link" target="_blank"&gt;style sheet language&lt;/a&gt;, which when utilized by web developers or users of web pages/applications, allows for the selective styling of HTML elements. Through an algorithm native to the Web Browser known simply as the &lt;a aria-label="a link to an mdn article on the CSS cascade" class="inline-link" href="https://developer.mozilla.org/en-US/docs/Web/CSS/Cascade" rel="noopener noreferrer" role="link" target="_blank"&gt;CSS Cascade&lt;/a&gt;, CSS is used to color, style, and format elements within the HTML document based on a prerogative series of determinant rules that are based off of the browser's native user-agent and/or the web developer's authored stylesheets.&lt;/p&gt;&lt;p&gt;The topics of the &lt;a aria-label="the wikipedia article on user-agent" class="inline-link" href="https://en.wikipedia.org/wiki/User_agent" rel="noopener noreferrer" role="link" target="_blank"&gt;User-Agent&lt;/a&gt; and the user-agent styles are separate subjects in their own right, but for both brevity and simplicity's sake, one can think of the user-agent styles as being the default stylings rendered by your browser when no author stylesheets are provided. This is why basic HTML documents are still rendered in a human readable fashion, even when no custom stylings are configured.&lt;/p&gt;&lt;p&gt;An entire blog post could be written regarding the topic of the CSS Cascade, but to be honest, the in depth understanding of the concept is not at all necessary to getting started with CSS. Nevertheless, I felt it was important to address the subject at least in part, as even basic knowledge of the CSS Cascade will eventually prove invaluable in understanding how CSS is rendered in the browser as one becomes more versed in designing web pages. In the following sections regarding Inline Styles and Author Stylesheets, how The CSS Cascade influences the rendering of the web page will hopefully become more apparent.&lt;/p&gt;&lt;h2&gt;Inline Styles&lt;/h2&gt;&lt;p&gt;The easiest way to demonstrate CSS basics is to build off of our previous knowledge on HTML. Let's use our previous article's basic HTML document as a starting point:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;!--hello_world.html--&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;My Hello World Example&amp;lt;/title&amp;gt;
    &amp;lt;meta charset="UTF-8" /&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1" /&amp;gt;
    &amp;lt;link href="css/style.css" rel="stylesheet" /&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;main&amp;gt;
      &amp;lt;article&amp;gt;
        &amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;
        &amp;lt;p&amp;gt;
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
        tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
        veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
        commodo consequat. Duis aute irure dolor in reprehenderit in voluptate
        velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint
        occaecat cupidatat non proident, sunt in culpa qui officia deserunt
        mollit anim id est laborum.
        &amp;lt;/p&amp;gt;
      &amp;lt;/article&amp;gt;
    &amp;lt;/main&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you may recall, this is a very basic HTML document, with many HTML elements commonly seen in standard web pages. While the appearance of this document is rather bland, as it utilizes the default user-agent styles native to our web browser, we can start to change this default styling using CSS. To simply dive in, let's start by adding a style attribute to our &lt;code class="inline-code"&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; and &lt;code class="inline-code"&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;!--hello_world.html--&amp;gt;
&amp;lt;h1 &lt;b&gt;style="text-decoration-line: underline"&lt;/b&gt;&amp;gt;Hello World!&amp;lt;/h1&amp;gt;
    &amp;lt;p &lt;b&gt;style="color: red"&lt;/b&gt;&amp;gt;
    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
    tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
    veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
    commodo consequat. Duis aute irure dolor in reprehenderit in voluptate
    velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint
    occaecat cupidatat non proident, sunt in culpa qui officia deserunt
    mollit anim id est laborum.
    &amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If we then render this page in our browser, we will see our HTML page now has some additional stylings added:&lt;/p&gt;&lt;figure&gt;&lt;img alt="A screenshot displaying the h1 tag with underline stylings and paragraph with red stylings" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/css_ss_01.webp" title="Inline CSS stylings applied to a basic HTML document"&gt;&lt;/figure&gt;&lt;figcaption&gt;Underline and Color Stylings Applied Via Inline CSS&lt;/figcaption&gt;&lt;p&gt;As you can see, applying the style attribute to the &lt;code class="inline-code"&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; and the &lt;code class="inline-code"&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags, and then inputting specific property/value text that CSS recognizes, visually changes the text of the targetted HTML elements (specifically underlining the text of the &lt;code class="inline-code"&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag and coloring the text of the &lt;code class="inline-code"&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag red). This is what is known as "inline-styles," which is appropriately named due to the CSS being defined directly in the HTML itself.&lt;/p&gt;&lt;p&gt;We will cover the properties specifically defined within this style attribute shortly. As you may imagine, this convention of defining CSS styles directly in the HTML document itself could quickly become cumbersome, as the more CSS properties you may wish to define, the rather lengthy (and possibly unreadable) your HTML document will be. This convention of defining inline styles is useful however, in understanding the CSS Cascade, but only when in comparison and contrasted with other aspects of it, like Author Stylesheets.&lt;/p&gt;&lt;h2&gt;Author Stylesheets&lt;/h2&gt;&lt;p&gt;The above markup code demonstrating inline-styles is an example of what is known as Author Styles. As the name implies, these are styles that are authored by a web developer or user, which changes the default stylings native to the browser's User-Agent. As mentioned previously, the practice of authoring syles directly in our HTML document via inline-styles, while useful, can quickly become cumbersome as more stylings are authored and applied.&lt;/p&gt;&lt;p&gt;To ensure readability and organization of code, oftentimes styles are relegated to their own .css file, and then imported via the HTML &lt;code class="inline-code"&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag. You may have taken note of this tag in our example HTML document as one of the children elements within the &lt;code class="inline-code"&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;!--hello_world.html--&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;My Hello World Example&amp;lt;/title&amp;gt;
    &amp;lt;meta charset="UTF-8" /&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1" /&amp;gt;
    &lt;b&gt;&amp;lt;link href="css/style.css" rel="stylesheet" /&amp;gt;
&lt;/b&gt;  &amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Very essentially, this tag tells the browser to import the styling configurations within the style.css file, which is located within the css directory related to the current working directory. The "rel" attribute explicitly tells the browser that the relationship between this import and the HTML document as a stylesheet. Let's now style our HTML document in a similar fashion as before when we exemplified the use of inline-styles, but now utilize this stylesheet. From the command line, make a directory called "css", and then create a file within that directory, called "style.css":&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[ ~]$ mkdir css &amp;amp;&amp;amp; touch css/style.css&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, open this style.css file in your text editor and input the following CSS code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;/*style.css*/

h1 {
  text-decoration-line: underline;
}

p {
  color: red;
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, this CSS is immediately more readable than when it was configured instead as an inline-style directly within our HTML document. Let us now take a brief moment to analyze the anatomy of this very basic .css file.&lt;/p&gt;&lt;p&gt;As you may have guessed, the first line indicating the name of a file is also there to demonstrate the appropriate way to make comments in CSS. Encapsulated within a forward slash and asterix, and ending with an asterix followed by a forward slash, this line will not be rendered by the browser's CSS parser, but like all code comments, is useful for brief notes to developers about the code itself.&lt;/p&gt;&lt;p&gt;The first element that we encounter is specifically the &lt;code class="inline-code"&gt;h1&lt;/code&gt; element, which is listed simply on its own line followed by an opening curly brace. The &lt;code class="inline-code"&gt;h1&lt;/code&gt; text is what is known as a CSS selector. As the name implies, this selector will "select" all instances of the &lt;code class="inline-code"&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag within our HTML document and apply the stylings that are encapsulated between the curly braces.&lt;/p&gt;&lt;p&gt;Within the curly braces, there is the text "text-decoration-line", which is the CSS property that we, the web developer, are indicating we wish to change from its default value. The following specification, "underline", configures all instances of the &lt;code class="inline-code"&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag to have their inner text underlined.&lt;/p&gt;&lt;p&gt;Together with the property, &lt;code class="inline-code"&gt;text-decoration-line&lt;/code&gt;, as well as the property value, &lt;code class="inline-code"&gt;underline&lt;/code&gt;, we the web developer have created what is known as a CSS "declaration". The following image, taken from the official &lt;a aria-label="a link to the MDN web documentation on CSS basics" class="inline-link" href="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics" rel="noopener noreferrer" role="link" target="_blank"&gt;MDN web docs&lt;/a&gt;, illustrates this concept for us visually:&lt;/p&gt;&lt;figure&gt;&lt;img alt="a diagram demonstrating the basic structure of a CSS Author Declaration" cite="MDN Web Docs" class="img-image" loading="lazy" src="../assets/images/img/css_css-declaration-small.webp" title="css declaration diagram"&gt;&lt;/figure&gt;&lt;figcaption&gt;A Diagram Of A Basic CSS Declaration&lt;/figcaption&gt;&lt;h2&gt;Basic CSS Styling&lt;/h2&gt;&lt;p&gt;The majority of CSS styling paradigms across the web reflects this general pattern of creating a CSS declaration, configuring various properties/values within the confines of their respective selectors. Let's continue styling the text within our example &lt;code class="inline-code"&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag with multiple property configurations within the same CSS declaration:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;/*style.css*/

h1 {
  text-decoration-line: underline;
}

p {
  color: red;
  font-size: 150%;
  font-weight: bold;
  margin-left: 16px;
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If we then render these multiple style configurations in the browser, we can easily see the adjustments made to our &lt;code class="inline-code"&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag's text.&lt;/p&gt;&lt;figure&gt;&lt;img alt="A screenshot demonstrating the styling changes to the p tag" cite="Author Screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/css_ss_02.webp" title="A screenshot demonstrating CSS basics"&gt;&lt;/figure&gt;&lt;figcaption&gt;The &amp;lt;p&amp;gt; Tag Is More Heavily Styled&lt;/figcaption&gt;&lt;p&gt;Each &lt;code class="inline-code"&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag will have this styling now applied to it. To ensure this is the case, let's adjust our HTML document to have a secondary &lt;code class="inline-code"&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag so that we can see these same stylings applied to this secondary element:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;!--hello_world.html--&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;My Hello World Example&amp;lt;/title&amp;gt;
    &amp;lt;meta charset="UTF-8" /&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1" /&amp;gt;
    &amp;lt;link href="css/style.css" rel="stylesheet" /&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;main&amp;gt;
      &amp;lt;article&amp;gt;
        &amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;
        &amp;lt;p&amp;gt;
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
        tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
        veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
        commodo consequat. Duis aute irure dolor in reprehenderit in voluptate
        velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint
        occaecat cupidatat non proident, sunt in culpa qui officia deserunt
        mollit anim id est laborum.
        &amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
        tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
        veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
        commodo consequat. Duis aute irure dolor in reprehenderit in voluptate
        velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint
        occaecat cupidatat non proident, sunt in culpa qui officia deserunt
        mollit anim id est laborum.
        &amp;lt;/p&amp;gt;
      &amp;lt;/article&amp;gt;
    &amp;lt;/main&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As one would expect, by using the CSS selector &lt;code class="inline-code"&gt;p&lt;/code&gt;, we have essentially declared that all configurations made within the CSS block (otherwise known as a "ruleset" or "rule") will be applied to all &lt;code class="inline-code"&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag HTML elements. Indeed, if we now render this newly edited HTML document in the browser, we will see that these stylings are applied to the secondary &lt;code class="inline-code"&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag's inner text as well, without having to write any additional CSS code:&lt;/p&gt;&lt;figure&gt;&lt;img alt="A screenshot demonstrating the styling changes to multiple p tags" cite="Author Screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/css_ss_03.webp" title="A screenshot demonstrating CSS basics"&gt;&lt;/figure&gt;&lt;figcaption&gt;Multiple &amp;lt;p&amp;gt; Tags Styled By One CSS Declaration&lt;/figcaption&gt;&lt;p&gt;Let's now further style our &lt;code class="inline-code"&gt;h1&lt;/code&gt; CSS declaration to further demonstrate how CSS parses the HTML document. Additionally, we'll further configure our style.css file to utilize conventions more commonly seen in web development. For one, we'll change the &lt;code class="inline-code"&gt;p&lt;/code&gt; CSS declaration to utilize color hex codes instead of the more basic color name code. This is so that a wider variety of colors are available to utilize, and because it corresponds with standards seen throughout the graphic design world.&lt;/p&gt;&lt;p&gt;We'll also change out our default fonts to show a bit of diversity to our text elements. And lastly, we'll utilize a different measurement unit instead of the &lt;code class="inline-code"&gt;px&lt;/code&gt; or "pixels" unit. We will replace it with the &lt;code class="inline-code"&gt;em&lt;/code&gt; unit as it is a better practice to use a relative unit over an absolute unit. We will go into more details regarding the use of the &lt;code class="inline-code"&gt;px&lt;/code&gt; and the &lt;code class="inline-code"&gt;em&lt;/code&gt; units shortly. For now, let's adjust some of our CSS code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;/*style.css*/

h1 {
  text-align: center;
  font-family: "Trebuchet MS", "Lucida Sans Unicode", "Lucida Grande", "Lucida Sans", Arial, sans-serif;
  text-decoration-line: underline;
  text-decoration-line: none;
}

p {
  color: #f6283d;
  font-size: 150%;
  font-family: Arial, Helvetica, sans-serif;
  font-weight: bold;
  margin-left: 1em;
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is now a bit closer to some more real world CSS configurations. Our &lt;code class="inline-code"&gt;h1&lt;/code&gt; element now has it's alignments set to center. Much like a word processor generated document, text in CSS can indeed be aligned to either the right, center, or left (the default). The font-family property has a rather extensive series of configurations. Essentially CSS will look for font-families by these name within the Client computer's font libraries (fonts located directly on the user's computer). Should the first font not be found, the second, then third, then fourth, etc. font families will be attempted, with the last font family being one that is commonly found on the majority of Client computers, which is set to the default should the others not be found.&lt;/p&gt;&lt;p&gt;Following this, the font-size for the &lt;code class="inline-code"&gt;h1&lt;/code&gt; selector is set to &lt;code class="inline-code"&gt;3em&lt;/code&gt;. The &lt;code class="inline-code"&gt;em&lt;/code&gt; unit of measurement is one of many units of measurement available in CSS for a variety of selectors. While &lt;code class="inline-code"&gt;px&lt;/code&gt; is perhaps the most commonly recognized unit of measurement to those who are familiar with Graphic Design, pixels are generally frowned upon to be utilized within styling web pages in CSS. This is not to say that there is &lt;em&gt;never&lt;/em&gt; a use case for using the &lt;code class="inline-code"&gt;px&lt;/code&gt; unit of measurement, but due to it being a "fixed" unit of measurement, it is not suitable for most modern web pages as it does not scale relative to the designated font it is being applied to.&lt;/p&gt;&lt;p&gt;The utilization of &lt;code class="inline-code"&gt;em&lt;/code&gt; units is a good segue into the subject of responsiveness within Web Design. Because modern web pages generally are meant to be viewed on devices with many different screen dimensions (commonly known as "viewports" in web development), it is imperative that elements be scaled relative to the client device's default settings for font size and other user-agent defaults. While one could, in theory, utilize &lt;code class="inline-code"&gt;px&lt;/code&gt; units to create responsive web designs, the amount of configuration necessary to do so in a way that still created a visually appealing (or at least readable) web page would be far more difficult than utilizing a relative measurement unit like &lt;code class="inline-code"&gt;em&lt;/code&gt;. This brief &lt;a aria-label="A Link to a CSS Tricks Blog Post explaining the benefits of em units over px in CSS" class="inline-link" href="https://css-tricks.com/why-ems/" rel="noopener noreferrer" role="link" target="_blank"&gt;CSS Tricks blog post&lt;/a&gt; explains the reasoning behind this in more detail.&lt;/p&gt;&lt;p&gt;Lastly, we see that the &lt;code class="inline-code"&gt;text-decoration&lt;/code&gt; property's value is written twice, this is to demonstrate a simple, but important aspect of the CSS cascade, which is that properties within a CSS selector can be overwritten anywhere in the .css document. This is accomplished simply by rewriting the &lt;code class="inline-code"&gt;text-decoration-line&lt;/code&gt; property's value at any point in the .css file &lt;em&gt;after&lt;/em&gt; the initial reference to it. To be clear, in our first declaration of &lt;code class="inline-code"&gt;text-decoration-line: underline;&lt;/code&gt;, we are overwriting the default user-agent setting of "none" for this property to "underline". In our second declaration, we then explicitly declare that the value of the &lt;code class="inline-code"&gt;text-decoration-line&lt;/code&gt; property is &lt;code class="inline-code"&gt;none&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;From a practical standpoint, this is a useless re-declaration, but I put this within the sample CSS code for demonstration purporses. Oftentimes when working in a large CSS configuration file, it is easy to forget a previously authored style, and it can sometimes come as a shock to the web developer that their styling now seems somehow off due to an overwritten property value that was designated further down in the .css file. This is due to how the CSS Cascade Algorithm determines certain properties to be adjusted (either by conditions met within the User-Agent, or by the conditions met in the Authored Stylesheet).&lt;/p&gt;&lt;p&gt;I will digress on this demonstration of a basic feature of the CSS Cascade for now. Let us return our attention to the effects of our new CSS code. If we now render our HTML page, we will see that it is now noticably different due to these slightly more significant changes:&lt;/p&gt;&lt;figure&gt;&lt;img alt="An image of the HTML document with its fonts now more heavily styled" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/css_ss_04.webp" title="A screenshot of our HTML document now more heavily styled"&gt;&lt;/figure&gt;&lt;figcaption&gt;The HTML Document Now More Heavily Styled&lt;/figcaption&gt;&lt;h2&gt;Sensible Defaults&lt;/h2&gt;&lt;p&gt;To say that the CSS styling language is vast is not only an understatement, but perhaps does a great disservice to those that have devoted the immense amount of time necessary to gain mastery over it. Additionally there are a variety of CSS frameworks that aim to increase developer productivity and improve the developer experience when working with CSS. This article aims only to give you an introduction to CSS, its basic concepts, and its syntax. That said, however, it is also my wish as the author of this article to leave you with a good starting off point from which to further research CSS and develop your skills in it.&lt;/p&gt;&lt;p&gt;To that end, below is a sample default .css file that I use when I initially start a new project. There are a multitude of these default .css files available from a wide variety of developers far more skilled and knowledgable on the subject of CSS than myself. Indeed, this configuration is essentially lifted from the Youtuber and CSS King, &lt;a aria-label="A Link to Kevin Powell's Youtube Channel" class="inline-link" href="https://www.youtube.com/@KevinPowell" rel="noopener noreferrer" role="link" target="_blank"&gt;Kevin Powell&lt;/a&gt;, who I highly encourage everyone reading this article and interested in learning more about CSS to check out. Below you will find these default css settings and a brief explanation on what these defaults do:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;/*defaults-style.css*/

*,
*::before,
*::after {
  box-sizing: border-box;
}

:root {
  color-scheme: light dark;
}

body {
  font-family: system-ui;
  font-size: 1.125rem;
  line-height: 1.5;
}

main {
  width: min(70ch, 100% - 4rem);
  margin-inline: auto;
}

img,
svg,
video {
  max-width: 100%;
  display: block;
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This .css file obviously includes some CSS selectors that we have not yet covered in this introduction. Let's start simply by breaking down this file line by line. I will forego explaining the first commented out section of this file, as I have already covered what this is earlier in this article.&lt;/p&gt;&lt;p&gt;The asterix, &lt;code class="inline-code"&gt;*&lt;/code&gt;, selector here is what is known in programming circles as a "wildcard" character. It essentially means any and all elements. Since there are no parent selectors preceding it, this wildcard is selecting &lt;em&gt;every&lt;/em&gt; element within the HTML document. Very essentially, &lt;code class="inline-code"&gt;*&lt;/code&gt; is taking every element within the HTML page and changing its uger-agent value for the box-sizing property and changing it from its default, &lt;code class="inline-code"&gt;content-box&lt;/code&gt;, to &lt;code class="inline-code"&gt;border-box&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The commas following the selectors indicate that the declaration below is to be applied to these selectors as well. In this case, we have another piece of syntax that has yet to be introduced, which is that of psuedo elements, delineated by the double colon syntax, &lt;code class="inline-code"&gt;::&lt;/code&gt;, followed in this case by the &lt;code class="inline-code"&gt;before&lt;/code&gt;, and &lt;code class="inline-code"&gt;after&lt;/code&gt; keywords. To greatly oversimplify what this indicates, these pseudo-elements are elements that don't exist as actual HTML elements within the DOM, but are still capable of being styled by CSS. Visually speaking, these elements will appear as if they are a part of the usual HTML document, but will not affect the overall flow of it. If this sounds confusing to you, do not fret, pseudo-elements are only used in specific scenarios where styling of visual elements are needed to appear before or after specific HTML elements. In this particular case we again, are applying any and all pseudo-elements to be styled to have their &lt;code class="inline-code"&gt;border-sizing&lt;/code&gt; property's value changed to &lt;code class="inline-code"&gt;border-box&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;So why change every element in the HTML document as well as all pseudo-elements to not utilize the default &lt;code class="inline-code"&gt;content-box&lt;/code&gt; value? To understand this in more depth than is presented here, please see MDN's documentation on the &lt;a aria-label="A link to MDN's documentation on the CSS Box Model" class="inline-link" href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_box_model/Introduction_to_the_CSS_box_model" rel="noopener noreferrer" role="link" target="_blank"&gt;CSS Box Model&lt;/a&gt;. In brief, however, when changing the width and height of an HTML element within CSS, the adjustments to these property values only are applicable to the content within said element (in most cases, the element's text content). Oftentimes this is not what the majority of web developers want, as they wish to change the width and height of the entire element, including any borders, margins, and padding applied to said element. This change to the &lt;code class="inline-code"&gt;border-box&lt;/code&gt; value for the &lt;code class="inline-code"&gt;box-sizing&lt;/code&gt; property value ensures that the document defaults to what is usually the expected and desired behavior.&lt;/p&gt;&lt;p&gt;Moving on, we encounter the &lt;code class="inline-code"&gt;:root&lt;/code&gt; CSS selector. It is easy to confuse the &lt;code class="inline-code"&gt;:root&lt;/code&gt; pseudo class selector with the &lt;code class="inline-code"&gt;*&lt;/code&gt; selector or the &lt;code class="inline-code"&gt;html&lt;/code&gt; selector. &lt;code class="inline-code"&gt;:root&lt;/code&gt; is utilized here to select the &lt;code class="inline-code"&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag. Note here that it is used instead of the &lt;code class="inline-code"&gt;html&lt;/code&gt; CSS selector solely because it holds higher precedence within the CSS Cascade (for all intents and purposes they are nearly identical selectors). Within the declaration block, we see that the &lt;code class="inline-code"&gt;color-scheme&lt;/code&gt; property is being set to &lt;code class="inline-code"&gt;light dark&lt;/code&gt;. This essentially tells HTML to respect the browser's preference for either light or dark theme and therefore instructs the browser's CSS parser to coerce any stylings to reflects this preference if available.&lt;/p&gt;&lt;p&gt;Next we have the &lt;code class="inline-code"&gt;body&lt;/code&gt; selector, where we see that the font-family is set to the &lt;code class="inline-code"&gt;system-ui&lt;/code&gt; value. As the value name suggests, this is simply telling the browser to initially set all text to whatever the browser's preference for the font family is.&lt;/p&gt;&lt;p&gt;Additionally the &lt;code class="inline-code"&gt;font-size&lt;/code&gt; property is set to &lt;code class="inline-code"&gt;1.125rem&lt;/code&gt;. Yet another subject not covered previously in this article, this measurement unit, &lt;code class="inline-code"&gt;rem&lt;/code&gt;, is utilized to reference the root element's default font-size. This is contrasted with the unit, &lt;code class="inline-code"&gt;em&lt;/code&gt;, which references the parent element's default font-size. Both these units have similar behaviors, but &lt;code class="inline-code"&gt;rem&lt;/code&gt; can be thought of as being a safer bet for default stylings when there are compounding font-size changes over many nested elements within an HTML document.&lt;/p&gt;&lt;p&gt;Lastly, the &lt;code class="inline-code"&gt;line-height&lt;/code&gt; property is changed to &lt;code class="inline-code"&gt;1.5&lt;/code&gt;, which simply adjusts from the default &lt;code class="inline-code"&gt;line-height&lt;/code&gt; of &lt;code class="inline-code"&gt;1&lt;/code&gt; so that the text has a bit more breathing room for each line (&lt;code class="inline-code"&gt;1&lt;/code&gt; tends to leave little space inbetween lines).&lt;/p&gt;&lt;p&gt;Moving onto the &lt;code class="inline-code"&gt;main&lt;/code&gt; selector, we find a very sane default for the width property, which utilizes the min() CSS function. We didn't cover CSS functions (and indeed, haven't covered the basics of programming functions in general), but the concepts in this case are relatively straight forward. Demarcated by comma separated values, the min() function takes two arguments, the first being the minimum value passed to the width property. In this case, each line of text within the &lt;code class="inline-code"&gt;main&lt;/code&gt; selector, will be a minimum of &lt;code class="inline-code"&gt;70ch&lt;/code&gt;, or 70 characters, long. The second argument, expressed as &lt;code class="inline-code"&gt;100% - 4rem&lt;/code&gt;, basically tells the browser that the widest any block of text within the &lt;code class="inline-code"&gt;main&lt;/code&gt; selector can be is 100% of the width of the browser window, but subtract 4rem from that to find the maximum width the content can be. The &lt;code class="inline-code"&gt;margin-inline&lt;/code&gt; property takes the &lt;code class="inline-code"&gt;auto&lt;/code&gt; value to indicate that the inline margins (side margins) should be automatically calculated. Thanks to the width property's min() function's return value, the margin surrounding this content will conform to this defined range.&lt;/p&gt;&lt;p&gt;Finally we move onto the &lt;code class="inline-code"&gt;img&lt;/code&gt;, &lt;code class="inline-code"&gt;svg&lt;/code&gt;, and &lt;code class="inline-code"&gt;video&lt;/code&gt; selectors. What these are in reference to is somewhat self explanatory, but essentially we are referencing all HTML visual elements that refer to images (i.e. &lt;code class="inline-code"&gt;&amp;lt;img&amp;gt;&lt;/code&gt;), &lt;code class="inline-code"&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; elements (otherwise known as scalable vector graphics), and also the &lt;code class="inline-code"&gt;&amp;lt;video&amp;gt;&lt;/code&gt; element (self-explanatory). The defaults changed here are subtle, essentially the width of the video is limited to being &lt;code class="inline-code"&gt;100%&lt;/code&gt; of the &lt;code class="inline-code"&gt;max-width&lt;/code&gt; property, ensuring that all images, svg elements, and videos never exceed 100% width of the browser window size (preventing content overflow), and additionally the &lt;code class="inline-code"&gt;display&lt;/code&gt; property is set to &lt;code class="inline-code"&gt;block&lt;/code&gt;, essentially starting all new images, svgs, and videos on new lines instead of visually adjacent (i.e. horizontally oriented/side by side) to other HTML elements.&lt;/p&gt;&lt;p&gt;As I initially mentioned in the opening paragraph to this section, these are just a &lt;em&gt;few&lt;/em&gt; of sane defaults that can be found throughout the internet in regards to default author stylings for css documents. I encourage you to go looking for others as there are some css default sheets that can get quite extensive. Personally, I've found this is enough for me, but you might desire to have others depending on your goals and work flow.&lt;/p&gt;&lt;h1&gt;Conclusion&lt;/h1&gt;&lt;p&gt;Hopefully this introduction to Cascading Style Sheets has proved to be of some use to you. This article just barely scratches the surface of what is possible just with HTML and CSS, let alone JavaScript. If you are inclined to do further research into CSS, I would highly recommend you to look at the official MDN documentation on &lt;a aria-label="A link to the Offical MDN documentation on CSS basics" class="inline-link" href="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics" rel="noopener noreferrer" role="link" target="_blank"&gt;CSS Basics&lt;/a&gt;, as well as the highly acclaimed &lt;a aria-label="A link to the CSS Tricks website" class="inline-link" href="https://css-tricks.com/" rel="noopener noreferrer" role="link" target="_blank"&gt;CSS Tricks website&lt;/a&gt;. These resources have proved to be immensely valuable in my endeavors when creating web pages, and I am sure they will serve you as well.&lt;/p&gt;&lt;p&gt;We have now covered The HyperText Markup Language, a skeletal scaffolding onto which we can apply Cascading Style Sheets, a beautiful mask of makeup applied to this structure. But much like Pygmalion wishing for his creation to come to life, web developers are left only with a beautiful, but still immobile, statue. Only when we apply the magic of that ubiquitous programming language, JavaScript, can our creation be given &lt;a aria-label="link to article, javascript the web's muscles" class="inline-link" href="https://brianhayes.dev/blog/javascript_the_webs_muscles.html" role="link"&gt;Muscles&lt;/a&gt;, and come to life.&lt;/p&gt;&lt;/article&gt;</description>
			<guid isPermaLink="false">https://brianhayes.dev/blog/css_the_webs_makeup</guid>
			<pubDate>Tue, 07 Nov 2023 00:00:00 +0000</pubDate>
		</item>
<item>
			<title>Espanso</title>
			<link>https://brianhayes.dev/blog/espanso</link>
			<description>&lt;article class="demo-button"&gt;&lt;h1&gt;Introduction&lt;/h1&gt;&lt;p&gt;Prior to a friend of mine mentioning espanso to me, I was unaware of such a thing as a text expander. I was familiar with the idea of expanding text, and until I adopted espanso, I was utilizing Neovim's configuration file to set custom text expansion. For example within my init.vim (which I used instead of lua at the time), I had set up a shortcut to write out "console.log()" whenever I inputted "ccl" while in insert mode.&lt;/p&gt;&lt;p&gt;I had many such shortcuts, mainly meant for use with various console calls in JavaScript, as well as some generic coding shortcuts. At one point my friend had pointed me in the direction of a new text expander written in rust known as espanso, and today it has become a regular part of my workflow. Whether it be a part of the command line, Neovim, or my browser, I utilize espanso in nearly every aspect of my workflow now, and I felt it was worthwhile to cover in detail.&lt;/p&gt;&lt;h2&gt;What Is A Text Expander?&lt;/h2&gt;&lt;p&gt;Most standard workflows by "Power Users" involve the use of keyboard shortcuts. Mainly Ctrl+C, Ctrl+V, Ctrl+A, and Ctrl+Z. If one is particularly resourceful, they are aware of various keyboard shortcuts involving the additional use of ALT and SHIFT keys, but I digress. While these shortcuts are still very useful and a necessary tool in the belt of any serious Computer user, these methods still only hold a candle to the ultra capable workflows one can achieve with a tiling window manager, a modal text editor, and an ortholinear keyboard (as well as the Vimium extension installed on the browser). Each of these subjects I have covered in detail in previous articles, and each of them continually improves upon the user's implementation of the keyboard-centric workflow. There is, however, one other tool that greatly adds to the keyboard-centric workflow, and that is the text-expander.&lt;/p&gt;&lt;p&gt;Let's say you have a series of commands or parts of a document that you repeatedly find yourself typing over and over again. Commonly known as boilerplate, these repeated pieces of text can become cumbersome and are the bane of any serious computer user, as this information is usually a formality, and has little to do with the meat of the content of the document itself. Of course, if there is a lot of text, one may find oneself simply copying and pasting the text, or making a multitude of copies via some script. Let's say there is some subtle difference between the documents though? Well using standard UNIX utilities like grep, sed, and awk can accomplish what one wants in an automated fashion. So where does that leave the text expander? With so many other tools available to the modern power user like autocomplete in the shell and text editor, as well as keyboard shortcuts like Ctrl+C/Ctrl+V in pretty much every application, what more could you need?&lt;/p&gt;&lt;p&gt;Indeed, when I first discovered that there even were applications like text expanders, I found myself wondering why they even existed when one could write aliases for your shell, and write custom shortcuts for NeoVim. After a short period of time, however, it dawned on me the power of text expanders, and that power was the ability to write quick aliases/text shortcuts that could be used in &lt;em&gt;any&lt;/em&gt; application. And when used in conjunction with shell scripts and aliases, the power of text expansion becomes even more obvious.&lt;/p&gt;&lt;h2&gt;Espanso Basics&lt;/h2&gt;&lt;p&gt;While I could go into the details of the espanso program itself, I'll simply leave &lt;a class="inline-link" href="https://espanso.org/" rel="noopener noreferrer" target="_blank"&gt;this link&lt;/a&gt; to the official website for you to peruse. There are many other text expanders out there, but espanso is open source and OS-agnostic. Additionally it is written in rust, which is known to provide fast applications when utilized by a capable programmer. It is the only text expander I have used, so I cannot speak to how it compares to others, but considering the aforementioned features, along with my own positive experiences utilizing the program, is enough reason for me to not investigate the alternatives at the time of this writing. Should you wish to install espanso and try it for yourself, please see their official &lt;a class="inline-link" href="https://espanso.org/install/" rel="noopener noreferrer" target="_blank"&gt;installation documentation&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Using espanso is very simple. For example once you have the daemon running (see the &lt;a class="inline-link" href="https://espanso.org/docs/get-started/" rel="noopener noreferrer" target="_blank"&gt;documentation&lt;/a&gt;), you can check your ip address simply by typing in any application:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[~]$ :ip&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will expand out to display your ip address! Of course, one could easily see this using command line. Prior to using espanso, I had created a bash alias to do just that (and admittedly it gives more information than espanso does by default):&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[~]$ alias ipaddr="curl ifconfig.me/all.json | jq"&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, if this was all espanso ever did, I'd say the program was trivial and this article wouldn't even exist. The power of espanso is not in its out of the box settings, but rather in its simple config file. On Linux, this configuration file can be found in:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#espanso config path
~/.config/.config/espanso/match/base.yml&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here, you will find the default text expansions under the section "match":&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#base.yml

matches:
    # simple text replacement
    - trigger: ":espanso"
      replace: "Hi there!"&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And indeed if we type out the trigger ":espanso", we'll see our text is replaced with "Hi there!":&lt;/p&gt;&lt;figure&gt;&lt;img alt="Demonstration of Basic Usage of Espanso" cite="screenshot" class="gif-image" loading="lazy" src="../assets/images/gifs/espanso_example.gif" title="Demonstration of Basic Usage of Espanso"&gt;&lt;/figure&gt;&lt;figcaption&gt;Basic usage of espanso&lt;/figcaption&gt;&lt;p&gt;There are various default examples showing espanso's utility. If you look towards the bottom of the example text expansions, you'll see the ":ip" example, which includes a very similar command to my ip alias:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#base.yml

#Returns public ip address
- trigger: ":ip"
  replace: "{{output}}"
  vars:
    - name: output
      type: shell
      params:
        cmd: "curl ifconfig.me ; echo ''"&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Writing Espanso Aliases&lt;/h2&gt;&lt;p&gt;Now, all this is well and good, but what sort of things can one accomplish with this tool? Well one of my most constantly repeated series of code that I need on the fly is "console.log()" whenever debugging a JavaScript file. While this isn't a lot of text to write, it can indeed get cumbersome to rewrite it many times over, and so one my first espanso aliases was:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#base.yml

- trigger: ";cll"
  replace: "console.log()"&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that instead of using the colon, I opted to use the semicolon for my custom espanso aliases as the likelihood of typing out anything directly after a semicolon is even less likely than after a colon (especially if using Vim in command mode). While this might seem trivial at first, if anyone has ever debugged a JavaScript file using this most basic of tools, one can see how useful this could be.&lt;/p&gt;&lt;p&gt;Within JavaScript (or any programming language), there are many times one can find themselves writing various words or series of code blocks over and over again, here a few examples of what I have written in my espanso config to occasionally speed this up:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#base.yml

- trigger: ";for
  replace: "for (;;) {}"

- trigger: ";while"
  replace: "while () {}"

- trigger: ";if"
  replace: "if () {}"

- trigger: ";elif"
  replace: "else if () {}"

- trigger: ";else"
  replace: "else {}"

- trigger: ";$"
  replace: "`${}`"

- trigger: ";do"
  replace: "do {} while{}"

- trigger: ";func"
  replace: "function () {}"

- trigger: ";=&amp;gt;"
  replace: "() =&amp;gt; {}"

- trigger: ";try"
  replace: "try {} catch(error) {}"&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Okay, so what about use outside of the terminal? Well in writing any website, any good web developer will be typing either "127.0.0.1:" or "localhost:" a lot, right? Well why not use this espanso alias instead?:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#base.yml

- trigger: ";loc"
  replace: "localhost:"&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Again, many of these seem trivial on the surface, and you might even be rolling your eyes reading this thinking "Really? You can't be bothered to type out nine characters vs four?" I'll admit time savings rarely come up to typing out only a few less characters, but one of the powers of Vim is its ability to accomplish more with less keystrokes, and when used in its entirety, I'd argue that no one using the classic keybindings available in the majority of non-modal text editors can accomplish the same speed of workflow as those who use some form of modal text editing. Espanso moves these cumulative time savings into any application where typing is a part of its interface!&lt;/p&gt;&lt;p&gt;Let's move onto another use for espanso. I'm a big fan of using DuckDuckgo's bangs. If you're unaware of bangs, check out the &lt;a class="inline-link" href="https://duckduckgo.com/bangs" rel="noopener noreferrer" target="_blank"&gt;website&lt;/a&gt;. Essentially, if one has DuckDuckgo as their default search engine (or searx, which has this feature too), one can simply enter into your search/url bar: !yt and any other words typed after that will be directly searched in YouTube. There are a multitude of these bangs available and I'd encourage you to take a look at what is available. There are, however, a few websites that DuckDuckgo hasn't integrated into bangs, so what to do? While I'm sure there are other ways to accomplish this, I have utilized espanso to do this for certain sites, like Odysee, a Youtube alternative:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#base.yml

- trigger: "!ody"
  replace: "https://odysee.com/$/search?q="&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note my decision to use the exclamation point instead of the semicolon here, in order to keep with the consistencies of DuckDuckgo's bang syntax. When I type "!ody" into my url, this immediately expands to "https://odysee.com/$/search?q=" and I can now type in my search query. This is even more efficient on the utilized network than DuckDuckgo's bangs as it never even queries DuckDuckgo before re-routing to the requested page. I also use this same technique for other sites, like Quetre, a non-Javascript front-end for Quora:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#base.yml

- trigger: "!que"
  replace: "https://qr.vern.cc/search?q="&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;An Interesting Use Case&lt;/h2&gt;&lt;p&gt;Now, any other power user of Linux and Vim would note, "yeah, but I can easily accomplish alot of these same things in the shell or vim itself, I don't need a daemon listening in the background taking up (a little bit) of RAM for this." Which is a fair point, but I'd argue that what one can accomplish with espanso integrated into your workflow with the shell, vim, and the browser, is just a little more streamlined than without. Now, this last and final example on the uses of the espanso text expander will involve use of the shell, a shell script, and NeoVim. I am positive there are other ways of accomplishing what I have done here, but nevertheless I am happy with the result as it stands right now.&lt;/p&gt;&lt;p&gt;For a while, I had been writing and rewriting a simple shell script that would save my current working directory. Additionally the script would take an optional argument of a file which would be utilized by a separate script or alias that would return me immediately to the saved directory and open the specified file when invoked. So, for example, if I wanted to save my current directory with a file I was working on, I could call the script like so:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[~]$ sdir myfile.txt&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The script very simply saves an environment variable called $sdir, and an optional environment variable for the file called $sdoc into a dotfile. A corresponding alias, "rdir" could then return to said directory like so:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[~]$ rdir&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Originally, rdir was a shell script that looked for the existence of the $sdoc, and if it existed, would call nvim on it, and if it didn't, would simply navigate to the saved directory $sdir. This worked for some time, but I wanted to be able to save a different directory to this dotfile and seamlessly return to it, and the built-in command "cd", doesn't work in shell scripts. I thought "No problem, cd works in an alias, I'll just source the file in the alias and then use cd to move into that new directory." Only to find out that source didn't work inside an alias...&lt;/p&gt;&lt;p&gt;Like I said, there are probably other, less hacked together, ways to accomplish my goal here. Nevertheless, it dawned on me that I could remove my rdir script and forego using an alias by simply combining the sdir shell script with an espanso alias like so:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#base.yml

- trigger: ";rr"
  replace: "source ~/.config/.sdrc &amp;amp;&amp;amp; cd $sdir &amp;amp;&amp;amp; nvim $sdoc"

- trigger: ";rd"
  replace: "source ~/.config/.sdrc &amp;amp;&amp;amp; cd $sdir &amp;amp;&amp;amp; ls"&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Although the above commands solved my issues with both cd and source in the shell, typing this entire command out each time I wanted to start working again would have been cumbersome. Using the espanso text-expander daemon takes care of that for me! This solution is definitely not as elegant as some might like, but it serves my simple purposes (save my current directory and a desired file so I can easily navigate back to it, and also easily save a different directory and file at any time).&lt;/p&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Admittedly, there are probably many other use cases for espanso I have not explored in this article. If one looks over the documentation in more detail, one will find a myriad of other useful tips more in-depth than the ones I have presented here, so please take the time to check out their great &lt;a class="inline-link" href="https://espanso.org/" rel="noopener noreferrer" target="_blank"&gt;documentation&lt;/a&gt;. Now that I utilize espanso, I can't really imagine working without it. It's like the last puzzle piece to my keyboard-centric work flow was filled in when I discovered this amazing tool.&lt;/p&gt;&lt;p&gt;To cap things off, I'll share with you the simple sdir shell script below (as well as this &lt;a class="inline-link" href="https://raw.githubusercontent.com/tomit4/notes/main/scripts/sdir" rel="noopener noreferrer" target="_blank"&gt;link on my GitHub&lt;/a&gt;). Additionally, I'll provide you with some lines of Lua code that when put into your &lt;a class="inline-link" href="https://github.com/tomit4/notes/tree/main/.config/nvim" rel="noopener noreferrer" target="_blank"&gt;NeoVim configuration files&lt;/a&gt;, will return you to wherever you last saved in your files (this works incredibly well with the aforementioned sdir script and espanso aliases, as I simply return to the exact directory, file, and place in that file I left off on simply by typing ";rr" into the command line). Enjoy, and please do check out espanso, it's a great project!&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env bash 
# sdir.sh
# used with espanso ;rr and ;rd command
# A simple bookmarking script used in conjunction with rdir
# to save a directory for easy navigation later

# save our current working directory
sdir=$(pwd)$#10sdoc="${1:-''}"
# allow overwriting of sdrc
set +o noclobber
# define and create .sdrc file
sdrc="$HOME/.config/sdir".sdrc
if [[ ! -f "$sdrc" ]]; then
    /usr/bin/touch "$sdrc"
fi

if [[ $# -gt 0 ]]; then
    sdoc="$1"
else
    sdoc=""
fi

echo 'export sdir='"$sdir" &amp;gt; "$sdrc"'
echo 'export sdoc='"$sdoc" &amp;gt;&amp;gt; "$sdrc"'&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;pre&gt;&lt;code&gt;-- init.lua
-- jump to last place visited in file
vim.api.nvim_create_autocmd('BufReadPost', {
  callback = function()
    local mark = vim.api.nvim_buf_get_mark(0, '"')
    local lcount = vim.api.nvim_buf_line_count(0)
    if mark[1] &amp;gt; 0 and mark[1] &amp;amp;lt= lcount then
      pcall(vim.api.nvim_win_set_cursor, 0, mark)
    end
  end,
})&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;/article&gt;</description>
			<guid isPermaLink="false">https://brianhayes.dev/blog/git_basics.html</guid>
			<pubDate>Wed, 11 Jan 2023 00:00:00 +0000</pubDate>
		</item>
<item>
			<title>Git Basics</title>
			<link>https://brianhayes.dev/blog/git_basics</link>
			<description>&lt;article class="demo-button"&gt;&lt;h1&gt;Introduction&lt;/h1&gt;&lt;p&gt;Whether working in data science, software/web development, or even if one is just a modern power user of computers in general, one is probably at least somewhat familiar with the Git version control system, or at least with the now infamous hosting service, Github.&lt;/p&gt;&lt;p&gt;As a beginning software/web developer, I often find myself overwhelmed by the sheer vastness of the amount of tools available, and the intrinsically complicated ecosystem in which modern software development takes place. There are few pieces of software on which there is a ubiquitous standard in place like there is with Git. In this article, I will attempt to introduce the Git version control system and its most basic features. The intended audience of this article is a complete beginner to Git. Thusly, this article will not cover some of Git's more in-depth features, but please take a look at the provided links for more documentation at the end.&lt;/p&gt;&lt;h2&gt;A Brief History of Git&lt;/h2&gt;&lt;p&gt;In looking over my previous article covering &lt;a aria-label="link" class="inline-link" href="https://brianhayes.dev/blog/why_use_linux.html" role="link"&gt;Why Use Linux&lt;/a&gt;, I now realize I never referenced the history of Linux and its creator, Linus Torvalds. This was probably due to the extensive history of Linux, and I didn't wish for that article to turn into more of a history lesson than a beginner's installation tutorial. While it is not my intention to do so with this article either, I feel that Git's history is far more easy to cover, as it is a more recently developed piece of software and has a far shorter timeline to cover.&lt;/p&gt;&lt;p&gt;Git was originally developed by Linus Torvalds in 2005. Torvalds, as I mentioned earlier, is the creator and current maintainer of the Linux Kernel. Linux in its initial days of distribution, was passed around by software enthusiasts using floppy disks and later on CD-ROMs. Updates to the Linux Kernel in the early days were distributed via email mailing lists. The emails included files known as "patches", which provided the differing lines of code which were either added, removed, or altered from the pre-existing code base. While some form of version control had been a part of software development since the early 1960s, concurrent version systems would become the standard for decades starting in 1975, which would later be overtaken by Apache's Subversion system, and finally in the late 1990s, distributed revision control systems would come to dominate the preferred versioning control system by the majority of software developers.&lt;/p&gt;&lt;p&gt;BitKeeper was the first of these distributed version control systems, and was a boon to the Linux Kernel development team, who adopted a beta version of Bitkeeper in 1999. There was some controversy surrounding the use of BitKeeper, which at the time was a piece of proprietary software, and many within the Linux community felt that this was in conflict with the principles under which Linux was founded. In April of 2005, BitMover (owner of BitKeeper) announced that it would stop providing a free version of their software to the community. Linus Torvalds then decided to take a couple of weeks off from development on the Linux Kernel to create a new distributed version control system which he later called "Git", named after the British slang for a "stupid person."&lt;/p&gt;&lt;p&gt;Although originally not intended to be a full-blown version control system, Git eventually became more than just a simple handful of scripts, and is now utilized by the majority of software developers today.&lt;/p&gt;&lt;h2&gt;What Is Version Control?&lt;/h2&gt;&lt;p&gt;To those uninitiated into the ecosystem of modern software development, version control is pretty much what it sounds like. You have a piece of software you have written, and you have posted it up online for all to enjoy (because you released it under an open source license, right?). Eventually someone uses it and discovers a bug, or has a feature request, or simply wants to take your project and make their own version of it, but how do you do this quickly and easily?&lt;/p&gt;&lt;p&gt;As I covered in the introduction, in the early days there wasn't a very easy way to do this. You emailed a patch file to an email mailing list, and everyone who utilized your software had to be subscribed to that mailing list and manually patch the files themselves (oftentimes this process was partially automated via makefiles or bash scripts). Thank goodness today we have distributed version control systems like Git that largely make this process incredibly easy by comparison.&lt;/p&gt;&lt;h2&gt;Why Version Control is So Important&lt;/h2&gt;&lt;p&gt;Let's make our example scenario from before more simple for the sake of explanation. Let's say you write some basic JavaScript code like so:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;// hello.js 

console.log("hello world!");&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You save it to your local machine in a file called 'hello.js'. Eventually you realize the triviality of such a program, and want to extend out its functionality. For the sake of brevity, I'll not write out more code, but let's say you write a series of functions and the total lines of code (LOC) goes from being 1 to 40 lines. You intelligently save your work and also decide to back it up on an external hard drive, and even have a friend back up the current version of your software on their server at their house. Great!&lt;/p&gt;&lt;p&gt;But the ideas keep coming, you keep on coding and adding features, occasionally refactoring the code to be less verbose and more succinct. You're becoming a better developer and the program is starting to look good. Eventually you decide to integrate a large new feature and start to write out a substantial amount of code. Once completed, you save your progress, back it up on your external hard drive as well as at your friend's server. Satisfied with the new feature, you decide to call it a night, and hit the hay.&lt;/p&gt;&lt;p&gt;In the morning you return to your project only to find that this new feature has broken a different part of your program. You accidentally didn't compartmentalize the features, resulting in spaghetti code. It'll take you two days to remove all the code you wrote yesterday, and the chance of introducing a bug during this refactor is high. If only you could just roll back time and go back...to a previous version.&lt;/p&gt;&lt;p&gt;This simple example is but one of the many reasons why version control is so important to software development, and doesn't even include the benefits when working with multiple developers on a single project. So how would this scenario play out had you used Git? Let's take a look on how to do that in the next section.&lt;/p&gt;&lt;h2&gt;Getting Started On Github&lt;/h2&gt;&lt;p&gt;Again, we write out our basic example code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;// hello.js

console.log("hello world!");&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We save our file, 'hello.js,', but this time we decide to use Git to save our progress on Github. I won't be covering how to set up a Github account, but here is &lt;a class="inline-link" href="https://docs.github.com/en/get-started/signing-up-for-github/signing-up-for-a-new-github-account" rel="noopener noreferrer" target="_blank"&gt;a tutorial on how to do so&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Once you've established a Github account, log into Github, click on the "New" button in the top left-hand corner. Set up a project name called "my_awesome_js_project" and give it a brief description before hitting the "Create Repository" button at the bottom.&lt;/p&gt;&lt;p&gt;After this, you will be presented with a project screen that is a visual representation of your project. This initial screen is pretty bare bones, but provides you with a helpful series of commands to enter into your terminal to start using Git to version control your project.&lt;/p&gt;&lt;figure&gt;&lt;img alt="Initial Github Repository Page" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/ss_github_01.webp" title="Initial Github Repository Page"&gt;&lt;/figure&gt;&lt;figcaption&gt;The Initial Github Repository&lt;/figcaption&gt;&lt;p&gt;While you could technically start creating files and pushing them to Github using their GUI interface here in the browser, that was never the intended way of working with Git, which is a command line tool.&lt;/p&gt;&lt;p&gt;So, returning to our initial example, we have a 'hello.js' file, in a project directory under the same name as our project name from before, "my_awesome_js_project". Let's initialize a Git repository inside of this directory by typing into the terminal:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[ ~]$ git init&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Great, you should receive a brief message that covers the initialization of your project. If you look around using the "ls" command, however, you'll find that there aren't any new files...or are there? If you then try the "ls" command with the "-a" flag, you'll see that we now have a hidden ".git" directory. You shouldn't need to access this directory as a beginner, but it's good to know it's there in case you do need to make some direct modifications to your Git configuration.&lt;/p&gt;&lt;p&gt;Continuing on, let's add some basic files to our repository. While we do have our "hello.js" file, it's always a good practice to have a README.md file in our repository. Github will present this README to anyone who navigates to your project via Github, and it's generally a good idea to provide some basic documentation about our project to those who take a look at it. Let's create a very basic README.md via the command line per the suggestion on Github like so:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[ ~]$ echo "# my_awesome_js_project" &amp;gt;&amp;gt; README.md&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will create a simple header in a README.md file, which you should now see in your "my_awesome_js_project" directory alongside your "hello.js" file. Now let's use Git to add these files to the repository.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[ ~]$ git add README.md hello.js&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, we're going to "commit" these files to our repository. You can think of this as a kind of "staging" of our files.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[ ~]$ git commit -m "first commit"&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Technically at this point, the next suggested command is optional, but it is very good practice to change branches. A brief explanation of what branches are is necessary to the uninitiated here. One of the most powerful aspects of Git and other versioning systems is its ability to keep track of multiple "branches" of your project. Much as the name implies, you can think of branches as divergences along a tree of versions of your project. Remember in our initial example that you added an extensive feature that once written broke the rest of the program? Well that is a good example of when a separate branch would have been helpful, as once you were done working on that branch of the project, it would not have been part of the "main" or "master" branch of the project. You can think of the "main" branch as being the trunk of a tree, the major body of representation of your project. When adding a new feature, fixing a bug, or doing any sort of work where you don't wish to change the current code base, it's always a good idea to start a new branch.&lt;/p&gt;&lt;p&gt;Whenever a new git repository is initialized, it defaults to a branch known as "master". This branch, in practice, should never be touched except by the project maintainer, who will "merge" the project branches first into a development branch commonly known as "main." Upon completion of certain versions, the project maintainer will merge these changes into the "master" branch. This is why Github's documentation instructs us to create a main branch like so:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[ ~]$ git branch -M main&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, we'll configure Git to send our changes to our Github repository using the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[ ~]$ git remote add origin https://github.com/'your_name'/my_awesome_js_project.git&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This saves your remote Github repository in the .git directory's config file allowing you to quickly send your changes to Github. Let's send it off to Github now:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[ ~]$ git push -u origin main&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You'll be asked to enter your login credentials. Github no longer uses passwords and instead requires use of either a Personal Access Token(PAT) or an SSH key to make changes to your repository. The set up for these are well documented, but can be somewhat intimidating for a new user. While I recommend setting up an &lt;a class="inline-link" href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account" rel="noopener noreferrer" target="_blank"&gt;SSH key&lt;/a&gt;, you can also set up a &lt;a class="inline-link" href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token" rel="noopener noreferrer" target="_blank"&gt;PAT&lt;/a&gt; for this purpose as well.&lt;/p&gt;&lt;p&gt;Once you've entered your credentials, a short message letting you know of your successful push to your repository will display in your terminal emulator. Refresh the repository page on Github and you'll see that your project is now up and running.&lt;/p&gt;&lt;figure&gt;&lt;img alt="Initial Repository Instantiation Page" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/ss_github_02.webp" title="Initial Repository Instantiation Page"&gt;&lt;/figure&gt;&lt;figcaption&gt;The New Repository Page&lt;/figcaption&gt;&lt;h2&gt;Basic Git Usage&lt;/h2&gt;&lt;p&gt;Excellent, you have successfully instantiated your first Github repository. Now, on the surface, this can appear just like a glorified backup system, and while Git can be used for backups, the main feature of using Git is for version control. Let's add some code to our "hello.js" file to demonstrate. Open up the "hello.js" file in your favorite text editor and add the following line after our initial console.log call:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;// hello.js 

console.log("hello world!");
console.log("this is my second line of code to commit");&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Any good piece of version control software will immediately recognize this change to your code. You can confirm this by running a status check via Git:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[ ~]$ git status&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Upon entering this command, Git will now provide you with a brief summary of the changes to your project. In this case we have "modified hello.js". We have yet to have added our changed files, committed our changes with a brief message about what we did, and pushed our changes up to our repository, so let's do all of that now:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[ ~]$ git add hello.js&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that we are only adding the files we've changed. We never touched the README.md and thusly do not have to add that to our commit. Next let's write a helpful commit message:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[ ~]$ git commit -m "Added a second line as an example"&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here, I'd like to provide a brief word on best practices regarding commit messages. A good commit message should be a short, concise pieces of documentation that informs others working on the project (or just your future self) of what changes were made. These messages should be descriptive enough to cover a specific change that was made, without being overly verbose (less than 50 characters is a good rule of thumb when writing commit messages).&lt;/p&gt;&lt;p&gt;Finally, let's push our changes up to Github:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[ ~]$ git push&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that you no longer have to provide the remote name, nor the branch name here. Github will once again prompt you for your credentials (either SSH key or PAT). Once entered, you will get a confirmation message in your terminal emulator, and can visit your Github repository to see the changes online:&lt;/p&gt;&lt;figure&gt;&lt;img alt="Github repository now shows updated changes" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/ss_github_03.webp" title="Github repository now shows updated changes"&gt;&lt;/figure&gt;&lt;figcaption&gt;The Github Repository Is Now Updated&lt;/figcaption&gt;&lt;p&gt;As you can see, our update is reflected next to our hello.js file on our repository page. At this point, you will have a very basic understanding about how to use Git. Now I'll cover some other useful aspects.&lt;/p&gt;&lt;h2&gt;Git Log And Reverting Back&lt;/h2&gt;&lt;p&gt;You can see changes pushed to your Git repository locally by invoking Git's builtin log:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[ ~]$ git log&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Invoking git log will show you the history of the project for every commit you make. This output is useful should you wish to revert back to one of your previous commits, or simply wish to review the history of a project. Since you only currently have two commits, let's cover how to simply revert back by one commit using the information presented here at git log.&lt;/p&gt;&lt;p&gt;Next to each commit you'll see a long series of letters and numbers. This is a unique identifier for that particular commit. Copy this unique identifier for your initial commit using your mouse to highlight the identifier, and invoking "CTRL + SHIFT + C". This will save the identifier to your clipboard.&lt;/p&gt;&lt;p&gt;Now enter into the command line:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[ ~]$ git reset --hard 'unique-identifier-goes-here'&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Keep in mind that this will only change your local repository, and nothing will have changed on your remote over at Github. If you wish to revert the remoterepository as well, you can do so by using git push with the -f or --force option:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[ ~]$ git push --force&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Keep in mind that using --force is considered to be somewhat overbearing, and you should always heavily consider the ramifications of using this option on a collaborative project, as you can accidentally overwrite another contributor's code. This is why when working on non-trivial projects it is always a good idea to &lt;a class="inline-link" href="https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging" rel="noopener noreferrer" target="_blank"&gt;create a different branch&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Whatever your preferences regarding text editors, desktop environments, or operating systems, using Git as a version control system is an essential skill for the modern day software developer. Even though there are other version control systems out there, Git has become ubiquitous with version control. It is essential that if you are just starting out with software development that you become familiar with Git and its many features, as they will inevitably become a part of your daily workflow.&lt;/p&gt;&lt;p&gt;As an aside, there are far more features of Git than what is covered here in this article, so please see the &lt;a class="inline-link" href="https://git-scm.com/doc" rel="noopener noreferrer" target="_blank"&gt;official documentation&lt;/a&gt; for more information. Additionally, there are many pieces of software that make working with Git less cumbersome than what is available at the standard command line. Some of these projects include &lt;a class="inline-link" href="https://github.com/jesseduffield/lazygit" rel="noopener noreferrer" target="_blank"&gt;lazygit&lt;/a&gt;, &lt;a class="inline-link" href="https://github.com/cli/cli" rel="noopener noreferrer" target="_blank"&gt;Github's offical CLI tool&lt;/a&gt;, and for those of you who use Vim, there is &lt;a class="inline-link" href="https://github.com/tpope/vim-fugitive" rel="noopener noreferrer" target="_blank"&gt;Vim-Fugitive&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I would be remiss not to mention my own CLI tool that I wrote in bash, called &lt;a class="inline-link" href="https://github.com/tomit4/bgit" rel="noopener noreferrer" target="_blank"&gt;bgit&lt;/a&gt;. While not nearly as fully featured as the aforementioned software, it is a very basic wrapper around Git that automates away some of the commands covered in this article. I wrote this script as a way to teach myself a little more about Git and bash, and it is certainly not without its flaws, but take a look if you're interested.&lt;/p&gt;&lt;p&gt;Lastly, I'll encourage you to first become familiar with the basics of Git before going to one of these other pieces of software, as understanding how Git works from the ground up is essential before moving on to utilizing these other tools. I wish you well in your journey towards better software development and I hope I have helped you understand a little bit more about this essential piece of software.&lt;/p&gt;&lt;/article&gt;</description>
			<guid isPermaLink="false">https://brianhayes.dev/blog/the_readme.html</guid>
			<pubDate>Wed, 11 Jan 2023 00:00:00 +0000</pubDate>
		</item>
<item>
			<title>HTML</title>
			<link>https://brianhayes.dev/blog/html_the_webs_skeleton</link>
			<description>&lt;article class="demo-button"&gt;&lt;h1&gt;Introduction&lt;/h1&gt;&lt;p&gt;Web Development is the production of applications and documents that live primarily on the web, mainly interacted with via the web browser. The predominant tools involved are HTML (HyperText Markup Language), CSS (Cascading Style Sheets), and JavaScript (also known as ECMAScript). While there are often other tools involved depending on the specific needs and complexities of each application/web page, the common theme is that these three tools are the foundation on which nearly all user facing web pages are built on. Over the course of this and the next two articles, I will do my best to give a general overview and introduction to each of these tools, starting with HTML.&lt;/p&gt;&lt;h2&gt;How I Got Started&lt;/h2&gt;&lt;p&gt;I know that when I first started to learn the basics of Web Development only a short two and a half years ago, I found learning HTML to be the most boring aspect. Aside from some short tutorials around making basic websites on youtube, I had actually already begun programming a basic todo list using NodeJS. This application's end result was a CLI interface, meaning that there was no interaction with the browser, and rather, utilized NodeJS's REPL to create, read, and update a basic todo list via the terminal.&lt;/p&gt;&lt;p&gt;Rather than starting off with trying to create a visually appealing website, my mentor (who had assigned me this as my first programming project) instead had me start my programming journey writing a todo list without any "Front End" to speak of. I actually thought I never committed this very first project to Github, but in reviewing material for this blog post, it became apparent that indeed &lt;a aria-label="link-to-first-coding-project" class="inline-link" href="https://github.com/tomit4/to-do-list" rel="noopener noreferrer" role="link" target="_blank"&gt;I had&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Most self taught developers first learning to code would not be instructed to create a CLI todo list as their first coding project, but my mentor was never one to shy away from difficult projects and still to this day knows exactly how far into the deep end to throw me (just enough to make me feel uncomfortable, but not enough to feel overwhelmed). Please note that this first project is fraught with poor decisions and is not a good reference on how to create a todo app. Outside of tutorials that essentially held my hand through the process (i.e. &lt;a aria-label="link-to-free-code-camp" class="inline-link" href="https://www.freecodecamp.org/" rel="noopener noreferrer" role="link" target="_blank"&gt;Free Code Camp&lt;/a&gt;), I had not really thought much on HTML, let alone CSS. Instead server side JavaScript was my initial introduction, and I had never played much in what is commonly known as "The Front End".&lt;/p&gt;&lt;h2&gt;The Front End Vs The Back End&lt;/h2&gt;&lt;p&gt;When reading about the "Front End" in regards to web development, many make the correlative analogy to a restaurant when trying to explain how a basic web application works. This is an over simplification, but is nevertheless useful as an explanation for beginners, and it goes something like this:&lt;/p&gt;&lt;p&gt;From your desktop computer, laptop computer, tablet, and/or mobile device, when you interact with any application that requires access to the internet; generally speaking this means that that device is interacting with another computer over a series of wires, wifi, or bluetooth. Your device, commonly referred to as a "Client" under these circumstances, makes a "request" (specifically what is known as a "GET request") for data from another computer somewhere else in the world. This other computer, commonly known as a "Server", receives the request, processes it, and if it has the desired data, will generally provide that data back over the internet to the "Client".&lt;/p&gt;&lt;p&gt;Given this simple explanation, hopefully one can see how this is like a waiter at a restaurant. You, the client, head into the restaurant (log onto the internet), and browse the menu ("The Front End", i.e. use the web browser via the url bar or search engine). You eventually see a meal (data) that you wish to eat (have access to). You make a request to the waiter (your internet service provider) for which item of food (data) you wish to eat (have access to). The waiter (your internet service provider) then proceeds (transmits the request over the internet) to the kitchen ("The Back End"). The waiter then relays your request to the kitchen staff (the server), who then proceed to prepare your dish utilizing ingredients (data) and a recipe (business logic). Once prepared, the waiter (your internet service provider), then returns with your meal (your requested data), which you then proceed to consume (either by reading an article, looking at pictures, taking care of work related business, etc.).&lt;/p&gt;&lt;figure&gt;&lt;img alt="A Diagram of A Basic Client Server HTTP Request/Response" cite="https://commons.wikimedia.org/wiki/File:Client_Sever.png" class="img-image" loading="lazy" src="../assets/images/img/client_server.png" title="A Diagram of A Basic Client Server HTTP Request/Response"&gt;&lt;/figure&gt;&lt;figcaption&gt;A Diagram Of A Basic HTTP Request&lt;/figcaption&gt;&lt;p&gt;This relationship between a Client and a Server is an essential piece of knowledge that you will undoubtedly revisit many times over the course of your learning journey/career. Indeed this abstraction is not only the domain of the web, but is useful when thinking about processes that take place even within the confines of the hardware on your devices. I will, for the sake of simplicity, digress on this point in the interest of moving onto our main topic, HTML.&lt;/p&gt;&lt;h2&gt;The HyperText Markup Language&lt;/h2&gt;&lt;p&gt;The HyperText Markup Language, colloquially known as "HTML", has a &lt;a aria-label="link to wikipedia history of html" class="inline-link" href="https://en.wikipedia.org/wiki/Html#History" rel="noopener noreferrer" role="link" target="_blank"&gt;long history&lt;/a&gt; dating back to the early days of the internet in the 1980s. Please take note that HTML is not a &lt;a aria-label="wikipedia page on programming language" class="inline-link" href="https://en.wikipedia.org/wiki/Programming_language" rel="noopener noreferrer" role="link" target="_blank"&gt;Programming Language&lt;/a&gt;, but rather is a &lt;a aria-label="wikipedia page on markup language" class="inline-link" href="https://en.wikipedia.org/wiki/Markup_language" rel="noopener noreferrer" role="link" target="_blank"&gt;Markup Language&lt;/a&gt;, which utilizes a series of recognized textual patterns and/or symbols within a text document to control the structure and formatting of said document. This establishes a recognizable relationship of various visual elements (text, images, videos, etc.) within the document, commonly known as a "Page", and more specific to HTML, a "Web Page".&lt;/p&gt;&lt;p&gt;These elements create a structure which the Web Browser (Chrome, Firefox, Edge, Safari, etc.) can parse through and format appropriately. HTML by itself can generate very basic documents and presentations on the web, but usually needs CSS (Cascading Style Sheets) to color and stylelize the elements, and oftentimes the JavaScript programming language is utilized to create interactivity with these elements. The following two articles will give you a basic introduction to CSS and JS (JavaScript), but it is important to note that without understanding the basics of HTML, one will not get far when researching CSS and JS, as both CSS and JS are meant to work with HTML as a part of a "stack" of programming tools to create a fully functioning web page.&lt;/p&gt;&lt;h2&gt;Diving In, HTML Basics&lt;/h2&gt;&lt;p&gt;To hammer home the fact that the Web Browser will attempt to interpret whatever textual document you give it into an HTML page. Let's start by writing up a simple txt file and seeing what happens when we open it in the browser. In previous articles, I have written about how working from the &lt;a aria-label="link to command line article" class="inline-link" href="https://brianhayes.dev/blog/command_line.html" role="link"&gt;Command Line&lt;/a&gt; is a worthy pursuit of your time to learn. Thusly, while you can indeed make directories, and create files from a traditional file manager, in the following tutorials we will be using the command line and a basic shell (bash or zsh will be fine), to demonstrate.&lt;/p&gt;&lt;p&gt;Within your terminal make a new directory called "my_webpage" and navigate into it:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[ ~]$ mkdir my_webpage &amp;amp;&amp;amp; cd my_webpage&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;From here you'll want to create a simple .txt file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[ my_webpage]$ touch hello_world.txt&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using your favorite code editor open this up, most will probably use VSCode so:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[ my_webpage]$ code hello_world.txt&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Simply type in a basic "Hello World!" example:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#hello_world.txt
Hello World!&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Exit your text editor and now open your new file using your favorite browser:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[ my_webpage]$ firefox hello_world.txt&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you will soon see, the txt file has been rendered, displaying an extremely basic printing of your text in the browser:&lt;/p&gt;&lt;figure&gt;&lt;img alt="a screenshot of a simple txt file rendered in the firefox browser" cite="screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/html_ss_01.webp" title="a screenshot of a simple txt file rendered in the firefox browser"&gt;&lt;/figure&gt;&lt;figcaption&gt;Simply Calling The Firefox Browser With The File Name As an Argument Renders A .txt File In The Browser&lt;/figcaption&gt;&lt;p&gt;Now on its own, this is rather underwhelming. The text is small and while possible, the browser is doing some work to parse out exactly what we're trying to have it render. Let's learn our first HTML tag, the &lt;code class="inline-code"&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag:&lt;/p&gt;&lt;h2&gt;HTML Tags&lt;/h2&gt;&lt;p&gt;The general demarcation characters utilized primarily in HTML are the "lesser than", "&amp;lt;", and the "greater than", "&amp;gt;", characters. These characters are used to enclose an html element. After writing this "opening tag", we then input whatever text we wish to be encapsulated within said tag and provide a "closing tag". The closing tag is quite similar to the opening tag, except a forward slash character, "/" is used to demarcate that this is meant to be the end of the HTML element. A simple example would be to enclose a h1, (a primary heading tag) inside of the "&amp;lt;" and the "&amp;gt;". Let's rename our "hello_world.txt" to "hello_world.html" using the "mv" command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[ my_webpage]$ mv hello_world.txt hello_world.html&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will rename our hello_world file to the appropriate extension, and furthermore, will enable better syntax highlighting in our editor. Giving our file the ".html" extension will also make it clear to ourselves (as well as others) what kind of file this is. Now within our hello_world.html file, let's enclose our text, "Hello World!", in html h1 tags like so:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;!--hello_world.html--&amp;gt;

&amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If we now open up this file in our browser, we'll notice that the formatting of our text is resized to reflect this new assignment of the text as a heading:&lt;/p&gt;&lt;figure&gt;&lt;img alt="a screenshot an html file with an h1 rendering the text 'hello world' in firefox" cite="screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/html_ss_02.webp" title="a screenshot an html file with an h1 rendering the text 'hello world' in firefox"&gt;&lt;/figure&gt;&lt;figcaption&gt;The h1 HTML Tag Renders A Header In The Browser&lt;/figcaption&gt;&lt;p&gt;HTML Tags, also called HTML Elements, are utilized by the browser to interpret how the developer wishes to organize the text, images, videos, and other forms of media in the HTML document. Additionally, HTML tags can be referenced directly within CSS and JavaScript files for further styling and programming interactivity with those elements. These elements can be standalone entities, or can contain other HTML elements within them. These are often referred to as "child," or "nested" HTML elements.&lt;/p&gt;&lt;h2&gt;Nested HTML&lt;/h2&gt;&lt;p&gt;Very much like a document written in a word processor (be it an essay, formal letter, or some other textual presentation), an HTML document follows certain protocols and best practices. Unlike more user facing textual documents written in a word processor, however, HTML documents are not only meant to be read by humans, but also parsed and interpretted by the Web Browser. By appropriately demarcating our HTML tags with the "&amp;lt;" and "&amp;gt;" symbols mentioned earlier, we are taking our first steps towards understanding this paradigm under which the Web Browser parses through an HTML document. These symbols essentially tell the Browser "this is an h1 tag, please make it bold and increase the font size." (This is an oversimplification, but will is a satisfactory explanation for the purposes of introduction to the topic). Let's now move onto the next tag on the agenda, the paragraph tag:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;!--hello_world.html--&amp;gt;

&amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;This is some text meant to be part of a paragraph.&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this simple example, we are presented with a heading tag, specifically an &lt;code class="inline-code"&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag, the "Hello World!" text acting as the heading, and then a "paragraph" or &lt;code class="inline-code"&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag following it, with some rather overt text explaining that the text enclosed within it is a paragraph. If we now open up the file in the browser as before, we will see this simple example displayed:&lt;/p&gt;&lt;figure&gt;&lt;img alt="A screenshot of the terminal rendering an html page with both an h1 and p tag example" cite="screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/html_ss_03.webp" title="A screenshot of the terminal rendering an html page with both an h1 and p tag example"&gt;&lt;/figure&gt;&lt;figcaption&gt;A simple example of "sibling" html elements.&lt;/figcaption&gt;&lt;p&gt;As the caption of the above image suggests, the &lt;code class="inline-code"&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; and &lt;code class="inline-code"&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags are considered "sibling" elements. This naming convention after members of a family is not a coincidence, and comes into play in both CSS and JavaScript (which utilizes the naming convention outright when referencing elements). Indeed, this convention is a good segue into the topic of the Document Object Model, abbreviated as the DOM. The topic of the DOM is of particular significance to Front End Development and is discussed further below, but before covering that topic, let us cover the very basics of nested HTML elements.&lt;/p&gt;&lt;p&gt;This next code snippet I will provide may indeed overwhelm those who are particularly new to the subject of Web Development and HTML, as it is much more extensive than the previous examples. Regardless, at some point or another it is important for anyone interested in learning Web Development to become familiar with the generic structure one finds in many HTML documents throughout the Web. Here is a basic template of what one starts off with when first writing a bare bones HTML document:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;!--hello_world.html--&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;My Hello World Example&amp;lt;/title&amp;gt;
    &amp;lt;meta charset="UTF-8" /&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1" /&amp;gt;
    &amp;lt;link href="css/style.css" rel="stylesheet" /&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;main&amp;gt;
      &amp;lt;article&amp;gt;
        &amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;
        &amp;lt;p&amp;gt;
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
        tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
        veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
        commodo consequat. Duis aute irure dolor in reprehenderit in voluptate
        velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint
        occaecat cupidatat non proident, sunt in culpa qui officia deserunt
        mollit anim id est laborum.
        &amp;lt;/p&amp;gt;
      &amp;lt;/article&amp;gt;
    &amp;lt;/main&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you're new to HTML and are a bit overwhelmed by this above snippet, know that you're not alone, many who have accidentally opened up their browser's devtools by hitting the F12 key have often found themselves heavily intimidated by the vast lines of code. Even experienced developers will sometimes have eyes that glaze over at large bodies of text.&lt;/p&gt;&lt;p&gt;While there are some that would give you a slightly more gentle introduction to HTML, this particular example is a suitable base off of which to extend other examples in the following articles on CSS and JavaScript, and also gives us a good introduction to HTML nested elements ("child" and "parent" HTML elements). Let's break this document down in detail, starting with the first line:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;!--hello_world.html--&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To start off with, we have the first line which actually is commented out. This is for your reference as the reader to know that you are looking at, in this case, a file called "hello_world.html". This is actually not part of document, and the preceding lesser than symbol, "&amp;lt;", followed by the exclamation point and two dashes is meant to demarcate the beginning of an html "comment". After naming the file (hello_world.html), it is closed off by two dashes and a greater than symbol, "&amp;gt;". This means that when rendered, the browser will ignore and not display this bit of text. To reiterate, this bit of text is for &lt;em&gt;your&lt;/em&gt; reference and is not the usual part of a standard HTML document. Let's move onto the next line:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This line may seem self explanatory, but is a convention from the early days of HTML, in which the Web Browser was told specifically what type of document it is being given to render. In this case, it is rendering an html document. Moving onto the next line, we encounter another relatively self explanatory line:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;html lang="en"&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You probably can already understand this bit of logic, but to make it absolutely clear, the language this document is rendered in is english, using the commonly used prefix "en". This is also the overall "parent" tag of our document, appropriately named the &lt;code class="inline-code"&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag. After this we encounter a &lt;code class="inline-code"&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag, which encapsulates a series of tags of some interest, and introduces us to our first instance of nested elements. Let's break down these series of lines within the &lt;code class="inline-code"&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;!--hello_world.html--&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;My Hello World Example&amp;lt;/title&amp;gt;
    &amp;lt;meta charset="UTF-8" /&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1" /&amp;gt;
    &amp;lt;link href="css/style.css" rel="stylesheet" /&amp;gt;
  &amp;lt;/head&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I included the indentation here to introduce this concept of nesting first. I will cover what each of these tags mean in detail shortly. Recall our previous example where we had an &lt;code class="inline-code"&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag and a &lt;code class="inline-code"&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag?:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;!--hello_world.html--&amp;gt;

&amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;This is some text meant to be part of a paragraph.&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These are "sibling" HTML elements. They lie next to each other in the "flow" of the document and hold equivalent prevalence in the "hiearchy" of our document structure. While one sibling might be "older" than the other (the &lt;code class="inline-code"&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; element comes before the &lt;code class="inline-code"&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element in the document when reading from top to bottom), the text within then is easily recognized as being encapsulated by their closing tags, the &lt;code class="inline-code"&gt;&amp;lt;/h1&amp;gt;&lt;/code&gt; and &lt;code class="inline-code"&gt;&amp;lt;/p&amp;gt;&lt;/code&gt; tags specifically. In the more extensive example with the &lt;code class="inline-code"&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag above, however, we see that there is specifically indentation, &lt;em&gt;and&lt;/em&gt; other opening and closing tags can be seen within the content of the &lt;code class="inline-code"&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag, specifically a &lt;code class="inline-code"&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag, two &lt;code class="inline-code"&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags, and a &lt;code class="inline-code"&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tags. Additionally the &lt;code class="inline-code"&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; and &lt;code class="inline-code"&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tags don't appear to have a closing tag, but rather simply end with a forward slash at the end before the greater than symbol. So what exactly is happening here?&lt;/p&gt;&lt;p&gt;Well the first true tag of our document is the &lt;code class="inline-code"&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;html lang="en"&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This tag starts our HTML document. In fact the closing tag for this tag is all the way at the very bottom of our document, meaning that all elements within the opening and closing html tags are "children" of this &lt;code class="inline-code"&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag. Let's take a look at this introductory &lt;code class="inline-code"&gt;&amp;lt;header&amp;gt;&lt;/code&gt; tag in its entirety once again:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;!--hello_world.html--&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;My Hello World Example&amp;lt;/title&amp;gt;
    &amp;lt;meta charset="UTF-8" /&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1" /&amp;gt;
    &amp;lt;link href="css/style.css" rel="stylesheet" /&amp;gt;
  &amp;lt;/head&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Similarly, we see that below our opening &lt;code class="inline-code"&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag that the closing &lt;code class="inline-code"&gt;&amp;lt;/head&amp;gt;&lt;/code&gt; tag isn't encountered until four lines down, where it holds the same level of indentation (2 spaces specifically). Thusly, the title, two meta, and link tags are all "children" of the &lt;code class="inline-code"&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag, which itself is a child of the &lt;code class="inline-code"&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag. Note that the indentation is &lt;em&gt;not&lt;/em&gt; what is demarcating this nesting convention, but rather the placement of where the closing tag for that opening tag occurs within the HTML document is how the Browser "determines" which elements are nested.&lt;/p&gt;&lt;p&gt;Each of the &lt;code class="inline-code"&gt;&amp;lt;title&amp;gt;&lt;/code&gt;, two &lt;code class="inline-code"&gt;&amp;lt;meta&amp;gt;&lt;/code&gt;, and &lt;code class="inline-code"&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tags are "siblings" to each other as they each are closed off, either by a traditional closing tag that you have seen before, as is the case with the title tag closing off with &lt;code class="inline-code"&gt;&amp;lt;/title&amp;gt;&lt;/code&gt;, or in the case of the &lt;code class="inline-code"&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags and &lt;code class="inline-code"&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag, are closed off simply by appending a forward slash before the closing of the opening tag itself with the greater than symbol. This is another way of closing off certain tags in HTML documents, and is usually used for elements which hold no inner textual content.&lt;/p&gt;&lt;p&gt;Before moving onto the more extensive topic of the Document Object Model (DOM), I'd like to briefly cover what each of these elements are in turn, starting with the &lt;code class="inline-code"&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag:&lt;/p&gt;&lt;p&gt;The &lt;code class="inline-code"&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag is the very first child element of our HTML document, as it holds metadata (data about data) related to our document. It is a required tag and unless displaying an extremely basic text page, the HTML document will not render without this essential tag. Similary, the first child tag of the &lt;code class="inline-code"&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag is also required, the &lt;code class="inline-code"&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag. The text of this tag provides the title of the Web Page itself, and is what is rendered within the tab of the browser. In fact if we render this HTML document as we did before we will see the title, "My Hello World Example", rendered in the tab itself:&lt;/p&gt;&lt;figure&gt;&lt;img alt="A rendering of a basic HTML page in the Firefox browser" cite="screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/html_ss_04.webp" title="A rendering of a basic HTML page in the Firefox browser"&gt;&lt;/figure&gt;&lt;figcaption&gt;The Title Tag's Text Content Is Displayed In The Browser Tab&lt;/figcaption&gt;&lt;p&gt;Following the &lt;code class="inline-code"&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag, we are presented with our first &lt;code class="inline-code"&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag which delinates what character set the page is rendered in, in this case it is the UTF-8 standard. This is a character encoding standard that is an extensive topic on its own, and is beyond the scope of this article. If you wish to know more about UTF-8, please take a look at the corresponding &lt;a aria-label="a link to the UTF-8 wikipedia article page" class="inline-link" href="https://en.wikipedia.org/wiki/UTF-8" rel="noopener noreferrer" role="link" target="_blank"&gt;wikipedia article&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Next we have the second &lt;code class="inline-code"&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag which contains metadata regarding the "viewport", "content", and "initial-scale". To summarize, this data is referencing how the browser will render the page based off of the initial width of the device, as well as the width of the browser. This meta tag is itself a good segue into what is known as "Responsive Web Design", which refers to how a web page is displayed depending on the screen size of the device it is being viewed on. I plan on covering more on responsive web design in my subsequent article on CSS, but for now if you're so inclined, please feel free to read the &lt;a aria-label="a link to the w3 schools article on the HTML viewport" class="inline-link" href="https://www.w3schools.com/css/css_rwd_viewport.asp" rel="noopener noreferrer" role="link" target="_blank"&gt;w3 schools article&lt;/a&gt; on the subect.&lt;/p&gt;&lt;p&gt;Lastly we have a &lt;code class="inline-code"&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag, which includes an "href" attribute as well as a "rel" attribute. This &lt;code class="inline-code"&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag in particular has a default value in its "href" attribute, which refers to a "style.css" file within the "css" directory. The "rel" attribute refers specifically to it being a "stylesheet". The "href" attribute contains a "url" or "Uniform Resource Locator". This is generally an address, either to a resource on the web, or a resource on the local device.&lt;/p&gt;&lt;p&gt;Finally the closing &lt;code class="inline-code"&gt;&amp;lt;/head&amp;gt;&lt;/code&gt; tag is encountered, and the metadata about our HTML document is complete. Let's now move onto the actual data of our article, starting with the &lt;code class="inline-code"&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  &amp;lt;body&amp;gt;
    &amp;lt;main&amp;gt;
      &amp;lt;article&amp;gt;
        &amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;
        &amp;lt;p&amp;gt;
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
        tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
        veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
        commodo consequat. Duis aute irure dolor in reprehenderit in voluptate
        velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint
        occaecat cupidatat non proident, sunt in culpa qui officia deserunt
        mollit anim id est laborum.
        &amp;lt;/p&amp;gt;
      &amp;lt;/article&amp;gt;
    &amp;lt;/main&amp;gt;
  &amp;lt;/body&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code class="inline-code"&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag is the meat of our document, including pretty much all content of our HTML document that is not metadata. This includes the nav and footer, article and paragraphs, as well as lists, tables, images, embedded video, and many other elements. While sibling to the &lt;code class="inline-code"&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag, and child to the &lt;code class="inline-code"&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag, it is usually the parent to pretty much every other element within the document.&lt;/p&gt;&lt;p&gt;Next we have the &lt;code class="inline-code"&gt;&amp;lt;main&amp;gt;&lt;/code&gt; tag, which specifies the main content of the document. It might seem redundant to have a tag called "main" after the &lt;code class="inline-code"&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag, but the &lt;code class="inline-code"&gt;&amp;lt;main&amp;gt;&lt;/code&gt; tag is used primarily to differentiate the content of the HTML document from other elements used for navigation, like the nav and footer.&lt;/p&gt;&lt;p&gt;The following &lt;code class="inline-code"&gt;&amp;lt;article&amp;gt;&lt;/code&gt; tag is used to delinate, according to the &lt;a aria-label="a link to the w3 schools article on the HTML article tag" class="inline-link" href="https://www.w3schools.com/TAGS/tag_article.asp" rel="noopener noreferrer" role="link" target="_blank"&gt;w3 schools article on the tag,&lt;/a&gt; a block of "independent, self-contained content". Generally this is used to identify content like a forum/blog post, a news story, or some other length of textual data. This is the child of the &lt;code class="inline-code"&gt;&amp;lt;main&amp;gt;&lt;/code&gt; tag and parent to the remaining two tags, the &lt;code class="inline-code"&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; and &lt;code class="inline-code"&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;&lt;p&gt;We have already covered what the &lt;code class="inline-code"&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; and &lt;code class="inline-code"&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags are in our original examples. I will briefly address the strange text you see within the &lt;code class="inline-code"&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag as being some dummy text known as "lorem ipsum" text, which is generally used as a placeholder for a (usually large) body of text when the content of the article has yet to be written. This is used when the developer needs to have a visual representation of what the general text will look like in the document prior to publication.&lt;/p&gt;&lt;p&gt;This brief overview of the general flow of a standard HTML document is meant solely as an introduction to the concepts one will encounter when working as a Web Developer, specifically a Front End Web Developer. Having grasped the basic concepts of HTML tags, as well as sibling and child elements, let us now move onto the subject of the Document Object Model, more commonly referred to as the DOM:&lt;/p&gt;&lt;h2&gt;The Document Object Model&lt;/h2&gt;&lt;br&gt;&lt;figure&gt;&lt;img alt="a simple diagram displaying a tree diagram of a basic html page" cite="https://commons.wikimedia.org/wiki/File:Simpe_HTML_page_DOM.svg" class="img-image" loading="lazy" src="../assets/images/img/html_page_dom.webp" title="a simple diagram displaying a tree diagram of a basic html page"&gt;&lt;/figure&gt;&lt;figcaption&gt;A Tree Diagram Of A Basic HTML DOM&lt;/figcaption&gt;&lt;p&gt;I'll be the first to admit that I'm still learning quite a bit about HTML, CSS, and JavaScript, as each are vast subjects in their own right that one could spend a lifetime trying to master. HTML, while unimpressive visually, provides a scaffolding onto which nearly any kind of two dimensional interface can be rendered and displayed back to the user. The Document Object Model (DOM) is more than just a simple abstraction when trying to conceptualize the structure and flow of an HTML document. Rather, the DOM is an interface through which every element in the HTML document is represented like branches and leaves on a tree.&lt;/p&gt;&lt;p&gt;These "nodes", as they are officially termed according to the &lt;a aria-label="a link to the wikipedia page on the World Wide Web Consortium" class="inline-link" href="https://en.wikipedia.org/wiki/W3C?useskin=vector" rel="noopener noreferrer" role="link" target="_blank"&gt;W3C&lt;/a&gt; standards, can be interacted with via both CSS configuration and JavaScript programming. In understanding the structure of the DOM, we as Frontend Web Developers can stylize and manipulate the HTML document.&lt;/p&gt;&lt;p&gt;To review our previous subject on nested elements, let's take a look at a basic HTML structure:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;My Website&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Welcome&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;This is my website.&amp;lt;/p&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This can be represented textually in the DOM like so:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;- Document (root)
  - html
    - head
      - title
        - "My Website"
    -body
      - h1
        - "Welcome"
      -p
        - "This is my website."&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Looking at our previous code snippet above, we can see that the "Document" is treated as the "root" node of the DOM. Very much like our tree analogy, this is the root of the HTML document, and is the first element parsed by the Browser when a GET request is made for the HTML web page. From here we have our familiar &lt;code class="inline-code"&gt;&amp;lt;html&amp;gt;&lt;/code&gt;, &lt;code class="inline-code"&gt;&amp;lt;head&amp;gt;&lt;/code&gt;, &lt;code class="inline-code"&gt;&amp;lt;title&amp;gt;&lt;/code&gt;, &lt;code class="inline-code"&gt;&amp;lt;body&amp;gt;&lt;/code&gt;, &lt;code class="inline-code"&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;, and &lt;code class="inline-code"&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags all decending in order down the DOM tree. As referenced earlier, you can see that the &lt;code class="inline-code"&gt;&amp;lt;head&amp;gt;&lt;/code&gt; and &lt;code class="inline-code"&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tags are siblings of each other, each with their own respective child elements. The textual content of the &lt;code class="inline-code"&gt;&amp;lt;title&amp;gt;&lt;/code&gt;, &lt;code class="inline-code"&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;, and &lt;code class="inline-code"&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags indicate that these nodes are the ending nodes in the tree, and are aptly named "leaf" nodes, as they are the farthest nodes from the root and have no children of their own.&lt;/p&gt;&lt;p&gt;The power of this structure is not obvious, especially if you have never interacted with the DOM via CSS or JavaScript before. In the following articles, it will hopefully become more apparent as to why HTML is structured in this fashion, and how one can start to make HTML sites more beautiful and interactive. Without CSS and JavaScript, websites, while informative, are little more than readable documents, occassionally with some links to other web pages. This is made apparent if you render the html document from our previous example in the browser:&lt;/p&gt;&lt;figure&gt;&lt;img alt="Without CSS and JavaScript, even a lot of HTML code looks bland" cite="screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/html_ss_05.webp" title="Without CSS and JavaScript, even a lot of HTML code looks bland"&gt;&lt;/figure&gt;&lt;figcaption&gt;HTML On It's Own is Rather Bland To Look At And Interact With. It Could Do With Some CSS And JavaScript.&lt;/figcaption&gt;&lt;h1&gt;Conclusion&lt;/h1&gt;&lt;p&gt;In this article, I've made my best attempt to cover the basics of how a Webpage is brought to you over the Internet. First by delineating how a webpage is first requested from the user on the Frontend Client and then subsequently retrieved from the Backend Server. I then moved on to describe how the Browser interprets this requested data and renders it as HTML. This is done by interfacing with the Document Object Model (DOM), by which the Browser "traverses" its tree-like structure to eventually render the textual content of the page at its outermost "leaf" nodes.&lt;/p&gt;&lt;p&gt;If you've made it here, to the end of this article, I humbly thank you for taking the time to read this in its entirety. I know that the subject of pure HTML can appear rather bland even to the uninitiated, but I assure you that once we get more into the topics of CSS and JavaScript, that you will begin to understand why it was first necessary to dive into the basics of HTML first. The subtitle of this article refers to HTML as being "The Web's Skeleton." I named it this because this is the analogy I like best when thinking about Frontend Web Development in general. HTML is the skeleton on top of which we Web Developers can then add &lt;a aria-label="A link to my article on CSS" class="inline-link" href="https://brianhayes.dev/blog/css_the_webs_makeup.html" rel="noopener noreferrer" role="link"&gt;Makeup&lt;/a&gt; and &lt;a aria-label="A link to my article on JavaScript" class="inline-link" href="https://brianhayes.dev/blog/javascript_the_webs_muscles.html" rel="noopener noreferrer" role="link"&gt;Muscles&lt;/a&gt;.&lt;/p&gt;&lt;/article&gt;</description>
			<guid isPermaLink="false">https://brianhayes.dev/blog/css_the_webs_makeup.html</guid>
			<pubDate>Tue, 25 Jul 2023 00:00:00 +0000</pubDate>
		</item>
<item>
			<title>Musings On Vim</title>
			<link>https://brianhayes.dev/blog/musings_on_vim</link>
			<description>&lt;article class="demo-button"&gt;&lt;h1&gt;Introduction&lt;/h1&gt;&lt;p&gt;Should you have chosen to start programming/coding, you will undoubtedly at some point encounter those with opinions on which software is best to utilize. While the amount of tools availiable to software developers is extremely vast, there are three (maybe four) essential tools necessary for a beginner software developer to get started (not mentioning the Operating System). These tools are a Web Browser (for research and web development), a Terminal Emulator (for interfacing with software, both your own and others), and a Text Editor (the fourth is a compiler, but I'll digress on that topic for now).&lt;/p&gt;&lt;p&gt;Each of these essential tools have a wide variety of options, with a few clear winners that are extremely popular. In the Web Browser world, you have Google's Chrome, MacOs's Safari, and Mozilla's Firefox. The Terminal Emulator world is quite vast where the clear winners are less obvious, but two of the most popular options on Linux currently are the Alacritty and Kitty Terminal Emulators. Then we come to the world of Text Editors, which has a somewhat vast array of choices, with Microsoft's Visual Studio Code being the most popular by far. Other text editors include Github's Atom (likely soon to be deprecated at the time of this writing), Sublime Text, Microsoft Notepad++, and many others. When addressing the subject of text editors in online communities, you're liikely to hear an overwhelming and increasing majority of users singing the praises of VS Code, perhaps a few chiming in about Sublime Text, the somewhat rare Emacs masochist waxing poetic about how Emacs isn't JUST a text editor, but a way of life. Then, of course, there's Vim.&lt;/p&gt;&lt;h2&gt;What Is A Text Editor?&lt;/h2&gt;&lt;p&gt;To simplify greatly, a text editor is a piece of software for the purposes of generating and editing text. If you have ever played around in Microsoft Notepad, you'll be forgiven for thinking that it is so basic that it should only be used for quick notes and doesn't serve much other functionality. While this is somewhat true, you can indeed code in Notepad, as all you technically need to code is a piece of software that is capable of inputting and editing plain text. Text Editors do have some overlap in functionality with Word Processors, but the purpose of a text editor has far less to do with presentation (meaning there is little to no formatting for the intentions of printing, and rather is intended for the ease of use in coding and technical documentation).&lt;/p&gt;&lt;p&gt;Modern text editors provide a basic suite of features by default. Some of the most obvious of these features are syntax highlighting (colorizing of certain keywords in the text depending on the programming language being edited), linting (helpful error messages that inform the user of possible errors in the code), and a vast suite of various tools for quickly navigating and searching throughout their project hiearchy. They are also highly customizable, with a wide variety of plugins available, as well as a configuration interface with which the user can further tailor the text editor to their specific needs.&lt;/p&gt;&lt;h2&gt;What Is Vim?&lt;/h2&gt;&lt;p&gt;Obviously, given the track of the article thus far, you can easily ascertain that Vim is a text editor of some note. What makes Vim unique amongst text editors is its adoption of the original workflow from the Vi text editor, which heavily utilizies the feature of Modal Editing. Unlike other text editors, in which the user can immediately start inputting and editing text, Vi introduced the concept of "Modes," in which the input from the keyboard would not necessarily produce text on the screen, but would rather either navigate or manipulate the text in some way other than simple input. To be clear, Vi can still input text in the same fashion as other text editors, it's just that this mode (known as INSERT mode), is only one amongst many modes the user can choose to be in. On a modern text editor like VS Code, the navigation within the document from say, one word to the next, is accomplished using the 'ctrl + right arrow' keybinding. In Vim, while you can do the same in INSERT mode, if in what is known as NORMAL mode, one can traverse the same navigational pattern by simply typing 'w'. While this may seem trivial to the unitiated, this modal editing is the major distinguishing feature of Vim with the general effect being that the user's fingers never leave home row, and thusly do not need to "reach" for keys on the perimeter of the keyboard as often, thusly increasing typing speed. Additionally, the "chaining" of these different modal keybindings while in NORMAL mode also increases productivity as one can more quickly navigate and edit a document than in a traditional text editor like VS Code.&lt;/p&gt;&lt;h2&gt;Vim's Drawbacks&lt;/h2&gt;&lt;p&gt;Utilizing Vim's keybindings and modal editing is actually nearly ubiquitous across text editors now. There is a Vim Feature/Plugin for nearly every text editor, as well as a Vim setting in your shell (simply write "set -o vi" in your ~/.bashrc), and even your web browser can be modified with an &lt;a class="inline-link" href="https://addons.mozilla.org/en-US/firefox/addon/vimium-ff/" rel="noopener noreferrer" target="_blank"&gt;extension&lt;/a&gt; to utilize Vim-style keyboard-centric navigation. With Vim's flagship keybindings having been ported to many other text editors, one might wonder why use Vim at all? This is a more compelling argument against using the original terminal based Vim text editor (especially if you also don't find the following argument below regarding the efficient of use of system resources compelling). Vim in the terminal requires more in-depth configuration than other text editors. While being more customizable than other text editors, the time spent in configuring any piece of software could easily be spent learning some programming language, or simply doing anything else for that matter. The scripting language, vim-script, is not portable to other programs, and thus the time you spend learning vim-script does not transfer over to other projects (It is poignent to point out that Vim's successor, Neovim, is configured in the scripting language Lua, and thusly learning Lua through configuring Neovim may be a more worthwhile endeavor in this regard). In my previous article on &lt;a aria-label="link" class="inline-link" href="https://brianhayes.dev/blog/why_use_linux.html" role="link"&gt;Why You Should Use Linux&lt;/a&gt;, one of my main arguments behind learning to utilize The Linux Operating System was the fact that the act of customizing your Linux machine will help you learn more about computers in general. This same argument cannot be applied when regarding configuring Vim as a way to learn more about your computer, though in configuring Vim, you will learn more about your text editor. Ultimately, many of the features available in VSCode natively have to be implemented in Vim via plugins and extensive configuration. So what are the utilitarian reasons for utilizing Vim?&lt;/p&gt;&lt;h2&gt;Why Use Vim?&lt;/h2&gt;&lt;p&gt;It almost goes without saying that the majority of new programmers/coders reach for Microsoft's VS Code as their first (and possibly only) text editor. The predominance of VS Code is due to the simple fact that it is a great piece of software that works out of the box. Its ecosystem is vast, with a wide variety of plugins, color themes, and a helpful community. VS Code even has a Vim (and Neovim) plugin so one can utilize Vim-style modal editing keybindings. So, why, ultimately, would I suggest you utilize Vim(Neovim) over VS Code? There are a few good reasons.&lt;/p&gt;&lt;p&gt;Just like with choosing Linux, the choice of a text editor, like Vim, can become quickly political in nature due to the fact that VS Code is not entirely Open Source. While VS Code's source code is released under the permissive MIT license, the popular Microsoft release of this has proprietary software integrated into it. Additionally, VS Code utilizes telemetry by default, which goes against the FOSS world's advocacy for opt-in, and not opt-out, telemetry (The fork, VS-Codium, turns off this telemetry by default).&lt;/p&gt;&lt;p&gt;On a less political note, Vim, and its popular descendant, Neovim, run natively within the Terminal and Terminal Emulator. This greatly reduces the amount of system resources utilized during operation when compared with VS Code, which utilizes the resource-intensive Electron as its base. This alone,is reason enough to utilize Vim. I have a relatively powerful machine with a modern CPU and GPU, but gravitate towards software that runs on as little resources as possible. Many argue that system resources are cheap today, and needing to squeeze every bit of memory out of your machine is a thing of the past, but this is a short-sighted argument. System resources are always disposable until you run out of them, and programmers in particular should never view system resources as being somehow magically infinite. This isn't to say that VS Code is a memory hog per say (that is relative), but the majority of what one can accomplish in VS Code, one can accomplish just as well, if not more efficiently, with Vim, and at a fraction of the system resource cost. The argument regarding system resources, however, is moot when compared to the next argument I will make in favor of using Vim as your text editor.&lt;/p&gt;&lt;p&gt;Vim, with it's native modal editing ecosystem, incorporates a series of keybindings and shortcuts that greatly increase the speed with which the user can edit text. Much has been written on how to get started with Vim, and I will be providing you with a basic introduction to Vim towards the end of this article, but Vim is not an editor that is as intuitive to get started with as VS Code, and this is one of its major drawbacks. Although one could make the argument that learning Vim is similar in nature to learning the basic keybindings native in most Windows and MacOs applications, I would argue that Vim has a far more vast and rich set of keybindings, which, as mentioned above, can be chained together to achieve rapid results whether navigating or editing the document.&lt;/p&gt;&lt;h2&gt;Vim Basics&lt;/h2&gt;&lt;p&gt;For the following short introduction to Vim, I will be utilizing the modern fork, Neovim, but for the purposes of this tutorial, you can use either version.&lt;/p&gt;&lt;p&gt;How you install Vim will depend on what Operating System you have. If on Windows or MacOs, please take a look at &lt;a class="inline-link" href="https://www.vim.org/download.php" rel="noopener noreferrer" target="_blank"&gt;these instructions&lt;/a&gt;, or you can install &lt;a class="inline-link" href="https://github.com/neovim/neovim/wiki/Installing-Neovim" rel="noopener noreferrer" target="_blank"&gt;neovim&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If you're using Linux, utilize your native package manager:&lt;/p&gt;&lt;p&gt;Debian-based Linux distributions:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell

[~]$ sudo apt install neovim&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Arch-based Linux distributions:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell

[~]$ sudo pacman -S neovim&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The text editor will open with a brief introductory screen. For those more accustomed to VS Code or a similar Graphical User Interface(GUI) text editor, Vim can appear rather sparse. At least the introduction screen provides us with the some information abut how to get started (:help vim&lt;enter&gt;). I would encourage you to take a look at this help page, as Vim and Neovim documentation is quite good. I will now cover some of the basic keybindings and Vim "movements" in concluding this article, in order that you might get a sense of Vim's appeal.&lt;/enter&gt;&lt;/p&gt;&lt;figure&gt;&lt;img alt="The Introduction Screen to Neovim" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/ss_nvim_01.webp" title="The Introduction Screen to Neovim"&gt;&lt;/figure&gt;&lt;figcaption&gt;The Introduction Screen to Neovim&lt;/figcaption&gt;&lt;p&gt;When you first attempt to type anything into Vim, you may very well be immediately frustrated at the fact that no text appears on the screen! What the hell?! Isn't this supposed to be a text editor? Well, hold on, remember what I said earlier about it being a MODAL editor? Well if your cursor is in the default white block state, then Vim is currently in NORMAL mode, which one can think of as being a basic navigation and editing mode. In order to type something out, press 'i' in order to enter INSERT mode.&lt;/p&gt;&lt;figure&gt;&lt;img alt="Neovim in Insert Mode with Sample Text" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/ss_nvim_03.webp" title="Neovim in Insert Mode with Sample Text"&gt;&lt;/figure&gt;&lt;figcaption&gt;Neovim in Insert Mode with Sample Text&lt;/figcaption&gt;&lt;figure&gt;&lt;img alt="CloseUp of the INSERT mode prompt" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/ss_nvim_02.webp" title="CloseUp of the INSERT mode prompt"&gt;&lt;/figure&gt;&lt;figcaption&gt;INSERT mode creates a prompt in Vim&lt;/figcaption&gt;&lt;p&gt;Changing over to insert mode will change the shape of your cursor to the thin bar variety. You can now insert text like you would in a normal text editor. All the basic keybindings still work, be it ctrl+right arrow for navigating, as well as your standard editing keys like backspace and delete. I wouldn't recommend using these, however, as you would be overlooking NORMAL mode's editing capabilities. Generate some dummy text using &lt;a class="inline-link" href="https://loremipsum.io/" rel="noopener noreferrer" target="_blank"&gt;Lorem Ipsum&lt;/a&gt;, enough so that it fills your screen (about 10 paragraphs should do), and then return to NORMAL mode by hitting the &amp;lt;ESC&amp;gt; key. Next I'm going to cover the basic navigation.&lt;/p&gt;&lt;p&gt;In Vim, deviation from the home row of your keyboard is highly discouraged by design. On a standard QWERTY keyboard, when positioned correctly, all the "arrow" navigation keys can be found beneath your right hand, instead, while in NORMAL mode, left is "h", down is "j", up is "k", and right is "l".&lt;/p&gt;&lt;figure&gt;&lt;img alt="Demonstration of basic navigation in Vim" cite="author screenshot" class="gif-image" loading="lazy" src="../assets/images/gifs/ss_nvim_04.gif" title="Demonstration of basic navigation in Vim"&gt;&lt;/figure&gt;&lt;figcaption&gt;Basic Navigation Demo in Vim using hjkl&lt;/figcaption&gt;&lt;p&gt;While this initial lesson is rather underwhelming, this basic feature of Vim reinforces a subtle, but powerful productivity standard, which is that your workflow should be keyboard-centric. I believe that coders/programmers should at least have a few (if not many) keybindings that they have memorized and engrained into muscle memory regardless of which text editor they use. It's simply more efficient than navigating solely with arrow keys, and there should be as little physical strain on the hands and wrists as possible while typing. The quicker you can accomplish your editing, the more time you have to devoting to coding and thinking hard about your next line of code.&lt;/p&gt;&lt;p&gt;Very basic navigation out of the way, let's cover word traversal. While still in NORMAL mode, at any point on your dummy text, hit the key "w", and then the key "b". "w" traverses the document word by word, "b" does the same but towards the beginning.&lt;/p&gt;&lt;figure&gt;&lt;img alt="Demonstration of word traversal in Vim" cite="author screenshot" class="gif-image" loading="lazy" src="../assets/images/gifs/ss_nvim_05.gif" title="Demonstration of word traversal in Vim"&gt;&lt;/figure&gt;&lt;figcaption&gt;Basic Word Traversal in Vim&lt;/figcaption&gt;&lt;p&gt;Okay, now you're moving a bit faster, instead of letter by letter, you're traversing the document word by word. Next, we"ll cover traversing an entire line. Navigate to the middle of one line and while in NORMAL mode, type the dollar sign symbol, "$", and then after taking a moment to notice the result in your editor, type the number zero, "0", and again, notice the results:&lt;/p&gt;&lt;figure&gt;&lt;img alt="Demonstration of line traversal in Vim" cite="author screenshot" class="gif-image" loading="lazy" src="../assets/images/gifs/ss_nvim_06.gif" title="Demonstration of line traversal in Vim"&gt;&lt;/figure&gt;&lt;figcaption&gt;Basic Line Traversal in Vim&lt;/figcaption&gt;&lt;p&gt;These two commands lead you to the end of your current line with dollar sign, "$", or to the beginning of your current line with the number zero, "0".&lt;/p&gt;&lt;p&gt;Now you have a few options for quickly navigating your document horizontally, what about vertically? In NORMAL mode, while positioned more towards the top of your document than towards the bottom, enter 'ctrl+d', and notice the results.&lt;/p&gt;&lt;figure&gt;&lt;img alt="Demonstration of vertical traversal in Vim" cite="author screenshot" class="gif-image" loading="lazy" src="../assets/images/gifs/ss_nvim_07.gif" title="Demonstration of vertical traversal in Vim"&gt;&lt;/figure&gt;&lt;figcaption&gt;Basic Vertical Traversal in Vim&lt;/figcaption&gt;&lt;p&gt;Essentially "ctrl+u" and "ctrl+d" are Vim"s version of pageup, and pagedown.&lt;/p&gt;&lt;p&gt;The next keybindings important to vertical traversal are that of 'gg' and 'shift+g'(capital G). While in NORMAL mode, enter both of these and notice their results.&lt;/p&gt;&lt;figure&gt;&lt;img alt="Demonstration of entire document traversal in Vim" cite="author screenshot" class="gif-image" loading="lazy" src="../assets/images/gifs/ss_nvim_08.gif" title="Demonstration of entire document traversal in Vim"&gt;&lt;/figure&gt;&lt;figcaption&gt;Traversing the document using "gg" and "G"&lt;/figcaption&gt;&lt;p&gt;These keybindings navigate the entirety of your document. 'gg' will bring your cursor to the first line of your document, while capital G, or shift+g will bring you to the last line of your document.&lt;/p&gt;&lt;p&gt;At this point you might be underwhelmed, as it all seems like a more esoteric way of navigating using alternative keys other than pgdown, pgup, end, home, ctrl+left arrow, ctrl+right arrow, etc. And you'd be right...if this was all Vim had to offer.&lt;/p&gt;&lt;p&gt;While there is more to navigation than what I have presented here thus far, I will now move on to the basics of Vim Editing, which will hopefully further elucidate the power of Vim's modal editing features.&lt;/p&gt;&lt;p&gt;For this example, please stay in NORMAL mode (if you hit "i" at any time prior to this and entered INSERT mode, simply return to NORMAL mode by hitting the &amp;lt;ESC&amp;gt; key). Navigate to the beginning of any word in your document using "w". From here enter, the keys, "dw", and witness the results, yes, very simply, we deleted a word.&lt;/p&gt;&lt;p&gt;I want to pause here and point out that in any other classic text editor, the keybinding to do this is ctrl+delete, which isn't so bad (though you do have to navigate both hands a bit far away from home row to do so).&lt;/p&gt;&lt;p&gt;Also notice the chaining of commands here, "d" is meant to be a mnemonic, reminding you of "delete", but on its own doesn"t do anything, it takes another command as an argument, so "dw", means "delete word." We traverse using "w" and when we come across a word we want to delete, we use the command "d" and the argument, "w", resulting in "dw". What if we wanted to delete the previous word? Well we traverse using back to the previous word using the "b" keybinding, so it makes sense that "db", would be "delete back" or "delete previous word".&lt;/p&gt;&lt;figure&gt;&lt;img alt="Demonstration of deleting a word using 'dw' and 'db' in Vim" cite="author screenshot" class="gif-image" loading="lazy" src="../assets/images/gifs/ss_nvim_09.gif" title="Demonstration of deleting a word using 'dw' and 'db' in Vim"&gt;&lt;/figure&gt;&lt;figcaption&gt;You can delete a word using the "dw" and "db" command chains&lt;/figcaption&gt;&lt;p&gt;And indeed it does. And yes, this functionality can be accomplished using the standard text editor"s keybinding "ctrl+backspace".&lt;/p&gt;&lt;p&gt;Should you wish to undo any of your recent deletions, simply hit "u" to undo the last command. If you then change your mind and wish to redo your recent deletions, simply hit "ctrl+r". On standard editors, this redo functionality can be accomplished using "ctrl+z".&lt;/p&gt;&lt;p&gt;You may still be unconvinced of Vim's editing capabilities, as I have covered how to accomplish many of these edits in a standard text editor as well. Allow me to hammer home the point by covering a few more editing techniques involving just the "d"/delete command.&lt;/p&gt;&lt;p&gt;Suppose I think a bit on how else I can chain "d" with other movement commands? What if I wish to delete just the next character to the right of me? Well "l" will navigiate more cursor right, therefore "d", "delete" will "delete" followed by "l" "one character to the right of me." So "dl" deletes one letter to the right of my cursor and "dh" will delete one character to the left of my cursor. What about "dj"? "dj" will delete the entire next line, whereas "dk" will delete the preceding line above.&lt;/p&gt;&lt;p&gt;What about "dd"? Well this one is less intuitive, isn"t it? "delete delete". Well long story short, it deletes the entire line you are currently on.&lt;/p&gt;&lt;p&gt;What about "d$"? You guessed right, delete all text from my current cursor position to the end of the line. "d0" will delete all text from my current cursor position to the beginning of the line.&lt;/p&gt;&lt;p&gt;"dG" will delete everything from my current cursor position to the end of the document, while "dgg" will delete everything from my current cursor position to the beginning of the document.&lt;/p&gt;&lt;figure&gt;&lt;img alt="" cite="author screenshot" class="gif-image" loading="lazy" src="../assets/images/gifs/ss_nvim_10.gif" title=""&gt;&lt;/figure&gt;&lt;figcaption&gt;Various chaining of the "d" command in Vim&lt;/figcaption&gt;&lt;p&gt;And so on...&lt;/p&gt;&lt;p&gt;This is a basic explanation on the power of chaining commands. Now, how would we accomplish these things in a standard text editor without this MODAL editing feature? Well this is where the ergonomics of your standard text editor fail. Let"s just say I wanted to do more than delete a few words, what if I wanted to delete everything from my current position to the end of the line? Well in Vim, as previously pointed out, that is accomplished simply by invoking "d$". In a standard text editor, this would be accomplised by "ctrl+shift+end" followed by "delete" or "backspace". Four keys to Vim's two, and much further from home row.&lt;/p&gt;&lt;p&gt;At this point, you may protest, saying "Well I could always use the mouse to highlight that text and then just hit the delete or backspace key! It's not a big deal!!" And that is where you'd be wrong, were you to make such an argument. While I am not opposed to the utilization of the mouse in text editing (I am known to use my mouse from time to time), the frequency with which a programmer must switch from moving one hand away from home row on their keyboard to utilize the mouse in a standard text editor is an inconvenience that I cannot imagine enduring after having utilized Vim's modal editing. It's just far superior.&lt;/p&gt;&lt;h2&gt;&lt;/h2&gt;&lt;p&gt;It is a joke/meme among Vim users that many of us never leave Vim. Not necessarily because we love it, but because we never learned how to exit. Although the introduction screen does actually tell you how to exit Vim, it is easy for a beginner to forget the command after having experimented with it for the first time.&lt;/p&gt;&lt;p&gt;From NORMAL mode, enter the colon key, ":". Here you are entering "COMMAND" mode, which has syntax somewhat similar to the shell. If you wish to save the document you have worked on, enter "w", which stands for "write". If you wish to quit without saving, enter ":q!". The exclamation point at the end is akin to certain shell commands where "-f" is mnemonically associated with the word "force", without it the editor will warn you that you have unsaved changes and not let you exit. Of course, you can chain these commands, so if you wish to write and quit in a single command, simply enter ":wq".&lt;/p&gt;&lt;h1&gt;Conclusion&lt;/h1&gt;&lt;p&gt;I will digress at this point and bring this article to an end. There are far more Vim keybindings to cover, but I do not wish to overwhelm you too much, as the basic navigation/editing keybindings presented above are a good start to using Vim. In order to utilize Vim to actually start coding, however, will require at least a few plugins(there are those that do completely without plugins, but personally I find them very helpful), and a bit of configuration. I do plan to eventually write an article covering these more nuanced aspects to Vim, but in the meanwhile I encourage you to take a look at the following official documentation on Vim/Neovim. Thank you for taking the time to read my personal take on Vim, and Happy Coding!&lt;/p&gt;&lt;/article&gt;</description>
			<guid isPermaLink="false">https://brianhayes.dev/blog/the_keys_that_bind.html</guid>
			<pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate>
		</item>
<item>
			<title>One With The Keyboard</title>
			<link>https://brianhayes.dev/blog/one_with_the_keyboard</link>
			<description>&lt;article class="demo-button"&gt;&lt;h1&gt;Introduction&lt;/h1&gt;&lt;p&gt;When I decided to dive in deep, and make my best attempt at learning everything I could about Computers, I had already been, what is commonly called, a "Power User" of computers (meaning the Windows Operating System), and so didn't have as tough a time as some would have when I started my journey into learning the intricacies of computer programming. I have been a more than adequate typist since the age of eight years old and had taken the time to learn more than a few keyboard shortcuts. These skills would prove invaluable as they would compound on the skills necessary for basic desktop operations.&lt;/p&gt;&lt;p&gt;There is such a huge skill and knowledge divide between the average everyday user of today's computers and programmers, and that divide is becoming ever wider with the emphasis placed on tablets, phones, and touchscreens. In many ways, the ability to adequately type is becoming a lost art form that only college graduates of certain disciplines find themselves capable of, let alone know about basic keyboard shortcuts (ctrl+tab, alt+tab, ctrl+c, ctrl+v, ctrl+a, ctrl+z ,ctrl+shift+left/right arrows, etc.). These skills, while not uncommon, are also not nearly as common as they should be, especially when considering the prevalance of computers in our lives. This is certainly an opinion (as is nearly everything written on this blog), but I think it goes without saying that the ability to type at least 40 words per minute (WPM) is as important as, if not more important than, the ability to drive a motor vehicle in today's modern world.&lt;/p&gt;&lt;h2&gt;In the beginning&lt;/h2&gt;&lt;p&gt;So where do you get started when learning to code? If you already can type adequately without looking down at your hands, and are familiar with some basic keyboard shortcuts, then honestly you are miles ahead than some who make the attempt from absolutely no knowledge of keyboards, let alone computers. But this blog is written by a beginner/intermediate computer user/programmer. So come, let the blind lead the blind a bit..., and let's cover some basics.&lt;/p&gt;&lt;p&gt;Learning to type adequately and get to the minimum threshold of being able to comfortably type 40WPM will take about two months of dedicated practice by my estimation (if you are a complete beginner), practicing at least 2 hours a day. Other than a desktop/laptop computer and a screen, you will(obviously) need a keyboard to get started. You should purchase a keyboard that is comfortable to you, but, ultimately, any modern keyboard will do for the purposes of learning how to type as long as it has the standard QWERTY layout(if the upper left hand row of your keyboard spells out QWERTY, you're good to go).&lt;/p&gt;&lt;p&gt;The next resource you'll need is a typing tutorial/course. These can be paid or free, but I'd recommend that you simply go to any of the multitude of free online resources. I personally like &lt;a class="inline-link" href="https://www.typingtest.com/trainer/" rel="noopener noreferrer" target="_blank"&gt;typing test&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;At first you will find yourself typing slowly and looking down at the keyboard often. Do not fret, do your best to not get frustrated. Every new skill takes time and is rarely a comfortable experience. Whenever you find yourself looking down at the keyboard, return your fingers to the home row, place your index fingers on the j a f keys, feel the raised bar at the bottom of the keys with your fingers to remind yourself of the tactile sensation of being in the proper starting position, and continue to memorize where each key is. Eventually this muscle memory will become engrained in you, and you will be more focused on what you are trying to write, rather than the location of the keys.&lt;/p&gt;&lt;p&gt;Once you feel you can write a short essay (2 pages long), at about 40wpm, you are ready to move onto learning some basic keyboard shortcuts. This is markedly easier than learning to type, but provides you with an ability to navigate applications (particularly the web browser and word processor) much faster, and ultimately this makes doing research and editing documents much easier, less frustrating, and faster. Here are some of the basics that exist on the most common desktop platforms:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#keyboard_shortcuts.txt

On the Browser:
ctrl+tab (cycle forward one open tab)
ctrl+shift+tab (cycle backward one tab)

Standard Word Processors:
ctrl+a (select all text)
ctrl+c (copy selected text to the clipboard)
ctrl+v (paste selected text from the clipboard)
ctrl+z (undo last action)
ctrl+right-arrow (navigate to the next word)
ctrl+left-arrow (navigate to the last word)
ctrl+shift+right-arrow (highlight and navigate to the next word)
ctrl+shift+left-arrow (highlight and navigate to the last word)

On the desktop:
super(windows/command key)+tab (navigate through the open applications)
super(windows/command key)+shift+tab (navigate through the open applications reversed)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The skill of typing and knowing certain keyboard shortcuts are not necessary, per se, to learning how to code, but having a basic proficiency in typing will make your journey learning to code much easier. An approachable way to think about the learning process when it comes to typing is that it is very much akin to learning how to walk. Using the mouse can be thought of as crawling, typing as walking, and utilizing slightly more advanced tools like keyboard shortcuts and text editors like vim as running. All this said, there is a point of diminishing returns when it comes to the correlation between quality of code and typing speed. At some point you are reading code and looking at code and thinking about code much more than simply typing it. You do not need to have the typing speed of a courtroom stenographer to learn how to code, but it is essential that your typing speed (or lack thereof) not hinder your train of thought when you do put your thoughts onto the screen. The location of the keys must be subconscious in your mind so that the only constraint is the speed of your thoughts, not the speed of fingers.&lt;/p&gt;&lt;h1&gt;Conclusion&lt;/h1&gt;&lt;p&gt;I was once told that learning to code and program was like learning to wield a great lever. Once I had learned the skills to a certain capability, I would be able to do a lot with a single flip of a switch. More seriously, this same person would tell me that those that didn't learn these new technologies (and kept up with modern advances in technology), would be left behind economically. I believe this to be absolutely true. This makes the importance of learning to type ever the more important. Until communicating with computers is done in a more intuitive and immediate fashion, keyboards will remain one of the most important tools in the modern world, as they are, undoubtedly, the predominant way we interface with computers, and will be for the foreseeable future.&lt;/p&gt;&lt;/article&gt;</description>
			<guid isPermaLink="false">https://brianhayes.dev/blog/command_line.html</guid>
			<pubDate>Fri, 04 Nov 2022 00:00:00 +0000</pubDate>
		</item>
<item>
			<title>Ortholinear Keyboards</title>
			<link>https://brianhayes.dev/blog/ortholinear_keyboards</link>
			<description>&lt;article class="demo-button"&gt;&lt;h1&gt;Introduction&lt;/h1&gt;&lt;p&gt;If you've read any of my previous articles, you can probably tell that I'm pretty obsessed with The Keyboard-Centric Workflow. In utilizing the Vim Text Editor, The Vimium Browser Extension, and a Tiling Window Manager, I can honestly say that my &lt;em&gt;potential&lt;/em&gt; productivity has greatly increased. Although I owe a great deal of this increased potential productivity to the aforementioned pieces of software, there is one piece of hardware that has been a game-changer to my workflow and that is the ortholinear keyboard.&lt;/p&gt;&lt;p&gt;I first encountered an ortholinear keyboard after witnessing my mentor working with a variety of ergonomic keyboards with different layouts in an attempt to address the carpal tunnel he had developed over nearly nine years of programming as a software developer. At one point he pulled out what is known as a 40% Planck ortholinear keyboard, which is what is pictured above at the beginning of this article.&lt;/p&gt;&lt;p&gt;At the time I first saw one of these I was a little perplexed as it appeared to have no number or symbol keys (and in the case of my mentor, there were nothing printed on the keys themselves, so it was even more perplexing). I was more interested in learning the basics of Vim at the time, and had shelved investigating these odd looking mysterious devices until I had a better grasp on text editing and the syntax of JavaScript. At one point, however, on parousing reddit, I discovered a subreddit devoted to these interesting devices, r/olkb.&lt;/p&gt;&lt;p&gt;I decided that, while I loved my current standard keyboard, that I was tired of reaching for keys, and that the 40% Planck ortholinear keyboard (OLKB) from &lt;a class="inline-link" href="https://drop.com/buy/planck-mechanical-keyboard" rel="noopener noreferrer" target="_blank"&gt;Drop&lt;/a&gt; was a worthy investment. After a short two day period, I had memorized the new layout and was flying faster across my Tiling Window Manager than I ever had before. It solidified and dare I say, finalized, my keyboard-centric workflow. A Tiling Window Manager, A Vim Text Editor, Vimium in The Browser, and an ortholinear keyboard. These things didn't render the computer mouse obsolete, but did indeed heavily enforce use of the keyboard to the point where there was far less context switching between applications, and far less reaching away from home row.&lt;/p&gt;&lt;p&gt;This brief article is an introduction to ortholinear keyboards. In it, I will cover why they are beneficial to anyone who spends a decent amount of time at their desktop computer, and the varying types available to anyone looking to invest in them.&lt;/p&gt;&lt;p&gt;As a brief disclaimer, I must say that no one has sponsored me for this article, and the brands mentioned are solely there as a reference in a truthful account of my limited, but particularly positive, experience with ortholinear keyboards.&lt;/p&gt;&lt;h2&gt;Standard Vs Ortholinear&lt;/h2&gt;&lt;p&gt;The Keyboard, as we know it today, has a &lt;a class="inline-link" href="https://en.wikipedia.org/wiki/Computer_keyboard#History" rel="noopener noreferrer" target="_blank"&gt;long history&lt;/a&gt;, originating with the invention of the &lt;a class="inline-link" href="https://en.wikipedia.org/wiki/Typewriter" rel="noopener noreferrer" target="_blank"&gt;Typewriter&lt;/a&gt;. The standard of staggering of the keys diagonally out from the space key originated with the Typewriter in order to accommodate the mechanical linkage of the switches. This staggering of the keys was adopted by the computer keyboard, and persists on the majority of keyboards to this day. Many of us, myself included, learn to type on these staggered layouts, and rarely, if ever, question this choice in design. I would posit, however, having experienced and enjoyed the use of an ortholinear keyboard for a short time now, that perhaps you should.&lt;/p&gt;&lt;p&gt;The orthogonal orientation and linear layout of the keys is what differentiates an ortholinear keyboard from the standard keyboards the majority of computer users are accustomed to. In orienting the keys in this way, the digits of the hand no longer "reach outwards and to the left" towards the periphery of the keyboard in order to access certain keys. Rather, the fingers "reach symmetrically both vertically and horizontally" which is a more natural movement when making small dextrous motions like typing. Additionally, ortholinear keyboards often incorporate other ergonomic design choices, such as reducing the overall size of the keyboard by utilizing other keys known as "layer" keys which allow the typist to access symbols and numbers through holding down what is akin to a second and third shift key. This allows for even less movement of the hands away from home row. There are also what is known as split keyboards, where the board itself is physically divided into two halves. Split keyboards are designed so that the typist may have their hands rest in a more natural position closer to the sides of their body (many of these split keyboards also incorporate the aforementioned design choices like ortholinear layout and the use of layer keys).&lt;/p&gt;&lt;h2&gt;A Brief Word On Layouts&lt;/h2&gt;&lt;p&gt;There are an extremely wide variety of keyboard designs in use today, but the majority of them use only one layout, the QWERTY layout, with COLEMAK and DVORAK being relatively unknown alternatives with their own niche user base. These layouts are designed to be more ergonomic and can theoretically be utilized more efficiently (faster) than QWERTY. I'll admit I have no experience utilizing these other layouts and as much as I love the keyboard-centric workflow, will probably not explore these other layouts for some time, if ever. This is due to the fact that I personally believe that having comfortable access to the entirity of the physical keyboard has a greater impact on typing speed than the layout itself. This is because the time taken moving your hands up and down and away from home row may have a greater effect on typing speed than the key layout. This isn't to say that in the hands of an experienced COLEMAK or DVORAK user, an ortholinear keyboard can't be used more efficiently than a typist using that same ortholinear keyboard with the QWERTY layout. Rather, I am simply expressing my opinion that this increase in words per minute is probably negligible when compared to the benefits of simply converting to an ortholinear, 60% or 40% keyboard. I'll admit that currently, I'd rather invest in a split ortholinear keyboaord than invest in learning one of these other layouts, but I am always open to debate this topic if you'd like to reach out to me, perhaps you can change my mind.&lt;/p&gt;&lt;h2&gt;Should You Use An OLKB?&lt;/h2&gt;&lt;p&gt;Obviously, my preference is to utilize an ortholinear keyboard, but just like with the previous topics I have covered, it is a matter of personal taste and workflow. The choice of keyboard, in particular, is a very personal one because unlike a piece of software, you are interacting with the keyboard physically, and very very often. Thusly what may be comfortable and enjoyable for me to use may not be so for you. That said, I do believe an investigation into utilizing some kind of specialized keyboard is worthwhile for any software developer or heavy desktop computer user. Programmers in particular spend an exorbitant amount of time in front of the computer and thusly investing in certain pieces of equipment that make that experience comfortable, efficient, and enjoyable, are paramount. This is not just limited to your choice of keyboard, but also office chair, computer screen, and other pieces of equipment. This may very well be even more important than choice of software, as a poor choice in equipment can, over time, result in poor posture and all the physical ailments that can result from that. Physically speaking, man was never meant to sit still hunched over a computer screen for hours on end. Thusly it is imperative that you ensure the least amount of harm to your body is incurred while you pursue your computer related endeavors.&lt;/p&gt;&lt;h1&gt;Conclusion&lt;/h1&gt;&lt;p&gt;Unlike my other articles, which often offer up an introductory tutorial on the subject, this article will not provide you with any such introduction, as the concepts surrounding the use of ortholinear keyboards and the use of layer keys is rather self explanatory. If you do choose to purchase and learn to use an ortholinear keyboard, know that it may take a few days to a week to reorient yourself to it, depending on frequency of use. Keep at it, you'll find the benefit of learning to use your new keyboard to be worthwhile, especially when combined with use of Vim and a Tiling Window Manager.&lt;/p&gt;&lt;p&gt;Although I'm sure that if you're intrigued by the subject, you'll do your own research, I have provided some images of various ortholinear keyboards below as a reference. Additionally I encourage you to watch &lt;a class="inline-link" href="https://www.youtube.com/watch?v=Ho_CFfdsmc8" rel="noopener noreferrer" target="_blank"&gt;this video&lt;/a&gt; from Ben Vallack, where he goes into depth covering the differences between standard and ortholinear keyboards. I should note that I have no personal or professional affiliation with Ben Vallack, but I've thoroughly enjoyed Ben's videos for some time now, and I feel like he covers this subject very well.&lt;/p&gt;&lt;figure&gt;&lt;img alt="A Minimaliist Split OLKB" cite="https://commons.wikimedia.org/wiki/File:Miniaxe_keyboards_(32355026078).jpg?useskin=vector" class="img-image" loading="lazy" src="../assets/images/img/olkb_01.webp" title="A Minimaliist Split OLKB"&gt;&lt;/figure&gt;&lt;figcaption&gt;A Minimalist Split OLKB with multiple layer keys&lt;/figcaption&gt;&lt;figure&gt;&lt;img alt="An Ergodox Split OLKB" cite="https://commons.wikimedia.org/wiki/File:Ergodox_(15322160951).jpg?useskin=vector" class="img-image" loading="lazy" src="../assets/images/img/olkb_02.webp" title="An Ergodox Split OLKB"&gt;&lt;/figure&gt;&lt;figcaption&gt;An Ergodox Split OLKB&lt;/figcaption&gt;&lt;figure&gt;&lt;img alt="An Miniaxe 40% Split OLKB" cite="https://commons.wikimedia.org/wiki/File:2018_Bay_Area_Mechanical_Keyboard_Meetup_(45223405154).jpg?useskin=vector" class="img-image" loading="lazy" src="../assets/images/img/olkb_03.webp" title="An Miniaxe 40% Split OLKB"&gt;&lt;/figure&gt;&lt;figcaption&gt;A Miniaxe 40% Split OLKB&lt;/figcaption&gt;&lt;br&gt;&lt;/article&gt;</description>
			<guid isPermaLink="false">https://brianhayes.dev/blog/espanso.html</guid>
			<pubDate>Sun, 18 Dec 2022 00:00:00 +0000</pubDate>
		</item>
<item>
			<title>The Keys That Bind</title>
			<link>https://brianhayes.dev/blog/the_keys_that_bind</link>
			<description>&lt;article class="demo-button"&gt;&lt;h1&gt;Introduction&lt;/h1&gt;&lt;p&gt;When one first approaches the world of computers, their first interaction is with some kind of graphical user interface, commonly termed as a "GUI." This interface is what is termed as a "Desktop Environment" or "DE" for short. A common Desktop Environent's primary form of interaction is based around the utilization of the computer mouse, although, to varying degrees, can be modified to be more oriented towards a keyboard-based interface.&lt;/p&gt;&lt;p&gt;Less familiar to the general public is a piece of software known as the Tiling Window Manager, a much more basic, but possibly more efficient, GUI that is heavily based on the utilization of keyboard interactions from the user. Indeed, much like the Vim Text Editor, a Tiling Window Manager so heavily discourages the use of Mouse Interactions, that an uninitiated user can find themselves presented with an environment where attempts at using the computer mouse results in no feedback at all (i.e., clicking the mouse does nothing by default). At first glance this may seem as a negative, but with the incorporation of more and more keyboard-encouraged interactions with your various pieces of software, one finds that their efficiency utilizing their computer increases, and perhaps also their productivity.&lt;/p&gt;&lt;h2&gt;What's A Desktop Environment?&lt;/h2&gt;&lt;p&gt;Prior to the advent of computer screens, all visual output from the computer was generally reserved to reading out lengthy printed pages via a line printer, while computer screens were reserved for keeping track of the status of the programs themselves.&lt;/p&gt;&lt;p&gt;The average modern desktop or laptop computer user finds themselves interacting with their Operating System via a Desktop Environment, clicking on icons via their mouse, scrolling articles in the Google Chrome Browser, perhaps typing a bit here and there when they have to perform a search query, or perhaps even typing a decent amount when they have to write an extensive document of some kind.&lt;/p&gt;&lt;p&gt;The ability to type fast, maneuver between applications, context switch between different applications, and perhaps most importantly, the ability to make concise logical decisions, all play a role in how quickly a project is completed. Due to the vast amount of tools we have as modern computer users, and the multitude of ways of thinking and approaching a given task, there is, to put it simply, rarely a "one size fits all" workflow.&lt;/p&gt;&lt;p&gt;The modern Desktop Environment found on Microsoft Windows is the most popular interface with which the average desktop computer user interacts. This is due mainly to the fact that they (the users) are unaware that there are alternatives (or that these alternatives are worth investigating). Even beginner programmers rarely take the time to investigate alternative Desktop Environments, limiting themselves to either working on Windows or MacOs and accepting the default keybindings and workflow instilled in them by the designers and developers of that Desktop Environment. They may investigate what kind of text editors are available to them, although this also is becoming increasingly rare as the majority of beginner programmers reach for VS Code and don't look into what alternatives are out there. This is somewhat unfortunate, as by taking the time to investigate these alternative tools, you may very well find more optimal solutions that better coordinate with your particular workflow. This article is to give you a brief introduction to how the Tiling Window Manager can play into a keyboard-centric workflow.&lt;/p&gt;&lt;h2&gt;The Keyboard-Centric Workflow&lt;/h2&gt;&lt;p&gt;There have been few articles written on the keyboard-centric workflow. The subject is the realm mainly focused on by productivity enthusiasts and computer programmers (perhaps also the occasional stenographer). I have touched briefly on the concepts of the keyboard-centric workflow in my article on The Vim Text Editor, but will spend more time elaborating on the subject here.&lt;/p&gt;&lt;p&gt;I have always enjoyed the sensation of typing from an early age when I first sat down at a keyboard. In high school and especially college, I took the time to learn some of the classic keyboard shortcuts present in nearly every application. The knowledge of these shortcuts allowed me to navigate more quickly throughout applications, edit text more quickly, and generally work with the computer much faster than others. In short, I became what is known colloquially as a "power user".&lt;/p&gt;&lt;p&gt;It is intriguing to me, having now used Linux for a little over two years, to come to understand that the subject of keyboard shortcuts, or "keybindings," is a point of divergence within the varying philosophies amongst the developers of the major Operating Systems and their Desktop Environment Designs. Within Microsoft Windows and MacOs, one is heavily restricted to utilizing their specific keybindings. The standardization of keybindings, I'll admit, is somewhat essential so that when a user sits down at a colleague's computer, they are not completely lost as to which keys do what, as they are the same across all machines. Unix-like Operating Systems and their many Desktop Environments operate on the general philosophy that user freedom, and by proxy, customization options, is paramount. Thusly anyone operating a Linux or BSD based Operating System today is capable of setting up their own custom keybindings to their liking on their personal machines. This does make working from machine to machine difficult in terms of cohesion when working on a team, but by the same token, this freedom allows for a customizable work environment that is specific to its user. It is in my opinion that this is preferable as it allows the user the freedom to customize their Desktop Environment to their unique and particular workflow, which should, in theory, mesh well with their own personal thought process and problem solving techniques.&lt;/p&gt;&lt;p&gt;Obviously, my preferences in Desktop Environment Design are geared towards creating a personalized keyboard-centric workflow that is unique to the regular user of that particular machine. The remainder of this article will focus on transitioning from a mouse-centric orientation with your computer towards a more keyboard-centric one, with the end goal of installing a Tiling Window Manager on Linux and the introducing the basics of utilizing it.&lt;/p&gt;&lt;h2&gt;On The Linux Desktop&lt;/h2&gt;&lt;p&gt;As you may have already ascertained if you have read my &lt;a aria-label="link" class="inline-link" href="https://brianhayes.dev/blog/why_use_linux.html" role="link"&gt;Why Use Linux&lt;/a&gt; article, Linux allows for a great deal of user freedom and choice. Linux Desktop Environments are no different. There are a wide variety of options for Desktop Environments, each with their own features, advantages, and disadvantages. I must confess I only have extensive experience in one of the Linux Desktop Environment, that being the XFCE desktop environment. If you are curious, the other popular Linux Desktop Environments currently include GNOME, KDE, Cinammon, and the LXQT Desktop environments. I cannot speak to the quality of these Desktop Environments, but would assume they have a similar, if not more, amount of customization options to the XFCE Desktop Environment.&lt;/p&gt;&lt;h2&gt;Customized Keybindings&lt;/h2&gt;&lt;p&gt;Most Desktop Environments on Linux have a GUI interface for changing the default keybindings, and I would encourage you to look into your particular Desktop Environment's interface for doing so. The Desktop Environment I utilized when I first started using Linux was XFCE, afterwards I then utilized the i3 Tiling Window Manager (and then the bspwm Tiling Window Manager, which is what I use currently). I will first go into how to adjust the keybindings in XFCE both via XFCE's native GUI application. After that, I will then go into how to utilize the i3 Tiling Window Manager, which is considered by many as a good introduction to Tiling Window Managers.&lt;/p&gt;&lt;p&gt;Firstly, let's start by configuring the keybindings in the XFCE Desktop Environment. Here we see the base install of Debian Linux with the default XFCE Desktop Environment installed:&lt;/p&gt;&lt;figure&gt;&lt;img alt="The Default Debian XFCE Desktop Environment" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/ss_debian_xfce.webp" title="The Default Debian XFCE Desktop Environment"&gt;&lt;/figure&gt;&lt;figcaption&gt;The Default Debian XFCE Desktop Environment&lt;/figcaption&gt;&lt;p&gt;The default terminal emulator in the XFCE Desktop Environment is called xfce4-terminal, thusly if we invoke it from the command line, another terminal emulator should spawn:&lt;/p&gt;&lt;figure&gt;&lt;img alt="A Picture of the XFCE Terminal Calling Another Instance of Itself" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/ss_debian_terminal_spawn.webp" title="A Picture of the XFCE Terminal Calling Another Instance of Itself"&gt;&lt;/figure&gt;&lt;figcaption&gt;The XFCE Terminal Calling Another XFCE Terminal&lt;/figcaption&gt;&lt;p&gt;And indeed it does. So now we know we can call xfce4-terminal by typing out that exact name into the command line, but what if I want to call it using a custom keybinding?&lt;/p&gt;&lt;p&gt;In XFCE's version of the start menu (located on the upper left hand side), you will find a menu item called "settings", where you will find the "keyboard" option. This is one of two GUI menus that allow for the modification of keybindings. Click on that so we can get started with one of the first recommended keybindings, that being of "super+enter", which we will bind to open our terminal emulator.&lt;/p&gt;&lt;figure&gt;&lt;img alt="XFCE menu navigation to change keyboard shortcuts" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/ss_debian_xfce_keybindings01.webp" title="XFCE menu navigation to change keyboard shortcuts"&gt;&lt;/figure&gt;&lt;figcaption&gt;XFCE Menu To Change Keyboard Shortcuts&lt;/figcaption&gt;&lt;p&gt;Once opened, Navigate to the Application Shortcuts sub-menu which should present to you some previously configured keybindings that are present by default. We are going to leave those alone and set up our own custom one by clicking on the "Add" button on the bottom left hand side of the menu. You will be presented with an empty input prompt asking for the command you will wish to invoke with this new keyboard shortcut. We want to open our terminal so let's enter the command 'xfce4-terminal':&lt;/p&gt;&lt;figure&gt;&lt;img alt="XFCE menu navigation to change keyboard shortcuts" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/ss_debian_xfce_keybindings02.webp" title="XFCE menu navigation to change keyboard shortcuts"&gt;&lt;/figure&gt;&lt;figcaption&gt;XFCE Menu To Change Keyboard Shortcuts&lt;/figcaption&gt;&lt;p&gt;After hitting the "OK" button, we will be presented with a menu that asks us to "Press any Key". Most keyboard shortcuts invoked utilize at at least two buttons so as to not accidentally invoking commands whenever typing, so let's choose a classic keybinding "super+enter". To the uninitiated the "super" key is the "windows" key in Microsoft Windows or the "options" key in MacOs. Once entered, the window prompt will disappear and you may notice the new keyboard command show up on the Application Shortcuts menu.&lt;/p&gt;&lt;figure&gt;&lt;img alt="XFCE menu navigation to change keyboard shortcuts" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/ss_debian_xfce_keybindings03.webp" title="XFCE menu navigation to change keyboard shortcuts"&gt;&lt;/figure&gt;&lt;figcaption&gt;XFCE Menu To Change Keyboard Shortcuts&lt;/figcaption&gt;&lt;p&gt;Let's test it out. go ahead and enter "super + enter":&lt;/p&gt;&lt;figure&gt;&lt;img alt="Demonstration of new Keybinding in XFCE" cite="author screenshot" class="gif-image" loading="lazy" src="../assets/images/gifs/ss_debian_keybinding_01.gif" title="Demonstration of new Keybinding in XFCE"&gt;&lt;/figure&gt;&lt;figcaption&gt;Spawning New Terminals Using Keybindings&lt;/figcaption&gt;&lt;p&gt;And indeed, we have created a useful keybinding that calls one of our most used applications. You can chain various keys to open applications, but usually the alt, ctrl, or super keys are utilized first. You can call any application that you can invoke on the terminal in this fashion, and usually these are GUI applications, like your browser, your file manager, your music player, etc.&lt;/p&gt;&lt;p&gt;I will now move onto our next subject, which covers the useful feature of Workspaces. The use of Workspaces is more important than Application-related keyboard shortcuts as they essentially maximize the use of space on your screen, allowing you to bring up an entirely new work area for you to fill with your various applications. Instead of moving application windows around and minimizing them when not in use, Workspaces allow you to simply keep those applications open at whatever screen size you like, hiding them from view temporarily, while you navigate to another workspace to do some other sort of work, and then navigate back to your previous workspace to utilize the applications you had been using earlier. The below gif demonstrates the use of Workspaces, which are changed using keybindings.&lt;/p&gt;&lt;figure&gt;&lt;img alt="Demonstration of Navigating Workspaces in XFCE" cite="author screenshot" class="gif-image" loading="lazy" src="../assets/images/gifs/ss_debian_keybinding_02.gif" title="Demonstration of Navigating Workspaces in XFCE"&gt;&lt;/figure&gt;&lt;figcaption&gt;Navigation of WorkSpaces in XFCE&lt;/figcaption&gt;&lt;p&gt;As you can see, each time I enter the super key followed by a number, it brings me to that numbered workspace. The change of the various applications is the change of the workspace, each one having different applications open. There are usually 10 workspaces available (numbered 1-10) in tiling window managers. XFCE allows for 12 (using by default ctrl + f1-12 keys). In case you were wondering if I modified the keys for these, I did. That is because the super+number keybinding is more traditional in tiling window managers for switching workspces. In XFCE, if you wish to change the workspace keybindings, navigate from the start menu to the settings &amp;gt; window manager sub-menu and select keyboard. You should then edit the keybindings labeled "Workspace" followed by the workspace number. This is basically the same process as editing keybindings for applications.&lt;/p&gt;&lt;p&gt;I could continue to explore the XFCE interface, but let us now move onto the subject of Tiling Window Managers with the introduction of the i3 window manager.&lt;/p&gt;&lt;h2&gt;The i3 Window Manager&lt;/h2&gt;&lt;p&gt;The installation of the i3 Tiling Window Manager is relatively straight forward, as it simply involves utilizing your native package manager to do so. It is highly likely that if you wish to install a tiling window manager for the first time, that you'd like to keep your current Desktop Environment in the event that you don't like using a Tiling Window Manager. This is completely understandable, and thus our tutorial here will cover how to install i3 alongside XFCE so that you can simply choose one or the other at login.&lt;/p&gt;&lt;p&gt;Let's get started with first installing the needed pieces of software. From your terminal emulator , install the i3 window manager, the i3status display bar, the picom compositor, and the dynamic menu, dmenu, and also the feh image viewer, for setting our background wallpaper.&lt;/p&gt;&lt;p&gt;On Arch Linux:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[~]$ sudo pacman -S i3 i3status picom dmenu feh&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;On Debian Linux:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[~]$ sudo apt-get install i3 i3status picom dmenu feh&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we can simply reboot our machine, upon login, before entering your name and password, be sure to select i3 from the wrench icon available at the top right hand corner of our login screen:&lt;/p&gt;&lt;figure&gt;&lt;img alt="Screenshot of i3 Selection in LightDm Menu" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/ss_debian_i3_01.webp" title="Screenshot of i3 Selection in LightDm Menu"&gt;&lt;/figure&gt;&lt;figcaption&gt;Select i3 From Your Login Screen&lt;/figcaption&gt;&lt;p&gt;Tiling Immediately you will be presented with a far more minimal set up than XFCE. You will be prompted if you'd like to generate a default configuration for i3, go ahead and choose "Yes" and hit enter.&lt;/p&gt;&lt;figure&gt;&lt;img alt="Screenshot of i3 Welcome Prompt" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/ss_debian_i3_02.webp" title="Screenshot of i3 Welcome Prompt"&gt;&lt;/figure&gt;&lt;figcaption&gt;Select "Yes" To Generate a Default Configuration&lt;/figcaption&gt;&lt;p&gt;Afterwards which you will be asked which "Mod" key you'd like as default, either the "super" or "alt" key. This key will be the default for chaining with other keys which when used in sequence will call various applications and change workspaces. I personally prefer the "super" key, so I'm going to choose the first option.&lt;/p&gt;&lt;figure&gt;&lt;img alt="Screenshot of i3 mod key choice prompt" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/ss_debian_i3_03.webp" title="Screenshot of i3 mod key choice prompt"&gt;&lt;/figure&gt;&lt;figcaption&gt;Select "Win" or "Alt" for your Mod Key&lt;/figcaption&gt;&lt;p&gt;After this choice is made and you hit enter, you'll be left with no further instruction, which can be jarring for beginners. Don't worry, remember the keybinding to call the terminal we made in XFCE? Well the reason I chose "super + enter," was because that is the same command in the default i3 configuration for calling the terminal. So you can do the same here in i3, calling the terminal with "super + enter". In fact, let's call a few terminals to see the default tiling behavior of i3, hit "super + enter" a couple of times:&lt;/p&gt;&lt;figure&gt;&lt;img alt="Gif showing i3 calling terminals" cite="author screenshot" class="gif-image" loading="lazy" src="../assets/images/gifs/ss_debian_i3_demo_01.gif" title="Gif showing i3 calling terminals"&gt;&lt;/figure&gt;&lt;figcaption&gt;You can call a Terminal using "super+enter" keybinding&lt;/figcaption&gt;&lt;p&gt;As you can see, a Tiling Window Manager "tiles" its windows in a cascading fashion, utilizing as much of the available screen space (known in some circles as screen "real estate"). So how do we navigate this? Well you can indeed use the mouse to select which of your open applications you'd like to utilize, but obvioiusly, this article being about the keyboard-centric workflow, we'll choose to navigate using our keyboard. Hiting "super+j" or "super+;"(super + semicolon) will navgate left and right respectively. Additionally, if we move a window to the bottom so that it is in a horizontal orientation using (super+shift+k), then we can demonstrate navigation up and down windows using (super+k) or (super+l)&lt;/p&gt;&lt;figure&gt;&lt;img alt="Gif showing basic navigation in i3" cite="author screenshot" class="gif-image" loading="lazy" src="../assets/images/gifs/ss_debian_i3_demo_02.gif" title="Gif showing basic navigation in i3"&gt;&lt;/figure&gt;&lt;figcaption&gt;Basic Navigation In i3 Tiling Window Manager&lt;/figcaption&gt;&lt;p&gt;Already you can see the elegant simplicity this kind of workflow enforces. Utilizing some simple keybindings, one can navigate from one window to the next, all the while entering commands into a terminal, text into a text editor, and search queries into a browser.&lt;/p&gt;&lt;p&gt;I won't be going into any kind of extensive coverage of customizing your i3 environment, suffice it to say that Tiling Window Managers in general are highly customizable. Instead, I will refer you to the excellent &lt;a class="inline-link" href="https://i3wm.org/docs/" rel="noopener noreferrer" target="_blank"&gt;i3 documentation&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;As an aside, you may have noticed I also had you install dmenu and feh alongside i3 and its status bar. This is because the default configuration of i3 has a built in call to dmenu (super+d). This application is an excellent piece of software that, like the terminal, can call any application simply by entering its name into its prompt. I recommend playing around with it and checking out The Arch Wiki's &lt;a class="inline-link" href="https://wiki.archlinux.org/title/Dmenu" rel="noopener noreferrer" target="_blank"&gt;documentation&lt;/a&gt; on dmenu. The image viewer, feh, has a nice feature of being able to set the background wallpaper to whatever image you'd like when i3 starts. In your ~/.config/i3/config file, simply enter on its own line the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[~]$ exec feh --bg-fill /path/to/your/preferred_image.png&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you'd like to restart i3 without having to log out, simply enter super+shift+r(if you make any adjustments to your i3 configuration file, you won't see the changes implemented until you reload i3 using this command or you log out of i3).&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;To log out of i3, enter super+shift+e. This will bring up a yellow message at the top of your screen asking if you'd like to exit i3, click 'Yes,' and it will return you to the login screen.&lt;/p&gt;&lt;h1&gt;Conclusion&lt;/h1&gt;&lt;p&gt;There is so much more I could cover regarding Tiling Window Managers and the keyboard-centric workflow, but I will leave you with this basic introduction on how to get started with creating your own version of it. While a classic Desktop Environment is fine for most, and will probably always be more popular than Tiling Window Managers, for those of you that have an affinity towards working on the keyboard (which, if you are invested in becoming more productive on the computer, you should), a Tiling Window Manager might be something worthwhile for you to investigate. Below I provide you with a short clip of my standard workflow (if you're wondering how to get transparency to work in the terminal like in this gif, you'll want to look into The Arch Wiki's &lt;a class="inline-link" href="https://wiki.archlinux.org/title/Picom" rel="noopener noreferrer" target="_blank"&gt;documentation&lt;/a&gt; on picom). To further emphasize the use of the keyboard, I have installed the &lt;a class="inline-link" href="https://addons.mozilla.org/en-US/firefox/addon/vimium-ff/" rel="noopener noreferrer" target="_blank"&gt;Vimium extension&lt;/a&gt; into the &lt;a class="inline-link" href="https://librewolf.net/" rel="noopener noreferrer" target="_blank"&gt;Librewolf browser&lt;/a&gt; to demonstrate further the possibilities of working almost completely without a mouse. Enjoy, and keep keybinding.&lt;/p&gt;&lt;figure&gt;&lt;img alt="Demo of a highly customized i3 setup" cite="author screenshot" class="gif-image" loading="lazy" src="../assets/images/gifs/ss_debian_i3_demo_03.gif" title="Demo of a highly customized i3 setup"&gt;&lt;/figure&gt;&lt;figcaption&gt;i3 can be customized to be beautiful and efficient&lt;/figcaption&gt;&lt;br&gt;&lt;/article&gt;</description>
			<guid isPermaLink="false">https://brianhayes.dev/blog/ortholinear_keyboards.html</guid>
			<pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate>
		</item>
<item>
			<title>The ReadMe</title>
			<link>https://brianhayes.dev/blog/the_readme</link>
			<description>&lt;article class="demo-button"&gt;&lt;h1&gt;Introduction&lt;/h1&gt;&lt;p&gt;Documentation in the world of software is an essential part of the development process. Without proper documentation both users and developers are given the monumental task of parsing out a project line by line in order to understand how to debug the project, contribute to the project, or indeed, even utilize the software itself.&lt;/p&gt;&lt;p&gt;There are many forms of documenting projects, be they man pages accessible via the terminal to official documentation provided by the developer hosted on their website. One essential type of documentation that a new software developer must become familiar with is the README.md file. If you have ever perused a properly maintained repository on Github or other hosting service websites, you have most certainly come across a README.md. The finished document looks something like this:&lt;/p&gt;&lt;figure&gt;&lt;img alt="A sample page of a readme" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/readme-pic-01.webp" title="A sample page of a readme"&gt;&lt;/figure&gt;&lt;figcaption&gt;A Sample README.md&lt;/figcaption&gt;&lt;h2&gt;The Basic Readme&lt;/h2&gt;&lt;p&gt;The README is a document that one can think of as being the entry point to learning about and using a piece of software. Oftentimes this document provides instructions on installation, basic usage, and configuration. Sometimes multiple READMEs are provided on more extensive projects to help developers extend, debug, and manage a piece of software.&lt;/p&gt;&lt;p&gt;Not including a README, even when working on a trivial or basic project, is considered poor etiquette, as having no README leaves any potential user or developer with absolutely no information about what lies within the project, and indicates that the project maintainer doesn't care about the project, or at least, doesn't care to provide documentation. Very simply, it is always a good idea to provide at least a basic README when creating a project.&lt;/p&gt;&lt;p&gt;Although a README can be written in plain text or even HTML, the markdown language has become the standard for writing READMEs, as it provides a quick way to create formatted text that is well presented to the reader. READMEs are traditionally capitalized so that the 'ls' command prioritizes its display, and the .md appended to the end of the README indicative that the document is written in markdown.&lt;/p&gt;&lt;h2&gt;The Markdown Language&lt;/h2&gt;&lt;p&gt;Anyone familiar with The HyperText Markup Language, commonly known as HTML, will find themselves comfortable working in Markdown, as many pieces of Markdown are interchangeable with classic HTML elements, just expressed differently.&lt;/p&gt;&lt;p&gt;In certain circumstances, the Markdown language is even more powerful than HTML, as it can very quickly represent tables, graphs, checkboxes, and other common presentation elements in a way that is easier to read and requires fewer typed characters to express them.&lt;/p&gt;&lt;p&gt;For the remainder of this blog post, I will cover how to create a standard README for a software project. While Markdown has many extensive features such as presentation graphs and tables, I will solely be covering the basics for the sake of brevity and this is only meant as an introduction. Should you desire to explore what other features the Markdown language has to offer, I advise you to take a look at the &lt;a class="inline-link" href="https://www.markdownguide.org/" rel="noopener noreferrer" target="_blank"&gt;official guide&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;Getting Started&lt;/h2&gt;&lt;p&gt;At the end of the day, Markdown is simply an extension upon a plain text document, so one can get started working in it right away. Navigate to the base of a project you'd like to write a README for (or just create a test directory), and let's create one from the command line using the touch command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[~]$ touch README.md&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next we'll open up our newly created README.md file in our favorite text editor and start documenting our project. I'll be using NeoVim for my examples, and will also be using an extension called &lt;a class="inline-link" href="https://github.com/iamcco/markdown-preview.nvim" rel="noopener noreferrer" target="_blank"&gt;markdown-preview&lt;/a&gt;. If you are reading this blog post and want to follow along in VS Code, there is equivalent functionality available for that editor as well in the form of different extensions.&lt;/p&gt;&lt;p&gt;Let's write out a header, with the title of our project. I'm going to call my project, "markdown_ex".&lt;/p&gt;&lt;figure&gt;&lt;img alt="a h1 header displayed in both neovim and the browser" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/readme-pic-02.webp" title="a h1 header displayed in both neovim and the browser"&gt;&lt;/figure&gt;&lt;figcaption&gt;An H1 header expressed in Markdown&lt;/figcaption&gt;&lt;p&gt;As you can see, a single hashtag "#" character is interpreted by Markdown as indicating the beginning of a header. This is equivalent to an h1 tag in HTML. Let's create some other headers as an example.&lt;/p&gt;&lt;figure&gt;&lt;img alt="a series of headers expressed in markdown" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/readme-pic-03.webp" title="a series of headers expressed in markdown"&gt;&lt;/figure&gt;&lt;figcaption&gt;A series of headers expressed in Markdown&lt;/figcaption&gt;&lt;p&gt;Now, what's nice about Markdown is at this point you can simply start typing out your documentation. Unlike in HTML, there is no need to encapsulate everything in paragraph tags, so working in Markdown becomes more akin to working in an extremely basic word processor. You can revert to using HTML elements if you'd like, but especially in this mentioned example, it is not necessary:&lt;/p&gt;&lt;figure&gt;&lt;img alt="a series of headers expressed in markdown" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/readme-pic-04.webp" title="a series of headers expressed in markdown"&gt;&lt;/figure&gt;&lt;figcaption&gt;No paragraph tags are necessary in Markdown&lt;/figcaption&gt;&lt;h2&gt;Stylizing Text&lt;/h2&gt;&lt;p&gt;Let's now explore some of the basic features that Markdown has to offer. Let's say we wish to stylize our text a little beyond just making headers. Well, we have many options at our disposal. Let's create some bold, italic, underline, and strike-through pieces of text:&lt;/p&gt;&lt;figure&gt;&lt;img alt="various stylizing of markdown text" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/readme-pic-05.webp" title="various stylizing of markdown text"&gt;&lt;/figure&gt;&lt;figcaption&gt;Bold, Italicize, Strike-through and Underline in Markdown&lt;/figcaption&gt;&lt;p&gt;Here we see the various syntax utilized for styling pieces of text in markdown. I'll cover briefly the basic syntax here:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;!-- README.md --&amp;gt;

**two stars creates bold text**
__two underscores also creates bold text__

*single star creates italicized text*
_single underscore also creates italicized text_

~~two tildes creates strikethrough text~~
&amp;lt;u&amp;gt;html style u tags creates underline text&amp;lt;/u&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Creating Lists&lt;/h2&gt;&lt;p&gt;As I mentioned earlier, the syntax of Markdown can be far nicer than HTML in many respects. A good example of this is creating ordered and unordered lists. In HTML, creating an unordered list looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;!-- index.html --&amp;gt;

&amp;lt;u&amp;gt;
    &amp;lt;li&amp;gt;My first item&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;My second item&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;My third item&amp;lt;/li&amp;gt;
&amp;lt;/u&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As opposed to in Markdown:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;!-- README.md --&amp;gt;

 - My first item
 - My second item
 - My third item
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The following picture demonstrates the simple creation of ordered and unordered lists in markdown:&lt;/p&gt;&lt;figure&gt;&lt;img alt="a demonstration of creating lists in markdown" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/readme-pic-06.webp" title="a demonstration of creating lists in markdown"&gt;&lt;/figure&gt;&lt;figcaption&gt;Creating Lists In Markdown Is Easy&lt;/figcaption&gt;&lt;h2&gt;Creating Links&lt;/h2&gt;&lt;p&gt;Markdown is especially easy on the eyes when it comes to creating links. In HTML, creating a basic link can be created like so:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;!-- index.html --&amp;gt;
&amp;lt;a href="https://www.example.com"&amp;gt;my example link&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The same can be accomplished in Markdown like so:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;!-- README.md --&amp;gt;
[my example link](https://www.example.com)&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Code Snippets&lt;/h2&gt;&lt;p&gt;The Markdown language is multifaceted, it can be utilized to document anything from scientific papers to simple blog posts and is often utilized in online forums. One of the most common usage for Markdown is code snippets, which can be expressed using backticks like so:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;!-- README.md --&amp;gt;
```console.log('nice code block!')```&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or Like so:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;!-- README.md --&amp;gt;
`console.log('nice code block!')`&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If, for example, you needed to present some basic JSON, you could do so very simply like so:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;!-- README.md --&amp;gt;

``
{
    "firstName": "John",
    "lastName": "Smith",
    "age": 25
}
``&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The following picture demonstrates the effect:&lt;/p&gt;&lt;figure&gt;&lt;img alt="demonstration of writing code blocks in markdown" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/readme-pic-07.webp" title="demonstration of writing code blocks in markdown"&gt;&lt;/figure&gt;&lt;figcaption&gt;Writing Code Blocks Is Essential For Software&lt;/figcaption&gt;&lt;h2&gt;Checkboxes&lt;/h2&gt;&lt;p&gt;One of my personal favorite uses of Markdown is to place a list of checkboxes towards the bottom of my READMEs. This usually is a list of various aspects of my software that need to be worked on, such as new features, bug fixes, and documentation.&lt;/p&gt;&lt;p&gt;Checkboxes can be instantiated like so, one is checked off, the other is not:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;!-- README.md --&amp;gt;

 - [x] This is a completed task
 - [ ] This task has yet to be done&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And here is an example Picture showing the results:&lt;/p&gt;&lt;figure&gt;&lt;img alt="demonstration of how to write checkboxes in markdown" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/readme-pic-08.webp" title="demonstration of how to write checkboxes in markdown"&gt;&lt;/figure&gt;&lt;figcaption&gt;Checkboxes in Markdown&lt;/figcaption&gt;&lt;h1&gt;Conclusion&lt;/h1&gt;&lt;p&gt;The capabilities of Markdown are vast. In addition to what has been covered here, one can create tables, graphs, and embed images/GIFs into Markdown files to further help document your projects.&lt;/p&gt;&lt;p&gt;A good README can often be the saving grace of a project. Even if a project is poorly designed or not well maintained, a good README can provide a general overview of a piece of software and help others navigate its use, configuration, and further development. Without a README, the potential user or developer is left solely with the code itself to determine everything about the project. Indeed, a project without a README is probably not worth investigating, unless the codebase is particularly small and even then, some form of introductory documentation would be highly encouraged.&lt;/p&gt;&lt;p&gt;As a beginning software developer, the README is one of your most important resources when learning about a new tool, or even referring back to one of your old projects. It is within your best interest to develop a good habit of writing READMEs and other forms documentation for your projects, so take the time to familiarize yourself with one of the most common forms of it, Markdown.&lt;/p&gt;&lt;p&gt;I do hope this has been helpful to you and provides you with a basic understanding of the Markdown language and how to utilize it for a basic README. Cheers and Happy Coding!&lt;/p&gt;&lt;/article&gt;</description>
			<guid isPermaLink="false">https://brianhayes.dev/blog/html_the_webs_skeleton.html</guid>
			<pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate>
		</item>
<item>
			<title>Why Use Linux</title>
			<link>https://brianhayes.dev/blog/why_use_linux</link>
			<description>&lt;article class="demo-button"&gt;&lt;h1&gt;Introduction&lt;/h1&gt;&lt;p&gt;If you have ever taken even a small amount of time to research the world of computers in any kind of capacity, you will have at one point or another heard about the Linux Operating System. There is a certain mystique surrounding Linux and Linux users to the uninitiated, as it is considered by many to be more "technically challenging," or, perhaps more derisively, "too complicated and time consuming for the average computer user." These criticisms indeed have their validity, but anything worth having in life never came easy...and Linux is no exception.&lt;/p&gt;&lt;p&gt;Much has been written on the subject of Linux, and this article, without a doubt, will be a simple reiteration of some of the arguments you may have heard or read when it comes to why you should use Linux, along with my own opinions on the subject. That said, should you be an aspiring web developer or computer programmer, please know that any of the popular operating systems are more than suitable to learning how to program. Be it Windows, MacOS, Linux, or BSD, nearly anyone can learn to program on any of these popular Operating Systems and their Desktop Software. I simply believe that Linux is the best Operating Systems to dive deep into learning about computers and to start programming in general.&lt;/p&gt;&lt;p&gt;This article is meant as a general introduction to Linux, and in order to field the question of "What is Linux?" to the uninitiated, it's first good to step back and briefly field the more broad question of "What is an Operating System?".&lt;/p&gt;&lt;h2&gt;What Is An Operating System?&lt;/h2&gt;&lt;p&gt;I cannot under-emphasize the fact that I am generally new to the subject of computers, and thusly will probably butcher this explanation. I will, however, do my best to paraphrase and offer up a layman's definition of what an Operating System is.&lt;/p&gt;&lt;p&gt;An Operating System is a piece of software that manages both the hardware and software on your computer. When you turn on your computer, the BIOS (Basic Input/Output System), a piece of firmware native to your motherboard, detects all hardware devices on your computer. Once all hardware devices have been registered, the BIOS then "looks" for a piece of software in memory where a program known as a "bootloader" is located. If found, it initializes this bootloader, which then, subsequently launches the "kernel". The kernel, at least for me, is a somewhat abstract concept that I oversimplify by describing it as being the "heart" of the Operating System. The kernel then launches the Operating System, which calls a series of programs, also known as processes or daemons (programs that run in the background), starting first with the "init" process. If all works well, you will be presented either with a Command Line Prompt, or a Desktop Environment.&lt;/p&gt;&lt;p&gt;The most popular Operating System for desktop computers is Microsoft Windows, the second most popular being Apple's MacOs, and Linux comes in at third (BSD is probably fourth, but well below even 1% of overall desktop usage). It is important to note, however, that the majority of server computers around the world run Linux. (It is also of interest to note that both Google's Chrome OS and the Android OS are also based on Linux). The fact that Linux has come to be the predominant and preferred Operating System for server computers is one of the reasons I personally believe that it is a good Operating System to start on for learning about computer systems in general, although it is only one of many reasons which I will go into more detail later on in this article.&lt;/p&gt;&lt;p&gt;The above explanation, to be clear, is a gross oversimplification, and I have no doubt that I am butchering it. For the sake of brevity, however, I will simply refer you to the following Wikipedia articles on the aforementioned topics should you desire a more in depth and succinct explanation on the topics:&lt;/p&gt;&lt;ul class="article-lists"&gt;&lt;li&gt;&lt;a class="article-outside-links" href="https://en.wikipedia.org/wiki/Linux" rel="noopener noreferrer" target="_blank"&gt;Wikipedia Article: Linux&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="article-outside-links" href="https://en.wikipedia.org/wiki/Operating_system" rel="noopener noreferrer" target="_blank"&gt;Wikipedia Article: Operating System&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="article-outside-links" href="https://en.wikipedia.org/wiki/BIOS" rel="noopener noreferrer" target="_blank"&gt;Wikipedia Article: BIOS&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="article-outside-links" href="https://en.wikipedia.org/wiki/Kernel_(operating_system)" rel="noopener noreferrer" target="_blank"&gt;Wikipedia Article: Kernel (operating system)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="article-outside-links" href="https://en.wikipedia.org/wiki/Server_computer#Operating_systems" rel="noopener noreferrer" target="_blank"&gt;Wikipedia Article: Server (computing)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;What is Linux?&lt;/h2&gt;&lt;p&gt;Now that the subject of Operating Systems has been given the briefest of overviews, let us now cover the subject of what exactly Linux is. As you probably have ascertained, Windows, MacOs, and Linux are all Operating Systems that the majority of computer users are familiar with from their interactions with their various devices, be it their Desktops, Laptops, Phones, and/or Tablets. Each of these Operating Systems comes with a suite of software, and as each Operating System has evolved over time, each has developed its own sort of ecosystem, an opinionated approach as to how to address the variety of problems that computer users and programmers encounter regularly.&lt;/p&gt;&lt;p&gt;At this point, you might be asking, "If Linux is so great, why haven't I seen it around?" Well, the truth is you have. As I have pointed out before, Linux runs the majority of servers, and thusly, whenever you interact with a website or an application online, it is highly likely that the services you are interacting with are running on a Linux server (not to mention the predominance of Android devices which also all run Linux). The more apt question might be, "If Linux is so great, why haven't I seen it on Desktop/Laptops more often?" This is a more nuanced question, and rightly deserves its own article, but I will briefly address it here.&lt;/p&gt;&lt;p&gt;Linux is not installed by default on most desktops/laptops. This is due to many factors, and there has been much discussion on why the "Linux Desktop" never took off. Indeed, "The Year of the Linux Desktop" is a meme within the Linux community, referring to an unspecified time in the future when The Linux Desktop will finally be realized as superior, and the majority of everyday computer users convert to Linux (something that is extremely unlikely to happen).&lt;/p&gt;&lt;p&gt;Additionally, and perhaps more to the point, is the simple fact that Linux, being an extremely customizable system, has a "build it from the ground up," aspect to it, and the main interface for Linux will always be the command line, which requires (sometimes extensive) technical knowledge. Indeed, just to install Linux, you must download what is known as an ISO file, burn it to a USB stick (or other installation media), make some adjustments in your motherboard's BIOS, and then follow the installation instructions for that particular Linux distribution (at the end of this article, a brief introduction to this process is documented).&lt;/p&gt;&lt;p&gt;Linux is a piece of Non-Proprietary Open Source Software under the GNU Public License (GPL). This means that it is free to run, study, share, and modify however you like (which is not the case when using Proprietary Operating Systems like Windows and MacOs). The fact that Linux is Free and Open Source Software (commonly termed FOSS), is one of the major reasons that Linux users at times can appear to be almost cultish or emphatic about the superiority of The Linux Operating System. The philosophy around FOSS can at times, in my experience, be seen as akin to a political or religious opinion, and is held strongly by many within the Linux community. This, however, is not one of the reasons I believe that it is worth your while to learn how to use The Linux Operating System, but this phenomenon is something to take note of. This is because, should you choose to install and use Linux, you will probably come across others within the Linux ecosystem who profess their love for Linux with an almost cultish fervor (I have been guilty of this myself).&lt;/p&gt;&lt;h2&gt;So Why Use Linux?&lt;/h2&gt;&lt;p&gt;At this point, I've covered the most basic aspects of what an Operating System is as well as what Linux is, but I have yet to get to the heart of why you should use Linux if you desire to know more about computers and computer programming. As I pointed out towards the beginning of this article, you can indeed learn programming on Windows and MacOs, and many people do. So what makes Linux better?&lt;/p&gt;&lt;p&gt;In one word: freedom.&lt;/p&gt;&lt;p&gt;Many who are advocates for &lt;a class="inline-link" href="https://en.wikipedia.org/wiki/Free_and_open-source_software" rel="noopener noreferrer" target="_blank"&gt;Free and Open Source Software (FOSS)&lt;/a&gt; are quick to point out that the "Free" in the title doesn't necessarily stand for "Free as in Free Beer" (i.e. Free as in No Charge), but rather that it stands for "Free as in Freedom." This has more to do with the fact that FOSS advocates are proponents for your freedom to modify the software however you see fit, which also includes your freedom to access the knowledge of how the software works. (As an interesting side note, there is a similar advocacy made by those among &lt;a class="inline-link" href="https://en.wikipedia.org/wiki/Right_to_repair" rel="noopener noreferrer" target="_blank"&gt;The Right To Repair Movement&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;Due to the fact that Linux is Free and Open Source Software, its entire source code is free to be run, studied, shared, and modified by its users however they see fit (at least on their personal machines). This is one of the major reasons to run Linux. While it takes (sometimes a great deal of) technical knowledge and a good deal of time to customize Linux, it is to your benefit to explore the Linux Operating System, as none of the source code is hidden from you, and you are free to modify the source code however you like (with both wonderful as well as disastrous effects depending on your intentions and skill level).&lt;/p&gt;&lt;p&gt;This isn't to say that I'm modifying my Linux kernel on my personal machine (I'm not a &lt;a class="article-outside-links" href="https://www.gentoo.org/" rel="noopener noreferrer" target="_blank"&gt;Gentoo&lt;/a&gt; user), but rather that the knowledge is freely available for me to investigate, and this transparency is reason enough for me to use it.&lt;/p&gt;&lt;p&gt;That said, I know for even the most technically minded user, this philosophical treatise on FOSS is not a good enough reason to abandon their Windows or MacOs desktop machine and embrace Linux. For most of us looking to become more computer savvy, we want software that simply works, and works well. Luckily for the sake of my argument, Linux is one of the best examples of this.&lt;/p&gt;&lt;p&gt;Towards the end of this article I will be going over how to install Linux, but I want to briefly touch on what one gains from even just this basic tutorial. Let us think on what happens to the average computer user who wakes up one day to discover their Windows or MacOs machine has stopped working (they are presented with the dreaded blue screen or black screen of death).&lt;/p&gt;&lt;p&gt;The average user may actually just throw away the machine without even thinking twice. They have money to burn and don't care about the environmental cost of chucking an electronic device. Others, who are a bit more budget conscious (or environmentally conscious), will take it into a computer repair service like The Geek Squad. If their Operating System is Windows, and the Operating System is irreparable (but the hardware is still functioning),the repair service technician will likely simply download the Windows ISO, burn it to a USB stick, and reinstall Windows (hopefully after backing up what they can and informing the customer). Of course, they will charge a modest fee for this, but the computer will be operating once again and the customer didn't have to do any research or work to do so, they just had to shell out a few bucks. Note that this is the same simple technique that is utilized to install Linux at the end of this article. By simply following the tutorial, you have gained a small piece of knowledge on how computers work and learned how to install an Operating System should your current one be somehow corrupted.&lt;/p&gt;&lt;p&gt;Now, there is an obvious advantage to going to The Geek Squad and &lt;em&gt;not&lt;/em&gt; learning how to reinstall your Operating System. For one thing, you save time (sometimes a lot of time). Time is a limited and invaluable resource and I will not go into the obviously subjective question of how one should best spend their time. Sufficient to say that when it comes to most computer users, they will not wish to spend their time learning the ins and outs of their computers... but what about you?&lt;/p&gt;&lt;p&gt;If you are a software developer, web developer, data scientist, and/or systems administrator, then it is in my strong opinion that it is worth your time to learn how to utilize The Linux Operating System, and yes, on your &lt;em&gt;Desktop/Laptop!&lt;/em&gt; Building your home Linux computer from the ground up is an experience that will give you (at least a small) insight into the complicated inner workings of your hardware and software and how they interact with one another. Once installed, the base Linux system is customizable to a degree that dwarfs the customizability of Windows and MacOs. The act of customizing your Linux machine often involves configuring your chosen suite of software (sometimes from the source code itself), and slowly but surely, over repeatedly reviewing lines of code and configuration files, you will begin to understand on a slightly deeper level how it all works.&lt;/p&gt;&lt;p&gt;This is a contentious opinion of mine, and there are legitimate arguments as to why one should simply utilize MacOs or Windows when first learning about computers in depth, and I'm not necessarily opposed to this argument. Rather, I am simply advocating that if you are going to learn about computers, then learning how to utilize the Linux Operating System is one of the best investments of your time you can make, as even in customizing your Linux machine, you will learn a decent amount about the inner workings of the software.&lt;/p&gt;&lt;p&gt;This isn't to say that installing and using Linux has somehow given me a knowledge and insight into how the entirety of every piece of software that I utilize works (that would probably take a lifetime). I can honestly say, however, the amount of knowledge I've gained over the past two and a half years while ascertaining how to utilize The Linux Operating System has been vast, and I continue to learn more and more every day. The practice of reading and re-reading of documentation, the in depth discussions on various computer forums, the investigating of how to interface with a particular API, the interacting with the software itself, and the act of "getting your hands dirty" have all added up to the cultivation of a state of mind that is highly accustomed to learning any piece of software, and that mindset grew from my initial interest in understanding The Linux Operating System.&lt;/p&gt;&lt;h2&gt;Where To Get Started&lt;/h2&gt;&lt;p&gt;Before I cover how to install Linux, I'd like to take a brief moment to cover Linux Distributions, colloquially known in the Linux Community as "distros". Earlier in this article, I mentioned multiple times that Linux is an extremely customizable Operating System. This extreme customizability has led to the development of a multitude of Linux "Distributions," which one can think of as different "flavors" of Linux. To the uninitiated this immediately can become overwhelming. As soon as you've decided to use Linux, if you were to turn to the online community and ask "Which distribution should I start with?," you might very well be bombarded with a myriad of answers. Indeed, if you look at the &lt;a class="inline-link" href="https://en.wikipedia.org/wiki/List_of_Linux_distributions" rel="noopener noreferrer" target="_blank"&gt;wikipedia article&lt;/a&gt; on the subject, you'll see how vast the world of Linux distributions is.&lt;/p&gt;&lt;p&gt;The topic of Linux distributions is a subject on its own, and your choice of Linux distribution is a personal one (very much like the choice to use Linux itself). I will simply point to certain distributions that are generally recommended for beginners and provide you with a brief tutorial on how to install Linux Mint (one of the more popular "beginner friendly" distros). Here is a brief list of distributions I recommend for beginners:&lt;/p&gt;&lt;ul class="article-lists"&gt;&lt;li&gt;&lt;a class="article-outside-links" href="https://liniuxmint.com/" rel="noopener noreferrer" target="_blank"&gt;Linux Mint&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="article-outside-links" href="https://ubuntu.com/" rel="noopener noreferrer" target="_blank"&gt;Ubuntu Linux&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="article-outside-links" href="https://mxlinux.org/" rel="noopener noreferrer" target="_blank"&gt;MX Linux&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="article-outside-links" href="https://elementary.io/" rel="noopener noreferrer" target="_blank"&gt;Elementary OS&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="article-outside-links" href="https://endeavouros.com/" rel="noopener noreferrer" target="_blank"&gt;Endeavor OS&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If you are curious as to which Linux Distribution I run on my personal machine at home, it is &lt;a class="inline-link" href="https://artixlinux.org/" rel="noopener noreferrer" target="_blank"&gt;Artix Linux&lt;/a&gt;, but I don't recommend it for beginners.&lt;/p&gt;&lt;p&gt;Once you have chosen which Linux Distribution you'd like to try, be sure to read the documentation on its installation thoroughly. You will first need a working computer, an installation media (a usb stick has become standard for this), and a piece of software to burn the Linux ISO to the installation media (the easiest to use on Windows and MacOs is &lt;a class="inline-link" href="https://www.balena.io/etcher" rel="noopener noreferrer" target="_blank"&gt;Balena Etcher&lt;/a&gt;, although &lt;a class="article-outside-links" href="https://rufus.ie/en/" rel="noopener noreferrer" target="_blank"&gt;Rufus&lt;/a&gt; on Windows is also a fine option).&lt;/p&gt;&lt;h2&gt;Installing Linux&lt;/h2&gt;&lt;p&gt;This is just a brief overview of installing Linux Mint, while you can follow along here, I'd recommend reading &lt;a class="inline-link" href="https://linuxmint-installation-guide.readthedocs.io/en/latest/" rel="noopener noreferrer" target="_blank"&gt;Linux Mint's Installation Guide&lt;/a&gt;, as it gives much better and in depth instruction than I provide here. Please note that these installation instructions will remove your old Operating System and all files, software, and directories, so please back up your files prior to installation. While it is rare that your computer will be unable to run Linux, it does occassionally happen, so do some research on your particular hardware and its compatibility with Linux prior to making the attempt.&lt;/p&gt;&lt;p&gt;The first step is probably the easiest, simply download the ISO:&lt;/p&gt;&lt;ul class="article-lists"&gt;&lt;li&gt;&lt;a class="article-outside-links" href="https://linuxmint.com/download.php" rel="noopener noreferrer" target="_blank"&gt;Download Linux Mint&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The options you are presented with are Desktop Environments. Each one is slightly different, and each option deserves its own research, but the Cinnamon Edition is Linux Mint's flagship Desktop Environment and it is the one you will be downloading and installing if you choose to follow along with this tutorial.&lt;/p&gt;&lt;p&gt;Once you have downloaded the ISO file. You're going to need to burn the file to a usb drive with enough storage capacity for the file (roughly 2.4GB). You'll also need a piece of specialized software to burn it. For this tutorial we will use &lt;a class="inline-link" href="https://www.balena.io/etcher" rel="noopener noreferrer" target="_blank"&gt;Balena Etcher&lt;/a&gt;:&lt;/p&gt;&lt;p&gt;Etcher is very easy to use, simply insert your usb stick into one of your computer's usb ports, open up the Etcher application, and follow its three step process. First click on "Select image", navigate to and select the ISO file within the presented File Manager. Then do the same for "Select drive" (the usb device). Lastly simply hit "Flash!" and wait for the image to burn (this could take a while depending on your hardware).&lt;/p&gt;&lt;figure&gt;&lt;img alt="A gif showing the basic usage of Balena Etcher" cite="author screenshot" class="gif-image" loading="lazy" src="../assets/images/gifs/etcher.gif" title="A gif showing the basic usage of Balena Etcher"&gt;&lt;/figure&gt;&lt;figcaption&gt;Basic Usage of Balena Etcher&lt;/figcaption&gt;&lt;p&gt;Once done your installation media should have the ISO image burned onto it. Inspecting the contents of the usb-drive should reflect this change. &lt;em&gt;Keep the usb stick inserted into your computer&lt;/em&gt; and restart.&lt;/p&gt;&lt;p&gt;As your computer restarts, you will usually see an introduction screen from your Motherboard manufacturer, when you see this introduction screen show up, quickly and repeatedly hit either the F2 or F11 key to enter the BIOS settings (if this doesn't work research your motherboard manufacturer, as it is usually one of these two keys). If installing on a Mac, keep your finger pressed on the Alt or Option key after hearing the boot sound.&lt;/p&gt;&lt;figure&gt;&lt;img alt="An example picture of an ASUS BIOS Menu" cite="https://commons.wikimedia.org/wiki/File:Bios_asus.jpg?useskin=vector" class="img-image" loading="lazy" src="../assets/images/img/bios.webp" title="An example picture of an ASUS BIOS Menu"&gt;&lt;/figure&gt;&lt;figcaption&gt;A Modern BIOS Menu&lt;/figcaption&gt;&lt;p&gt;Once in the BIOS menu, you'll need to change the Boot Order so that your computer boots from the USB. To do this, locate and select the "Boot" Submenu.&lt;/p&gt;&lt;p&gt;Once you have located the "Boot" submenu, locate the option labeled "Boot Priority". Under this option you should find a list of devices one of which will start with USB, which is more than likely your installation media. Re-order the options so that the USB option is on top.&lt;/p&gt;&lt;h2&gt;A Word On Secure Boot&lt;/h2&gt;&lt;p&gt;Some Linux Distriutions, in order to boot properly, will need you to disable the Secure Boot Setting in your BIOS. Please do your own research regarding this, but I have personally always disabled Secure Boot when installing Linux, and have determined it is a general prerequisite prior to installation. I briefly cover how to do so here, followed by a guide:&lt;/p&gt;&lt;p&gt;Secure Boot is usually found under a section in your BIOS menu called "Security". From there select "Secure Boot" and the drop down menu should have an option labeled "Disable." Select this option.&lt;/p&gt;&lt;ul class="article-lists"&gt;&lt;li&gt;&lt;a class="article-outside-links" href="https://www.chippiko.com/disable-secure-boot" rel="noopener noreferrer" target="_blank"&gt;A Guide to Disabling Secure Boot with Pictures&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Once you have disabled secure boot and re-ordered the bootable devices in your BIOS, go ahead and Save &amp;amp; Exit. The computer will once again reboot, and with any luck you will be presented with the Linux Bootloader:&lt;/p&gt;&lt;figure&gt;&lt;img alt="A Picture of the GRUB Bootloader menu" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/grub.webp" title="A Picture of the GRUB Bootloader menu"&gt;&lt;/figure&gt;&lt;figcaption&gt;The GRUB Bootloader&lt;/figcaption&gt;&lt;p&gt;Shortly after this you will be presented with Linux Mint's "live session" or "live environment." This is indeed the desktop environment, but you have yet to overwrite your previous Operating System, as the installation is not yet complete. &lt;em&gt;Do NOT remove the USB stick&lt;/em&gt;, as the live session is running from the USB directly. If you'd prefer to explore the Linux environment prior to installing it, please do so at this point if you are unsure about removing your previous Operating System and installing Linux. Most Linux Distributions come with a suite of software for you to play around and experiment with.&lt;/p&gt;&lt;figure&gt;&lt;img alt="A Picture of Linux Mint's Live Desktop Environment" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/live-environment.webp" title="A Picture of Linux Mint's Live Desktop Environment"&gt;&lt;/figure&gt;&lt;figcaption&gt;Linux Mint's Live Desktop Environment (Cinnamon Edition)&lt;/figcaption&gt;&lt;p&gt;If all is to your liking, and you're ready to install Linux and remove your previous Operating System, then continue with the next step:&lt;/p&gt;&lt;p&gt;Select The Install Linux Mint option with the round CD icon on the Desktop. This will open up a menu that will walk you through the process, which I will not go into detail here, but generally involves setting up your internet connection, keyboard settings, timezone/locale, username, password and root password. Once you have filled out all form fields and hit "Install," the installation process will begin (this process might take a while).&lt;/p&gt;&lt;figure&gt;&lt;img alt="A Picture of Linux Mint Install Menu" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/mint_install.webp" title="A Picture of Linux Mint Install Menu"&gt;&lt;/figure&gt;&lt;figcaption&gt;A Picture of Linux Mint Install Menu&lt;/figcaption&gt;&lt;p&gt;Once finished, Restart your computer and remove the USB installation media.&lt;/p&gt;&lt;p&gt;If all went well, you will be presented with a login screen with your username already filled out. Enter your recently created password to log in.&lt;/p&gt;&lt;figure&gt;&lt;img alt="A Picture of The Linux Mint Login Screen" cite="author screenshot" class="img-image" loading="lazy" src="../assets/images/screenshots/mint_login.webp" title="A Picture of The Linux Mint Login Screen"&gt;&lt;/figure&gt;&lt;figcaption&gt;If All Went Well, You Should See A Login Screen&lt;/figcaption&gt;&lt;p&gt;Once logged in, you should see the Linux Mint Cinnamon Desktop Environment, which is now running natively on your hardware. Congratulations! You have successfully installed Linux!&lt;/p&gt;&lt;h2&gt;On Updating&lt;/h2&gt;&lt;p&gt;I will complete this article more or less here with one last bit of advice. Utilizing Linux generally involves interacting with the terminal (at least occassionally for casual users). Unlike Windows or MacOs, there are no automatic updates, you choose when you wish to update your software. Upon initial installation, it is always recommended to update your software. You can do this by navigating to the terminal application from your Launch Menu (located on the bottom left hand side of your desktop).&lt;/p&gt;&lt;p&gt;Open up the Terminal and enter the following command to update your newly installed Linux Operating System:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#bash shell
[~]$ sudo apt update &amp;amp;&amp;amp; sudo apt upgrade&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You will be asked for the sudo password, which is the same as the password you used to log in. Once you have entered your password, the apt package manager will query the Linux Mint Repositories, checking what software is out of date. It will then present you with a list of which pieces of software (packages) are out of date and ask you if you'd like to udpate them, enter "y" for yes, and wait for the installation process to complete. With the exception of certain pieces of major software, like the kernel, you do not need to reboot your system to use this newly updated software, it is available to use immediately.&lt;/p&gt;&lt;h1&gt;Conclusion&lt;/h1&gt;&lt;p&gt;Thanks for taking the time to read this somewhat lengthy article. Hopefully I've instilled in you an interest and desire to use The Linux Operating System. I have only been using Linux on the desktop for about two and a half years now, but have learned so much in that brief period of time. I truly do believe that if you wish to get involved in any tech-related field that at least becoming familiar with Linux (if not using it on a daily basis), is essential. If you followed along and installed Linux Mint, welcome to the Linux Community! Should you have any questions/comments, please feel free to reach out to me! You can also field many questions over at &lt;a class="inline-link" href="https://www.linuxquestions.org/questions/" rel="noopener noreferrer" target="_blank"&gt;The Linux Questions Forums&lt;/a&gt;.&lt;/p&gt;&lt;/article&gt;</description>
			<guid isPermaLink="false">https://brianhayes.dev/blog/musings_on_vim.html</guid>
			<pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate>
		</item>
	</channel>
</rss>
