doctype html
html(lang = "en")
    head
        title brianhayes.dev
        meta(charset='UTF-8')
        meta(name='viewport' content='width=device-width, initial-scale=1')
        meta(name="robots" content="follow, index, max-snippet:-1, max-image-preview:large")
        meta(name='description' content='A simple blog written by a Web Developer, for Web Developers. Covering Basics of HTML, CSS, JavaScript, and much more, including Linux and other subjects related to technology.')
        script(src="../toggle-temp.js")
        link(rel="icon" type="image/x-icon" href="../assets/icons/favicon.png")
        link(rel='icon' type='application/rss+xml' title='RSS Feed' href='../assets/feed.rss')
        link(rel='stylesheet' type='text/css' href='../css/style.css')
        link(rel="preload" href="../css/style.css" as="style" onload="this.onload=null;this.rel='stylesheet'")
        noscript
            link(rel="stylesheet" href="../css/style.css")
    body
        nav
            ul.nav-menu(role="menu")
                li.nav-items(role="menuitem")
                    a.icons#contact(aria-label="email" role="menuitem" href="mailto: brianhayes.dev@protonmail.com") contact
                li.nav-items(role="menuitem")
                    a.icons#folio(aria-label="folio" role="navigation" href="../folio.html") folio
                li.nav-items(role="menuitem")
                    a.icons#home(aria-label="home" role="navigation" href="../index.html") home
                li.nav-items(role="menuitem")
                    a.icons#blog(aria-label="blog" role="navigation" href="/blog/") blog
                li.nav-items(role="menuitem")
                    a.icons#rss(aria-label="rss" role="menuitem" href="../assets/feed.rss") rss
        div.nav-division
        div.nav-text
            ul.nav-text-menu(role="menu")
                li.nav-text-items(role="menubar")
                    div.nav-text-item#text-contact(aria-label="email" role="menuitem") email
                li.nav-text-items(role="menubar")
                    div.nav-text-item#text-folio(aria-label="folio-text" role="menuitem") folio
                li.nav-text-items(role="menubar")
                    div.nav-text-item#text-home(aria-label="home-text" role="menuitem") home
                li.nav-text-items(role="menubar")
                    div.nav-text-item#text-blog(aria-label="blog-text" role="menuitem") blog
                li.nav-text-items(role="menubar")
                    div.nav-text-item#text-rss(aria-label="rss-text" role="menuitem") rss 
        div.container.fadein
            div.arrows
                a.icons#left-arrow(aria-label="previous" role="navigation" href="")
                a.icons#right-arrow(aria-label="next" role="navigation" href="")
            div.arrows-text
                span.arrow-text#text-left-arrow prev
                span.arrow-text#text-right-arrow next
            main.title
                div.title-card
                    header CSS
                    div.subtitle The Web's Makeup
                    div.aside Published on
                        time(datetime="2023-06-22") 2023-06-22
                picture(role="img")
                    source(media="(min-width: 62.5em)" srcset="../assets/images/intro_images/makeup_contouring_desktop.jpg")
                    source(media="(min-width: 37.5em)" srcset="../assets/images/intro_images/makeup_contouring_tablet.jpg")
                    img.intro-image(src="../assets/images/intro_images/makeup_contouring_mobile.jpg" alt="Makeup Contouring To Shape The Sketch Of The Face" title="Makeup Contouring To Shape The Sketch Of The Face" cite="https://commons.wikimedia.org/wiki/File:Beautiful-beauty-candid-1588928.jpg?useskin=vectork")
                figcaption Makeup Contouring
                blockquote(cite="https://www.goodreads.com/quotes/tag/style") &#8220Styles may change, details may come and go, but the broad demands of aesthetic judgement are permanent.&#8221
                    div.quote_author -Roger Scruton
            article.demo-button
                h1 Introduction
                p In my <a class="inline-link" aria-label="link to article, html the web's skeleton"  role="link" href="./html_the_webs_skeleton.html">previous article</a>, I attempted to give a general introduction to basics of The HyperText Markup Language (HTML) as well as The Document Object Model (DOM). To briefly review, HTML provides a general scaffolding onto which stylings (via Cascading Style Sheets) and interactivity (via JavaScript) can be utilized to render pages and applications on the Web. Having a basic understanding of HTML, and how the DOM renders and organizes HTML elements, is a necessary prerequisite to garnering further knowledge on how to style the web. This article, very much in the spirit of the previous, is meant as a general introduction to the basics of how to do said styling, using Cascading Style Sheets, more commonly known as CSS.
                h2 The Cascade
                p CSS, at its essence, is a <a class="inline-link" aria-label="link to wiki page on style sheet language" target="_blank" rel="noopener noreferrer" role="link" href="https://en.wikipedia.org/wiki/Style_sheet_language">style sheet language</a>, which when utilized by web developers or users of web pages/applications, allows for the selective styling of HTML elements. Through an algorithm native to the Web Browser known simply as the <a class="inline-link" aria-label="a link to an mdn article on the CSS cascade" target="_blank" rel="noopener noreferrer" role="link" href="https://developer.mozilla.org/en-US/docs/Web/CSS/Cascade">CSS Cascade</a>, CSS is used to color, style, and format elements within the HTML document based on a prerogative series of determinant rules that are based off of the browser's native user-agent and/or the web developer's authored stylesheets. 
                p The topics of the <a class="inline-link" aria-label="the wikipedia article on user-agent" target="_blank" rel="noopener noreferrer" role="link" href="https://en.wikipedia.org/wiki/User_agent">User-Agent</a> and the user-agent styles are separate subjects in their own right, but for both brevity and simplicity's sake, one can think of the user-agent styles as being the default stylings rendered by your browser when no author stylesheets are provided. This is why basic HTML documents are still rendered in a human readable fashion, even when no custom stylings are configured.
                p An entire blog post could be written regarding the topic of the CSS Cascade, but to be honest, the in depth understanding of the concept is not at all necessary to getting started with CSS. Nevertheless, I felt it was important to address it at least in part, as even basic knowledge of the CSS Cascade will eventually prove invaluable in understanding how CSS is rendered in the browser as one becomes more versed in designing web pages. In the following sections regarding Inline Styles and Author Stylesheets, how The CSS Cascade influences the rendering of the web page will hopefully become more apparent.
                h2 Inline Styles
                p The easiest way to demonstrate CSS basics is to build off of our previous knowledge on HTML. Let's use our previous article's basic HTML document as a starting point:
                pre
                    code &lt!--hello_world.html--&gt&#10&lt!DOCTYPE html&gt&#10&lthtml lang="en"&gt&#10  &lthead&gt&#10    &lttitle&gtMy Hello World Example&lt/title&gt&#10    &ltmeta charset="UTF-8" /&gt&#10    &ltmeta name="viewport" content="width=device-width, initial-scale=1" /&gt&#10    &ltlink href="css/style.css" rel="stylesheet" /&gt&#10  &lt/head&gt&#10  &ltbody&gt&#10    &ltmain&gt&#10      &ltarticle&gt&#10        &lth1&gtHello World!&lt/h1&gt&#10        &ltp&gt&#10        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod&#10        tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim&#10        veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea&#10        commodo consequat. Duis aute irure dolor in reprehenderit in voluptate&#10        velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint&#10        occaecat cupidatat non proident, sunt in culpa qui officia deserunt&#10        mollit anim id est laborum.&#10        &lt/p&gt&#10      &lt/article&gt&#10    &lt/main&gt&#10  &lt/body&gt&#10&lt/html&gt&#10
                p As you may recall, this is a very basic HTML document, with many HTML elements commonly seen in standard web pages. While the appearance of this document is rather bland, as it utilizes the default user-agent styles native to our web browser, we can start to change this default styling using CSS. To simply dive in, let's start by adding a style attribute to our <code class="inline-code">&lth1&gt</code> and <code class="inline-code">&ltp&gt</code> tags:
                pre
                    code &lt!--hello_world.html--&gt&#10&lth1 <b>style="text-decoration-line: underline"</b>&gtHello World!&lt/h1&gt&#10    &ltp <b>style="color: red"</b>&gt&#10    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod&#10    tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim&#10    veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea&#10    commodo consequat. Duis aute irure dolor in reprehenderit in voluptate&#10    velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint&#10    occaecat cupidatat non proident, sunt in culpa qui officia deserunt&#10    mollit anim id est laborum.&#10    &lt/p&gt&#10
                p If we then render this page in our browser, we will see our HTML page now has some additional stylings added:
                figure
                    img.img-image(src="../assets/images/screenshots/css_ss_01.webp" alt="A screenshot displaying the h1 tag with underline stylings and paragraph with red stylings" title="Inline CSS stylings applied to a basic HTML document" cite="author screenshot" loading="lazy")
                figcaption Underline and Color Stylings Applied Via Inline CSS
                p As you can see, applying the style attribute to the <code class="inline-code">&lth1&gt</code> and the <code class="inline-code">&ltp&gt</code> tags, and then inputting specific property/value text that CSS recognizes, visually changes the text of the targetted HTML elements (specifically underlining the text of the <code class="inline-code">&lth1&gt</code> tag and coloring the text of the <code class="inline-code">&ltp&gt</code> tag red). This is what is known as "inline-styles," which is appropriately named due to the CSS being defined directly in the HTML itself.
                p We will cover the properties specifically defined within this style attribute shortly. As you may imagine, this convention of defining CSS styles directly in the HTML document itself could quickly become cumbersome, as the more CSS properties you may wish to define, the rather lengthy (and possibly unreadable) your HTML document will be. This convention of defining inline styles is useful however, in understanding the CSS Cascade, but only when in comparison and contrasted with other aspects of it, like Author Stylesheets.
                h2 Author Stylesheets
                p The above markup code demonstrating inline-styles is an example of what is known as Author Styles. As the name implies, these are styles that are authored by a web developer or user, which changes the default stylings native to the browser's User-Agent. As mentioned previously, the practice of authoring syles directly in our HTML document via inline-styles, while useful, can quickly become cumbersome as more stylings are authored and applied. 
                p To ensure readability and organization of code, oftentimes styles are relegated to their own .css file, and then imported via the HTML <code class="inline-code">&ltstyle&gt</code> tag. You may have taken note of this tag in our example HTML document as one of the children elements within the <code class="inline-code">&lthead&gt</code> element:
                pre
                    code &lt!--hello_world.html--&gt&#10&lt!DOCTYPE html&gt&#10&lthtml lang="en"&gt&#10  &lthead&gt&#10    &lttitle&gtMy Hello World Example&lt/title&gt&#10    &ltmeta charset="UTF-8" /&gt&#10    &ltmeta name="viewport" content="width=device-width, initial-scale=1" /&gt&#10    <b>&ltlink href="css/style.css" rel="stylesheet" /&gt&#10</b>  &lt/head&gt&#10
                p Very essentially, this tag tells the browser to import the styling configurations within the style.css file, which is located within the css directory related to the current working directory. The "rel" attribute explicitly tells the browser that the relationship between this import and the HTML document  as a stylesheet. Let's now style our HTML document in a similar fashion as before when we exemplified the use of inline-styles, but now utilize this stylesheet. From the command line, make a directory called "css", and then create a file within that directory, called "style.css":
                pre
                    code #bash shell&#10[ ~]$ mkdir css && touch css/style.css
                p Now, open this style.css file in your text editor and input the filing CSS:
                pre
                    code /*style.css*/&#10&#10h1 {&#10  text-decoration-line:underline;&#10}&#10&#10p {&#10  color: red;&#10}
                p As you can see, this CSS is immediately more readable than when it was utilized as an inline-style directly within our HTML document. As in our article on HTML, let us now take a brief moment to analyze the anatomy of this very basic .css file.
                p As you may have guessed, the first line indicating the name of a file is also there to demonstrate the appropriate way to make comments in CSS. Encapsulated within a forward slash and asterix, and ending with an asterix followed by a forward slash, this line will not be rendered by the browser's CSS parser, but like all code comments, is useful for brief notes to developers about the code itself. 
                p The first element that we encounter is specifically the <code class="inline-code">h1</code> element, which is listed simply on its own line followed by an opening curly brace. The <code class="inline-code">h1</code> text is what is known as a CSS selector. As the name implies, this selector will "select" all instances of the <code class="inline-code">&lth1&gt</code> tag within our HTML document and apply the stylings that are encapsulated between the curly braces.
                p Within the curly braces, there is the text  "text-decoration-line", which is the CSS property that we, the web developer, are indicating we wish to change from its default value. The following specification, "underline", configures all instances of the <code class="inline-code">&lth1&gt</code> tag to have their inner text underlined. 
                p Together with the property, <code class="inline-code">text-decoration-line</code>, as well as the property value, <code class="inline-code">underline</code>, we the web developer have created what is known as a CSS "declaration". The following image, taken from the official <a class="inline-link" aria-label="a link to the MDN web documentation on CSS basics" target="_blank" rel="noopener noreferrer" role="link" href="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics">MDN web docs</a>, illustrates this concept for us visually:
                figure
                    img.img-image(src="../assets/images/img/css_css-declaration-small.webp" alt="a diagram demonstrating the basic structure of a CSS Author Declaration" title="css declaration diagram" cite="MDN Web Docs" loading="lazy")
                figcaption A Diagram Of A Basic CSS Declaration
                h2 Basic CSS Styling
                p The majority of CSS styling paradigms across the web reflects this general pattern of creating a CSS declaration, configuring various properties/values within the confines of their respective selectors. Let's continue styling the text within our example <code class="inline-code">&ltp&gt</code> tag with multiple property configurations within the same CSS declaration:
                pre
                    code /*style.css*/&#10&#10h1 {&#10  text-decoration-line: underline;&#10}&#10&#10p {&#10  color: red;&#10  font-size: 150%;&#10  font-weight: bold;&#10  margin-left: 16px;&#10}
                p If we then render these multiple style configurations in the browser, we can easily see the adjustments made to our <code class="inline-code">&ltp&gt</code> tag's text.
                figure
                    img.img-image(src="../assets/images/screenshots/css_ss_02.webp" alt="A screenshot demonstrating the styling changes to the p tag" title="A screenshot demonstrating CSS basics" cite="Author Screenshot" loading="lazy")
                figcaption The &ltp&gt Tag Is More Heavily Styled
                p Each <code class="inline-code">&ltp&gt</code> tag will have this styling now applied to it. To ensure this is the case, let's adjust our HTML document to have a secondary <code class="inline-code"> &ltp&gt</code> tag so that we can see these same stylings applied to this secondary element:
                pre
                    code &lt!--hello_world.html--&gt&#10&lt!DOCTYPE html&gt&#10&lthtml lang="en"&gt&#10  &lthead&gt&#10    &lttitle&gtMy Hello World Example&lt/title&gt&#10    &ltmeta charset="UTF-8" /&gt&#10    &ltmeta name="viewport" content="width=device-width, initial-scale=1" /&gt&#10    &ltlink href="css/style.css" rel="stylesheet" /&gt&#10  &lt/head&gt&#10  &ltbody&gt&#10    &ltmain&gt&#10      &ltarticle&gt&#10        &lth1&gtHello World!&lt/h1&gt&#10        &ltp&gt&#10        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod&#10        tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim&#10        veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea&#10        commodo consequat. Duis aute irure dolor in reprehenderit in voluptate&#10        velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint&#10        occaecat cupidatat non proident, sunt in culpa qui officia deserunt&#10        mollit anim id est laborum.&#10        &lt/p&gt&#10        &ltp&gt&#10        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod&#10        tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim&#10        veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea&#10        commodo consequat. Duis aute irure dolor in reprehenderit in voluptate&#10        velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint&#10        occaecat cupidatat non proident, sunt in culpa qui officia deserunt&#10        mollit anim id est laborum.&#10        &lt/p&gt&#10      &lt/article&gt&#10    &lt/main&gt&#10  &lt/body&gt&#10&lt/html&gt&#10
                p As one would expect, by using the CSS selector <code class="inline-code">p</code>, we have essentially declared that all configurations made within the CSS block (otherwise known as a "ruleset" or "rule") will be applied to all <code class="inline-code">&ltp&gt</code> tag HTML elements. Indeed, if we now render this newly edited HTML document in the browser, we will see that these stylings are applied to the secondary <code class="inline-code">&ltp&gt</code> tag's inner text as well, without having to write any additional CSS code:
                figure
                    img.img-image(src="../assets/images/screenshots/css_ss_03.webp" alt="A screenshot demonstrating the styling changes to multiple p tags" title="A screenshot demonstrating CSS basics" cite="Author Screenshot" loading="lazy")
                figcaption Multiple &ltp&gt Tags Styled By One CSS Declaration
                p Let's now further style our <code class="inline-code">h1</code> CSS declaration to further demonstrate how CSS parses the HTML document. Additionally, we'll further configure our style.css file to utilize conventions more commonly seen in professional web development. For one, we'll change the <code class="inline-code">p</code> CSS declaration to utilize color hex codes instead of the more basic color name code. This is so that a wider variety of colors are available to utilize, and because it corresponds with standards seen throughout the graphic design world. 
                p We'll also change out our default fonts to show a bit of diversity to our text elements. And lastly, we'll utilize a different measurement unit instead of the <code class="inline-code">px</code> or "pixels" unit. We will replace it with the <code class="inline-code">em</code> unit as it is a better practice to use a relative unit over an absolute unit. We will go into more details regarding the use of the <code class="inline-code">px</code> and the <code class="inline-code">em</code> units shortly. For now, let's adjust some of our CSS code:
                pre
                    code /*style.css*/&#10&#10h1 {&#10  text-align: center;&#10  font-family: "Trebuchet MS", "Lucida Sans Unicode", "Lucida Grande", "Lucida Sans", Arial, sans-serif;&#10  text-decoration-line: underline;&#10  text-decoration-line: none;&#10}&#10&#10p {&#10  color: #f6283d;&#10  font-size: 150%;&#10  font-family: Arial, Helvetica, sans-serif;&#10  font-weight: bold;&#10  margin-left: 1em;&#10}
                p This is now a bit closer to some more real world CSS configurations. Our <code class="inline-code">h1</code> element now has it's alignments set to center. Much like a word processor generated document, text in CSS can indeed be aligned to either the right, center, or left (the default). The font-family property has a rather extensive series of configurations. Essentially CSS will look for font-families by these name within the Client computer's font libraries (fonts located directly on the user's computer). Should the first font not be found, the second, then third, then fourth, etc. font families will be attempted, with the last font family being one that is commonly found on the majority of Client computers, which is set to the default should the others not be found.
                p Following this, the font-size for the <code class="inline-code">h1</code> selector is set to <code class="inline-code">3em</code>. The <code class="inline-code">em</code> unit of measurement is one of many units of measurement available in CSS for a variety of selectors. While <code class="inline-code">px</code> is perhaps the most commonly recognized unit of measurement to those who are familiar with Graphic Design, pixels are generally frowned upon to be utilized within styling web pages in CSS. This is not to say that there is <em>never</em> a use case for using the <code class="inline-code">px</code> unit of measurement, but due to it being a "fixed" unit of measurement, it is not suitable for most modern web pages as it does not scale relative to the designated font it is being applied to. 
                p The utilization of <code class="inline-code">em</code> units is a good segue into the subject of responsiveness within Web Design. Because modern web pages generally are meant to be viewed on devices with many different screen dimensions (commonly known as "viewports" in web development), it is imperative that elements be scaled relative to the client device's default settings for font size and other user-agent defaults. While one could, in theory, utilize <code class="inline-code">px</code> units to create responsive web designs, the amount of configuration necessary to do so in a way that still created a visually appealing (or at least readable) web page would be far more difficult than utilizing a relative measurement unit like <code class="inline-code">em</code>. This brief <a class="inline-link" aria-label="A Link to a CSS Tricks Blog Post explaining the benefits of em units over px in CSS" target="_blank" rel="noopener noreferrer" role="link" href="https://css-tricks.com/why-ems/">CSS Tricks blog post</a> explains the reasoning behind this in more detail.
                p Lastly, we see that the <code class="inline-code">text-decoration</code> property's value is written twice, this is to demonstrate a simple, but important aspect of the CSS cascade, which is that properties within a CSS selector can be overwritten anywhere in the .css document. This is accomplished simply by rewriting the <code class="inline-code">text-decoration-line</code> property's value at any point in the .css file <em>after</em> the initial reference to it. To be clear, in our first declaration of <code class="inline-code">text-decoration-line: underline;</code>, we are overwriting the default user-agent setting of "none" for this property to "underline". In our second declaration, we then explicitly declare that the value of the <code class="inline-code">text-decoration-line</code> property is "none".
                p From a practical standpoint, this is a useless statement, but oftentimes when working in a large CSS configuration file, it is easy to forget a previously authored style, and it can sometimes come as a shock to the web developer that their styling now seems somehow off due to an overwritten property value that was designated further down in the .css file. This is due to how the CSS Cascade Algorithm determines certain properties to be adjusted (either by conditions met within the User-Agent, or by the conditions met in the Authored Stylesheet).
                p If we now render our HTML page, we will see that it is now noticably different due to these slightly more significant changes:
                figure
                    img.img-image(src="../assets/images/screenshots/css_ss_04.webp" alt="An image of the HTML document with its fonts now more heavily styled" title="A screenshot of our HTML document now more heavily styled" cite="author screenshot" loading="lazy")
                figcaption The HTML Document Now More Heavily Styled
                h2 Sensible Defaults
                p To say that the CSS styling language is vast is not only an understatement, but perhaps does a great disservice to those that have devoted the immense amount of time necessary to gain mastery over it. Additionally there are a variety of CSS frameworks that aim to increase developer productivity and improve the developer experience when working with CSS. This article aims only to give you an introduction to CSS, its basic concepts, and syntax. That said, however, it is also my wish as the author of this article to leave you with a good starting off point from which to further research CSS and develop your skills in CSS.
                p To that end, below is a sample default .css file that I use when I initially start a new project. There are a multitude of these default .css files available from a wide variety of developers far more skilled and knowledgable on the subject of CSS than myself. Indeed, this configuration is essentially lifted from the acclaimed Youtuber and CSS King, <a class="inline-link" aria-label="A Link to Kevin Powell's Youtube Channel" target="_blank" rel="noopener noreferrer" role="link" href="https://www.youtube.com/@KevinPowell">Kevin Powell</a>, who I highly encourage everyone reading this article and interested in learning more about CSS to check out. Below you will find these default css settings and a brief explanation on what these defaults do:
                pre
                    code /*defaults-style.css*/&#10&#10*,&#10*::before,&#10*::after {&#10  box-sizing: border-box;&#10}&#10&#10:root {&#10  color-scheme: light dark;&#10}&#10&#10body {&#10  font-family: system-ui;&#10  font-size: 1.125rem;&#10  line-height: 1.5;&#10}&#10&#10main {&#10  width: min(70ch, 100% - 4rem);&#10  margin-inline: auto;&#10}&#10&#10img,&#10svg,&#10video {&#10  max-width: 100%;&#10  display: block;&#10}
                p This .css file obviously includes some CSS selectors that we have not yet covered in this introduction. Let's start simply by breaking down this file line by line. I will forego explaining the first commented out section of this file, as I have already covered what this is earlier in this article.
                p The asterix, <code class="inline-code">*</code>, selector here is what is known in programming circles as a "wildcard" character. It essentially means any and all elements. Since there are no parent selectors preceding it, this wildcard is selecting <em>every</em> element within the HTML document. Very essentially, <code class="inline-code">*</code> is taking every element within the HTML page and changing its uger-agent value for the box-sizing property and changing it from its default, <code class="inline-code">content-box</code>, and changing it to <code class="inline-code">border-box</code>.
                p The commas following the selectors indicate that the declaration below is to be applied to these selectors as well. In this case, we have another piece of syntax that has yet to be introduced, which is that of psuedo elements, delinated by the double colon syntax, <code class="inline-code">::</code>, followed in this case by the <code class="inline-code">before</code>, and <code class="inline-code">after</code> keywords. To greatly oversimplify what this indicates, these psuedoelements are elements that don't exist as actual HTML elements within the DOM, but are still capable of being styled by CSS. Visually speaking, these elements will appear as if they are a part of the usual HTML document, but will not affect the overall flow of the HTML document. If this sounds confusing to you, do not fret, pseudo elements are only used in specific scenarios where styling of visual elements are needed to appear before or after specific HTML elements. In this particular case we again, are applying any and all pseudo elements to be styled to have their <code class="inline-code">border-box</code> property's value changed to <code class="inline-code">border-box</code>.
                p So why change every element in the HTML document as well as all pseudo elements to not utilize the default <code class="inline-code>">content-box</code> value? To understand this in more depth than is presented here, please see MDN's documentation on the <a class="inline-link" aria-label="A link to MDN's documentation on the CSS Box Model" target="_blank" rel="noopener noreferrer" role="link" href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_box_model/Introduction_to_the_CSS_box_model">CSS Box Model</a>. In brief, however, when changing the width and height of an HTML element within CSS, the adjustments to these property values only are applicable to the content within said element (in most cases, the element's text content). Oftentimes this is not what the majority of web developers want, as they wish to change the width and height of the entire element, including any borders, margins, and padding applied to said element. This change to the <code class="inline-code">border-box</code> value for the <code class="inline-code">box-sizing</code> property ensures that the document defaults to what is usually the expected and desired behavior.
                p Moving on, we encounter the <code class="inline-code">:root</code> CSS selector. It is easy to confuse <code class="inline-code">:root</code> pseudo class selector with the <code class="inline-code">*</code> selector or the <code class="inline-code">html</code> selector. <code class="inline-code">:root</code> is utilized here to select the code class="inline-code">&lthtml&gt</code> HTML element. Note here that it is used instead of the <code class="inline-code">html</code> CSS selector solely because it holds higher precedence within the CSS Cascade (for all intents and purposes they are nearly identical selectors). Within the declaration block, we see that the <code class="inline-code">color-scheme</code> property is being set to <code class="inline-code">light dark</code>. This essentially tells HTML to respect the browser's preference for either light or dark theme and to coerce the CSS to styling that reflects this preference if available.
                p Next we have the <code class="inline-code">body</code> selector, where we see that the font-family is set to the <code class="inline-code">system-ui</code> value. As the value name suggests, this is simply telling the browser to initially simpy set all text to whatever the browser's preference for the font family is (Browser presets tend to set this to the Arial font family).
                p Additionally the <code class="inline-code">font-size</code> property is set to <code class="inline-code">1.125rem</code>. Yet another subject not covered previously in this article, this measurement unit, <code class="inline-code">rem</code>, is utilized to reference the root element's default font-size. This is contrasted with the unit, <code class="inline-code">em</code>, which references the parent element's default font-size. Both these units have similar behaviors, but <code class="inline-code">rem</code> can be thought of as being a safer bet for default stylings when there are compounding font-size changes over many nested elements within an HTML document.
                p Lastly, the <code class="inline-code">line-height</code> property is changed to <code class="inline-code">1.5</code>, which simply adjusts from default <code class="inline-code>line-height</code> of <code class="inline-code">1</code> so that the text has a bit more breathing room for each line (<code class="inline-code">1</code> tends to leave nearly no space inbetween lines).
                p Moving onto the <code class="inline-code">main</code> selector, we find a very sane default for the width property, which utilizes the min() CSS function. We didn't cover CSS functions (and indeed, haven't covered the basics of programming functions in general), but the concepts in this case are relatively straight forward. Demarcated by comma separated values, the min() function takes two arguments, the first being the minimum value passed to the width property, in this case, each line of text within the <code class="inline-code">main</code> selector, will be a minimum of <code class="inline-code">70ch</code>, or 70 characters, long. The second argument, expressed as <code class="inline-code">100% - 4rem</code>, basically tells the browser that the widest any block of text within the <code class="inline-code">main</code> selector can be is 100% of the width of the browser window, but subtract 4rem from that to find the maximum width the content can be. The <code class="inline-code">margin-inline</code> property takes the <code class="inline-code">auto</code> value to indicate that the inline margins (side margins) should be automatically calculated. Thanks to the width property's min() function's return value, the margin surrounding this content will conform to this defined range.
                p Finally we move onto the <code class="inline-code">img</code>, <code class="inline-code">svg</code>, and <code class="inline-code">video</code> selectors. What these are in reference to is somewhat self explanatory, but essentially we are referencing all HTML visual elements that refer to images (i.e. <code class="inline-code">&ltimg&gt</code>), <code class="inline-code">&ltsvg&gt</code> elements (otherwise known as scalable vector graphics), and also the <code class="inline-code">&ltvideo&gt</code> element (self-explanatory). The defaults changed here are subtle, essentially the width of the video is limited to being <code class="inline-code">100%</code> of the <code class="inline-code">max-width</code> property, ensuring that all images, svg elements, and videos never exceed 100% width of the browser window size (preventing content overflow), and additionally the <code class="inline-code">display</code> property is set to <code class="inline-code">block</code>, essentially starting all new images, svgs, and videos on new lines instead of visually adjacent (i.e. horizontally oriented/side by side) to other HTML elements.
                p As I initially mentioned in the opening paragraph to this section, these are just a <em>few</em> of sane defaults that can be found throughout the internet in regards to default author stylings for css documents. I encourage you to go looking for others as there are some css default sheets that can get quite extensive. Personally, I've found this is enough for me, but you might desire to have others depending on your goals and work flow. I do hope this helps.
                h1 Conclusion

            div.foot-arrows
                button.icons#up-arrow(title="back to top" aria-label="back-to-top" alt="back to top" role="navigation")
        footer(role="menu")
            div.foot-text
                ul.foot-text-menu(role="menu")
                    li.foot-text-items(role="menubar")
                        div.foot-text-item#text-sun(aria-label="light-mode-text" role="menuitem") light
                    li.foot-text-items(role="menubar")
                        div.foot-text-item#text-git(aria-label="git-text" role="menuitem") git
                    li.foot-text-items(role="menubar")
                        div.foot-text-item#text-linkedin(aria-label="linkedin-text" role="menuitem") linkedin
                    li.foot-text-items(role="menubar")
                        div.foot-text-item#text-mastodon(aria-label="mastodon-text" role="menuitem") social
                    li.foot-text-items(role="menubar")
                        div.foot-text-item#text-moon(aria-label="dark-mode-text" role="menuitem") dark
            div.foot-division
            ul.foot-menu(role="menu")
                li.foot-items(role="menuitem")
                    button.footer-button#sun-button
                        div.icons#sun(aria-label="light-mode" role="button") light
                li.foot-items(role="menuitem")
                    a.icons#git(aria-label="git" role="link" target="_blank" rel="noopener noreferrer" href="https://github.com/tomit4") git
                li.foot-items(role="menuitem")
                    a.icons#linkedin(aria-label="linkedin" target="_blank" rel="noopener noreferrer" role="link" href="https://linkedin.com/in/brian-hayes-33496067") linkedin
                li.foot-items(role="menuitem")
                    a.icons#mastodon(aria-label="social" target="_blank" rel="noopener noreferrer" role="link" href="https://mas.to/@brianhayesdev") social
                li.foot-items(role="menuitem")
                    button.footer-button#moon-button
                        div.icons#moon(aria-label="dark-mode" role="button") dark
        script(src="../index.js" defer default)
