doctype html
html(lang = "en")
    head
        title brianhayes.dev
        meta(charset='UTF-8')
        meta(name='viewport' content='width=device-width, initial-scale=1')
        meta(name="robots" content="follow, index, max-snippet:-1, max-image-preview:large")
        meta(name='description' content='A simple blog written by a Web Developer, for Web Developers. Covering Basics of HTML, CSS, JavaScript, and much more, including Linux and other subjects related to technology.')
        script(src="../toggle-temp.js")
        link(rel="icon" type="image/x-icon" href="../assets/icons/favicon.png")
        link(rel='icon' type='application/rss+xml' title='RSS Feed' href='../assets/feed.rss')
        link(rel='stylesheet' type='text/css' href='../css/style.css')
        link(rel="preload" href="../css/style.css" as="style" onload="this.onload=null;this.rel='stylesheet'")
        noscript
            link(rel="stylesheet" href="../css/style.css")
    body
        nav
            ul.nav-menu(role="menu")
                li.nav-items(role="menuitem")
                    a.icons#contact(aria-label="email" role="menuitem" href="mailto: brianhayes.dev@protonmail.com") contact
                li.nav-items(role="menuitem")
                    a.icons#folio(aria-label="folio" role="navigation" href="../folio.html") folio
                li.nav-items(role="menuitem")
                    a.icons#home(aria-label="home" role="navigation" href="../index.html") home
                li.nav-items(role="menuitem")
                    a.icons#blog(aria-label="blog" role="navigation" href="/blog/") blog
                li.nav-items(role="menuitem")
                    a.icons#rss(aria-label="rss" role="menuitem" href="../assets/feed.rss") rss
        div.nav-division
        div.nav-text
            ul.nav-text-menu(role="menu")
                li.nav-text-items(role="menubar")
                    div.nav-text-item#text-contact(aria-label="email" role="menuitem") email
                li.nav-text-items(role="menubar")
                    div.nav-text-item#text-folio(aria-label="folio-text" role="menuitem") folio
                li.nav-text-items(role="menubar")
                    div.nav-text-item#text-home(aria-label="home-text" role="menuitem") home
                li.nav-text-items(role="menubar")
                    div.nav-text-item#text-blog(aria-label="blog-text" role="menuitem") blog
                li.nav-text-items(role="menubar")
                    div.nav-text-item#text-rss(aria-label="rss-text" role="menuitem") rss 
        div.container.fadein
            div.arrows
                a.icons#left-arrow(aria-label="previous" role="navigation" href="")
                a.icons#right-arrow(aria-label="next" role="navigation" href="")
            div.arrows-text
                span.arrow-text#text-left-arrow prev
                span.arrow-text#text-right-arrow next
            div.title
                div.title-card
                    header HTML
                    div.subtitle The Web's Skeleton
                    div.aside Published on
                        time(datetime="2023-06-25") 2023-06-25
                picture(role="img")
                    source(media="(min-width: 62.5em)" srcset="../assets/images/intro_images/skull_desktop.jpg")
                    source(media="(min-width: 37.5em)" srcset="../assets/images/intro_images/skull_tablet.jpg")
                    img.intro-image(src="../assets/images/intro_images/skull_mobile.jpg" alt="Vojtech Klimkovič Still Life" title="Vojtech Klimkovič Still Life" cite="https://commons.wikimedia.org/wiki/File:Vojtech_Klimkovi%C4%8D_Still_life_with_a_skull_and_forget-me-not_1860.jpg?useskin=vector")
                figcaption Vojtech Klimkovič Still Life
                blockquote(cite="https://www.goodreads.com/work/quotes/54703171-face-the-book-with-your-small-business-a-step-by-step-guide-to-establis") &#8220Your website is the center of your digital eco-system, like a brick and mortar location, the experience matters once a customer enters, just as much as the perception they have of you before they walk through the door.&#8221
                    div.quote_author -Leland Dieno
            article.demo-button
                h1 Introduction
                p Web Development is the production of applications and documents that live primarily on the web, primarily interacted with via the web browser. The predominant tools involved are HTML (HyperText Markup Language), CSS (Cascading Style Sheets), and JavaScript (also known as ECMAScript). While there are often other tools involved depending on the specific needs and complexities of each application/web page, the common theme is that these three tools are the foundation on which nearly all user facing web pages are built on. Over the course of this and the next two articles, I will do my best to give a general overview and introduction to each of these tools, starting with HTML.
                h2 A Bit About How I Got Started
                p I know that when I first started to learn the basics of Web Development only a short two and a half years ago, I found learning HTML to be the most boring aspect. Aside from some short tutorials around making basic websites on youtube, I had actually already begun programming a basice node cli todo list per the recommendation of my mentor. Rather than starting off with trying to create a visually appealing website, he instead had advised me to start writing a todo list without any "Front End" to speak of. Instead I simply spun up a node server and began to play around with how to create a todo list, organize it by time, allow for deletion and creation of new todo items, and to update those items. I actually thought I never committed this very first project to Github, but apparently <a class="inline-link" aria-label="link-to-first-coding-project" target="_blank" rel="noopener noreferrer" role="link" href="https://github.com/tomit4/to-do-list">I have</a>.
                p Most self taught developers first learning to code would not be instructed to create a cli todo list as their first coding project, but my mentor was never one to shy away from difficult projects and still to this day knows exactly how deep into the deep end to throw me (just enough to make me feel uncomfortable, but not enough to feel overwhelmed). Please note that this first project is fraught with poor decisions and is not a good reference on how to create a todo app. Outside of tutorials that essentially held my hand through the process (i.e. <a class="inline-link" aria-label="link-to-free-code-camp" target="_blank" rel="noopener noreferrer" role="link" href="https://www.freecodecamp.org/">Free Code Camp</a>), I had not really thought much on HTML, let alone CSS. Instead pure JavaScript was my initial introduction, and I had never played much in what is commonly known as "The Front End".
                h2 The Front End Vs The Back End
                p When reading about "Front End" code in regards to web development, many make the correlative analogy to a restaurant when trying to explain how a basic web application works. This is an over simplification, but nevertheless useful as an explanation for beginners, and it goes something like this:
                p From your desktop computer, laptop computer, tablet, and mobile device, when you interact with any application that requires access to the internet, generally speaking this means that that device is interacting with another computer over a series of wires, wifi, or bluetooth in order to connect to the internet. Your device, commonly referred to as a "Client", makes a "Request" (specifically what is known as a "GET" request) for data from another computer somewhere else in the world. This other computer, commonly known as a "Server", receives the request, processes it, and if it has the desired data, will generally provide that data back over the internet to the "Client".
                p Given this simple explanation, hopefully one can see how this is like a waiter at a restaurant. You, the client, head into the restaurant (log onto the internet), and browse the menu ("The Front End", i.e. use the web browser via the url bar or search engine). You eventually see a meal (data) that you wish to eat (have access to). You make a request to the waiter (your internet service provider) for which item of food (data) you wish to eat (have access to). The waiter (your internet service provider) then proceeds(transmits the request over the internet) to the kitchen ("The Back End"). The waiter then relays your request to the kitchen staff (the server), who then proceed to prepare your dish utilizing ingredients (data) and a recipe (business logic). Once prepared, the waiter (your internet service provider), then returns with your meal (your requested data), which you then proceed to consume (either by reading an article, looking at pictures, taking care of work related business, etc.).
                figure
                    img.img-image(src="../assets/images/img/client_server.png" alt="A Diagram of A Basic Client Server HTTP Request/Response" title="A Diagram of A Basic Client Server HTTP Request/Response" cite="https://commons.wikimedia.org/wiki/File:Client_Sever.png?useskin=vector" loading="lazy")
                figcaption A Diagram Of A Basic HTTP Request
                p This relationship between a Client and a Server is an essential piece of knowledge that you will undoubtedly revisit many times over the course of your learning journey/career. Indeed this abstraction is not only the domain of the web, but is useful when thinking about processes that take place even within the confines of the hardware on your devices. I will, for the sake of simplicity, digress on this point in the interest of moving onto our main topic, HTML.
                h2 The HyperText Markup Language
                p The HyperText Markup Language, colloquially known as "HTML", has a <a class="inline-link" aria-label="link to wikipedia history of html" target="_blank" rel="noopener noreferrer" role="link" href="https://en.wikipedia.org/wiki/Html?useskin=vector#History">long history</a> dating back to the early days of the internet in the 1980s. Please take note that HTML is not a <a class="inline-link" aria-label="wikipedia page on programming language" target="_blank" rel="noopener noreferrer" role="link" href="https://en.wikipedia.org/wiki/Programming_language?useskin=vector">Programming Language</a>, but rather is a <a class="inline-link" aria-label="wikipedia page on markup language" target="_blank" rel="noopener noreferrer" role="link" href="https://en.wikipedia.org/wiki/Markup_language?useskin=vector">Markup Language</a>, which utilizes a series of symbols within a text document to control the structure, formatting and relationship the elements (text, images, videos, etc.) within the text document, commonly known as a "Page", and more specific to HTML, a "Web Page".
                p These elements create a structure which the Web Browser (Chrome, Firefox, Edge, Safar, etc.) can parse through and format appropriately. HTML by itself can generate very basic documents and presentations on the web, but usually need CSS (cascading style sheets) to color and stylelize the elements, and oftentimes JS (JavaScript) programming is utilized to create interactivity with these elements. The following two articles will give you a basic introduction to CSS and JS, but it is important to note that without understanding the basics of HTML, one will not get far when researching CSS and JS, as both CSS and JS are meant to work with HTML as a part of a "stack" of programming tools to create a fully functioning web page.
                h2 Diving In, HTML Basics
                p To hammer home the fact that the Web Browser will attempt to interpret whatever textual document you give it into an HTML page. Let's start by writing up a simple txt file and seeing what happens when we open it in the browser. In previous articles, I have written about how working from the <a class="inline-link" aria-label="link to command line article" role="link" href="./command_line.html">Command Line</a> is a worthy pursuit of your time to learn. Thusly, while you can indeed make directories, and create files from a traditional file manager, in the following tutorials we will be using the command line and a basic shell (bash or zsh will be fine), to demonstrate.
                p Within your terminal make a new directory called "my_webpage" and navigate into it:
                pre
                    code #bash shell&#10[ ~]$ mkdir my_webpage && cd my_webpage
                p From here you'll want to create a simple .txt file:
                pre
                    code #bash shell&#10[ my_webpage]$ touch hello_world.txt
                p Using your favorite code editor open this up, most will probably use VSCode so:
                pre
                    code #bash shell&#10[ my_webpage]$ code hello_world.txt
                p Simply type in a basic "Hello World!" example:
                pre
                    code #hello_world.txt&#10Hello World!
                p Exit your text editor and now open your new file using your favorite browser:
                pre
                    code #bash shell&#10[ my_webpage]$ firefox hello_world.txt
                p As you will soon see, you can see an extremely basic printing of your text in the browser:
                figure
                    img.img-image(src="../assets/images/screenshots/html_ss_01.webp" alt="a screenshot of a simple txt file rendered in the firefox browser" title="a screenshot of a simple txt file rendered in the firefox browser" cite="screenshot" loading="lazy")
                figcaption Simply Calling The Firefox Browser With The File Name As an Argument Renders A .txt File In The Browser
                p Now on its own, this is rather underwhelming. The text is small and while possible, the browser is doing some work to parse out exactly what we're trying to have it render. Let's learn our first html tag, the "h1" tag:
                h2 HTML Tags
                p The general demarcation characters utilized primarily in HTML are the "lesser than", "&lt", and the "greater than", "&gt", characters. These characters are used to enclose an html element. A simple example would be to enclose a h1, or primary header tag inside of the "&lt" and the "&gt". Let's rename our "hello_world.txt" to "hello_world.html" using the bash "mv" command:
                pre
                    code #bash shell&#10[ my_webpage]$ mv hello_world.txt hello_world.html
                p This will rename our hello_world file to the appropriate extension, this will enable better syntax highlighting in our editor as well as make it clear to us and our various programs what kind of file this is. Now within our hello_world.html file, let's enclose our "Hello World!" in html h1 tags like so:
                pre
                    code #hello_world.html&#10&#10&lth1&gtHello World!&lt/h1&gt
                p If we now open up this file in our browser, we'll notice that the formatting of our text is resized to reflect this new assignment of the text as a header:
                figure
                    img.img-image(src="../assets/images/screenshots/html_ss_02.webp" alt="a screenshot an html file with an h1 rendering the text 'hello world' in firefox" title="a screenshot an html file with an h1 rendering the text 'hello world' in firefox" cite="screenshot" loading="lazy")
                figcaption The h1 HTML Tag Renders A Header In The Browser
                p HTML Tags, also called HTML Elements, are utilized by the browser to interpret how the developer wishes to organize the text, images, videos, and other forms of media in the HTML document. Additionally, HTML tags can be referenced directly within CSS and JavaScript files for further styling and programming interactivity with those elements. HTML also recognizes what's called "Nested" Tags/Elements, which is what will be discussed next.
                h2 Nested HTML
            div.foot-arrows
                button.icons#up-arrow(title="back to top" aria-label="back-to-top" alt="back to top" role="navigation")
        footer(role="menu")
            div.foot-text
                ul.foot-text-menu(role="menu")
                    li.foot-text-items(role="menubar")
                        div.foot-text-item#text-sun(aria-label="light-mode-text" role="menuitem") light
                    li.foot-text-items(role="menubar")
                        div.foot-text-item#text-git(aria-label="git-text" role="menuitem") git
                    li.foot-text-items(role="menubar")
                        div.foot-text-item#text-linkedin(aria-label="linkedin-text" role="menuitem") linkedin
                    li.foot-text-items(role="menubar")
                        div.foot-text-item#text-mastodon(aria-label="mastodon-text" role="menuitem") social
                    li.foot-text-items(role="menubar")
                        div.foot-text-item#text-moon(aria-label="dark-mode-text" role="menuitem") dark
            div.foot-division
            ul.foot-menu(role="menu")
                li.foot-items(role="menuitem")
                    button.footer-button#sun-button
                        div.icons#sun(aria-label="light-mode" role="button") light
                li.foot-items(role="menuitem")
                    a.icons#git(aria-label="git" role="link" target="_blank" rel="noopener noreferrer" href="https://github.com/tomit4") git
                li.foot-items(role="menuitem")
                    a.icons#linkedin(aria-label="linkedin" target="_blank" rel="noopener noreferrer" role="link" href="https://linkedin.com/in/brian-hayes-33496067") linkedin
                li.foot-items(role="menuitem")
                    a.icons#mastodon(aria-label="social" target="_blank" rel="noopener noreferrer" role="link" href="https://mas.to/@brianhayesdev") social
                li.foot-items(role="menuitem")
                    button.footer-button#moon-button
                        div.icons#moon(aria-label="dark-mode" role="button") dark
        script(src="../index.js" defer default)
