doctype html
html(lang = "en")
    head
        title brianhayes.dev
        meta(charset='UTF-8')
        meta(name='viewport' content='width=device-width, initial-scale=1')
        meta(name="robots" content="follow, index, max-snippet:-1, max-image-preview:large")
        meta(name='description' content='A simple blog written by a Web Developer, for Web Developers. Covering Basics of HTML, CSS, JavaScript, and much more, including Linux and other subjects related to technology.')
        script(src="../toggle-temp.js")
        link(rel="icon" type="image/x-icon" href="../assets/icons/favicon.png")
        link(rel='icon' type='application/rss+xml' title='RSS Feed' href='../assets/feed.rss')
        link(rel='stylesheet' type='text/css' href='../css/style.css')
        link(rel="preload" href="../css/style.css" as="style" onload="this.onload=null;this.rel='stylesheet'")
        noscript
            link(rel="stylesheet" href="../css/style.css")
    body
        nav
            ul.nav-menu(role="menu")
                li.nav-items(role="menuitem")
                    a.icons#contact(aria-label="email" role="menuitem" href="mailto: brianhayes.dev@protonmail.com") contact
                li.nav-items(role="menuitem")
                    a.icons#folio(aria-label="folio" role="navigation" href="../folio.html") folio
                li.nav-items(role="menuitem")
                    a.icons#home(aria-label="home" role="navigation" href="../index.html") home
                li.nav-items(role="menuitem")
                    a.icons#blog(aria-label="blog" role="navigation" href="/blog/") blog
                li.nav-items(role="menuitem")
                    a.icons#rss(aria-label="rss" role="menuitem" href="../assets/feed.rss") rss
        div.nav-division
        div.nav-text
            ul.nav-text-menu(role="none")
                li.nav-text-items(role="none")
                    div.nav-text-item#text-contact(aria-label="email" role="none") email
                li.nav-text-items(role="none")
                    div.nav-text-item#text-folio(aria-label="folio-text" role="none") folio
                li.nav-text-items(role="none")
                    div.nav-text-item#text-home(aria-label="home-text" role="none") home
                li.nav-text-items(role="none")
                    div.nav-text-item#text-blog(aria-label="blog-text" role="none") blog
                li.nav-text-items(role="none")
                    div.nav-text-item#text-rss(aria-label="rss-text" role="none") rss 
        div.container.fadein
            div.arrows
                a.icons#left-arrow(aria-label="previous" role="navigation" href="" style="visibility: hidden")
                a.icons#right-arrow(aria-label="next" role="navigation" href="./css_the_webs_makeup.html")
            div.arrows-text
                span.arrow-text#text-left-arrow prev
                span.arrow-text#text-right-arrow next
            main.title
                div.title-card
                    header JavaScript
                    div.subtitle The Web's Muscles
                    div.aside Published on 
                        time(datetime="2024-01-28") 2024-01-28
                picture(role="img")
                    source(media="(min-width: 62.5em)" srcset="../assets/images/intro_images/start_100m_desktop.jpg")
                    source(media="(min-width: 37.5em)" srcset="../assets/images/intro_images/start_100m_tablet.jpg")
                    img.intro-image(src="../assets/images/intro_images/start_100m_mobile.jpg" alt="A 100M Dash in Lisse, Zuid-Holland, circa 1968" title="A 100M Dash in Lisse, Zuid-Holland, circa 1968" cite="https://commons.wikimedia.org/wiki/File:Start_100m_dames._Lidy_Makkinje-Vonk,_Corrie_Bakker,_Wilma_van_der_Berg,_C._Civa,_Bestanddeelnr_921-3633.jpg?useskin=vector")
                figcaption A 100M Dash in Lisse, Zuid-Holland, circa 1968
                blockquote(cite="https://pdfroom.com/books/you-dont-know-js-async-performance/zW5n16ox2Nq") &#8220The only thing worse than not knowing why some code breaks is not knowing why it worked in the first place! It's the classic &#8216house of cards&#8217 mentality: &#8216it works, but I'm not sure why, so nobody touch it!&#8217 You may have heard, &#8216Hell is other people&#8127 (Sartre), and the programmer meme twist, &#8216Hell is other people's code.&#8217 I believe truly: &#8216Hell is not understanding my own code.&#8217 &#8221
                    div.quote_author -Kyle Simpson
            article.demo-button
                h1 Introduction
                p You may have noticed that this article's publish date is far later than my previous article on <a class="inline-link" aria-label="link to article, css, the web's makeup" role="link" href="./css_the_webs_makeup.html">CSS: The Web's Makeup</a>. While this is mainly due to other responsibilities which have as of recent required my attention, I must also admit that I have been a bit intimidated on writing on the subject of JavaScript. JavaScript is the first programming language I ever learned, and I am still continuing to learn it. Thusly, I don't yet feel I have any authority to write on the subject of JavaScript, even in the context of this article, which is meant as an introduction.
                p Nevertheless, it is quite likely that I will never feel ready to give an overview of JavaScript. Thusly, I shall simply have to do my best. In covering the topic, I cannot overemphasize the incredibly large role JavaScript has played in bringing the web to the state it is in today. I have come across many social media posts that joke/deride JavaScript for no longer being a programming language reserved solely to the realm of the web, but rather has pervaded into nearly every facet of modern computer applications. 
                p With the arrival of the JavaScript runtime, NodeJS, the software framework, Electron, and the mobile framework, React Native, JavaScript has made its way into many ecosystems previously the purview of other programming languages. From its humble beginnings as a simple scripting language meant solely to add small bits of interactivity to web pages, JavaScript is now a fully fledged programming language that can interact with native C libraries directly on your computer (NodeJS), utilize User Interface libraries to write desktop applications (Electron), and even write platform agnostic mobile applications (React Native). It is not an understatement to say that JavaScript is everywhere!
                p Perhaps you might now understand my reluctance to cover such a vast subject, as a single article, even one that attempts to be an introduction to the very basic aspects of the language, can only barely scratch the surface of the subject that is JavaScript. Indeed, entire blogs, books, videos, and podcasts have been produced that solely revolve around The JavaScript Programming Language and the vast ecosystem around it. 
                p JavaScript is both beloved and hated by programmers for a wide variety of reasons. Regardless of these sentiments, JavaScript has long been, and continues to be, one of the most popular programming languages in the world due to its ubiquity within the world wide web. In short, with the rise of the web, so too went JavaScript. 
                p Even if it is not one's intent to become a web developer, it is in my humble opinion that it is worthwhile for anyone looking to create any substantial application on the web to at least have a basic familiarity with JavaScript's syntax, especially when it comes to how it interacts with the Document Object Model.
                p This will certainly not be my only article written which involves JavaScript in the context of programming, and I am sure to not cover the entirety of the JavaScript programming language in this article. It is my hope, however, to give you a basic understanding of JavaScript and by extension, core programming concepts. This will include introductory examples involving the subjects of  variable declaration and usage, boolean statements, conditionals, function declarations, arrays, objects, and finally basic interactions with the console and document objects. Firstly, however, I feel it is important to briefly overview what is JavaScript and it's history.
                h2 What Is JavaScript?
                p JavaScript is a high level programming language that originally was created to add interactivity to HTML elements after the initial web page had loaded. The language is dynamically typed, supporting prototype based object oriented as well as functional and imperative programming styles. All major web browsers include a dedicated JavaScript engine which executes code on the user's device. On its own, JavaScript does not have native interfaces for interacting with standard Input/Output (I/O), unlike lower level languages, but JavaScript is often utilized with a wide array of APIs via a runtime system native to the browser, which facilitates interactivity with I/O.
                p As mentioned in the introduction, JavaScript is no longer solely the domain of client side scripting on the browser. That said, JavaScript still is predominantly utilized for client side scripting to add interactivity to the browser via scripted events. Examples of this interactive behavior include:
                .inline-list
                    ul
                        li
                            p Loading new content to the web page without reloading the entire page.
                        li
                            p Interacting with HTML elements via dynamically changing CSS attributes to add animations
                        li
                            p Validating Input Forms
                        li 
                            p Redirecting the User to Another Page
                        li
                            p Storing and retrieving data on the user's device (i.e. <a class="inline-link" aria-label="wikipedia link to http cookie article" target="_blank" rel="noopener noreferrer" role="link" href="https://en.wikipedia.org/w/index.php?title=HTTP_cookie">HTTP cookies</a>).
                p The use of JavaScript has more recently moved outside of the realm of the browser and into the server space with the advent of NodeJS arriving on the programming scene in 2009. This alone would have solidified JavaScript as the predominant programming language of the web, as it now allowed for servers as well as client side applications to be entirely written in JavaScript. Additionally, JavaScript now is utilized to create platform agnostic desktop and mobile applications using the Electron Software Framework and the React Native Framework respectively.
                p It is obvious that JavaScript's reach has expanded far and wide, but how did this humble programming language get to where it is today?
                h2 The History Of JavaScript
                p The history of JavaScript is closely tied to that of the Browser, and by extension, The World Wide Web. <a class="inline-link" aria-label="link to wikipedia article on the history of the world wide web" target="_blank" rel="noopener noreferrer" role="link" href="https://en.wikipedia.org/wiki/History_of_the_World_Wide_Web">The History Of The World Wide Web</a> is a subject outside the scope of this article. Sufficient to say that in 1990, one year after the inception of the World Wide Web itself, Tim Berners-Lee (the inventor of The World Wide Web) released the first web browser, simply known as the Line Mode Browser. Run from the terminal, this basic browser bore little resemblence to today's modern browsers, but demonstrated the promise of what the World Wide Web would come to fulfill: that of an easily accessible, interconnected world. As an aside, one can still run basic browsers from the terminal, <a class="inline-link" aria-label="a link to the links browser website" target="_blank" rel="noopener noreferrer" role="link" href="http://links.twibright.com/user_en.html">The Links Browser</a> is one of the oldest examples of these types of browser still in use today.
                p Three years later, in 1993, Lee would go on to release the <a class="inline-link" aria-label="a link to the wikipedia article on the mosaic browser" target="_blank" rel="noopener noreferrer" role="link" href="https://en.wikipedia.org/wiki/Mosaic_(web_browser)">Mosaic Browser</a>, which is credited as being the first web browser to gain widespread popularity. With its use of a graphical user interface instead of a terminal, the Mosaic Browser was widely considered to be much more accessible to the average person. The popularity and ease of use of The Mosaic Browser would usher in the Internet boom of the 1990s.
                p One year after The Mosaic Browser's release, Marc Andreessen, the leader of the Mosaic team, would found the company, Netscape. Their flagship product, the Netscape Navigator Browser, itself heavily inspired by The Mosaic Browser, would soon overshadow its predecessor in popularity. Shortly thereafter, in 1995, Microsoft would release the  Internet Explorer Browser, sparking a browser war with Netscape.
                p These early days of the web were filled with static sites, which, while sufficent for the reading of documents, lacked interactivity once the page loaded. In order to interact with early web pages, one would have to initiate an event (such as a click on a button), which would cause the entire page to refresh in order for new content to be loaded and rendered. While still impressive for its time, it limited the kinds of interactions early web users could have with the pages they visited. It became apparent to those working at the forefront of this new burgeoning field to change this and add more dynamism to these user interactions. 
                p Thusly, in 1995, Netscape decided to add a scripting language to The Netscape Navigator Browser. Two routes were taken to achieve this ultimate goal. The first, in collaboration with Sun Microsystems, aimed to embed the Java Programming Language into the browser. The other route was put into the hands of a computer programmer named Brendan Eich, who was tasked with embedding the Scheme Programming Language. 
                p It wasn't long before Netscape management had determined that the best option was rather for Eich to develop a new programming language, which would incorporate syntax more similar to Java than Scheme. Although originally called "LiveScript" when first shipped with the Navigator beta in September of 1995, it was soon renamed to JavaScript when the official version release occurred in December of that year. Originally intended "to help nonprogrammers create dynamic, interactive web sites," it probably occurred to no one at the time how ubiquitous their new creation would become.
                h2 JavaScript Basics
                p While the history of JavaScript is much more extensive than this, this article will be lengthy enough without going into the entirety of JavaScript's history. Nevertheless, should you wish to find out more, I highly encourage you to <a class="inline-link" aria-label="a link to the wikipedia article on the history of javascript" target="_blank" rel="noopener noreferrer" role="link" href="https://en.wikipedia.org/w/index.php?title=JavaScript#History">read the Wikipedia article on the subject</a>, from which the majority of the previous section was referenced. 
                p The remainder of this article will be an extensive introduction to general programming concepts as they relate to JavaScript, including variables, data types, conditionals, control flow statements, and functions. As I mentioned at the beginning of this article, the topic of JavaScript is vast, but it is my hope that in reading this, you will have been given a basic grasp on the fundamentals of working with JavaScript and how to add basic interactivity to your web pages.  Firstly, however, it is important that we set up a working environment so that we can see the results of the JavaScript we write. For this we'll be working in the browser's console, available via the browser's native developer tools.
                h2 The Console
                p Later on, in part two of this article, I will explain how to interact with JavaScript within the context of files that are directly linked to an HTML document, much like the document we created in <a class="inline-link" aria-label="a link to the article HTML, the web's skeleton" role="link" href="./html_the_webs_skeleton.html">HTML: The Web's Skeleton</a>. For now, however, it is time to introduce one of the most valuable tools available to the modern web developer, that of the developer console. Open up your preferred browser and hit the F12 key. You should be presented with a separate partition or window that displays the underpinnings of the webpage you are currently on.
                figure
                    img.img-image(src="../assets/images/screenshots/devtools_ss_01.webp" alt="a screenshot showing the developer console alongside an open web page" title="the devtools console opened up at brianhayes.dev" cite="author screenshot" loading="lazy")
                figcaption Pressing the F12 key opens the browser's devtools
                p Notice the tabs on the top of the new window/partition. Navigate to the tab labeled "Console". Here, you should see a blinking cursor. You can think of this as being like a coding sandbox in which JavaScript can be written to test out code. Should you choose to follow along, simply copy the code snippets in the subsequent examples into this console. Let's start off with variable declarations.
                h2 Variables
                p Much like in mathematics, variables in programming tie a particular piece of data to a symbol representing that data. The most simple example of this can be demonstrated by declaring the equivalency between a named symbol, and the data it represents. In JavaScript, this is done by using the var keyword. Inside your console, type out the following code:
                pre
                    code var greeting = "Hello World!";
                p This simple statement should be somewhat self explanatory, but let's break it down regardless. Firstly, let us address the <code class="inline-code">var</code> keyword. In JavaScript, like all programming languages, there are reserved keywords, with <code class="inline-code">var</code> being one of them. This keyword is to let the JavaScript interpreter know that we are declaring a variable. The next word, <code class="inline-code">greeting</code>, is the name of the variable we are declaring. JavaScript has no reference to <code class="inline-code">greeting</code> until we have declared it. Next, we utilize an equal sign to declare that <code class="inline-code">greeting</code> is equal to the following value. In this case we apply what is known in programming as a <em>string</em>, or a series of characters. The quotations are required to delineate that we are declaring a string. To summarize, we are declaring a variable called <code class="inline-code">greeting</code> which holds the string value of "Hello World!".
                p If we write out this statement and then hit the "Enter" key inside of our browser's console window, the console will give us a return value of <code class="inline-code">undefined</code>. This may seem perplexing to the unitiated. Simply put, while the console is acknowledging our assignment, we have not returned anything yet, we have simply declared our variable <code class="inline-code">greeting</code> to exist. In other words, we have not asked the JavaScript interpreter to do anything other than hold onto the declaration of <code class="inline-code">greeting</code> in memory. Let's now retrieve our value using a simple call to the console like so:
                pre
                    code console.log(greeting);
                p After typing out this bit of code and hitting enter, the JavaScript interpreter will then print out the value we have assigned to the <code class="inline-code">greeting</code> variable, "Hello World!":
                figure
                    img.img-image(src="../assets/images/screenshots/devtools_ss_02.webp" alt="a screenshot of the devtools displaying a basic javascript hello world example" title="declaring a variable and then logging the value to the console in javascript" cite="author screenshot" loading="lazy")
                figcaption Variable declaration and logging to the console
                p While simple, the declarations of variables in programming is akin to learning your ABCs in the alphabet. By creating associations between variable names with values they represent, we can establish semantic associations to make our code more readable to both ourselves and others. Let's declare some other variables in the next section, where I will introduce you to the other basic data types within JavaScript.
                h2 Data Types
                h3 Numbers
                p All programming languages have a series of data types which serve various purposes. Much of JavaScript's data types have to do with abstractions that are easily parsed/understood by the underlying computer architecture. Strings are one of the easiest to grasp examples for the beginner, as they are simply a sequence of characters meant usually to represent names, words, or statements. Another easy to understand data structure is that of numbers. Unlike variable declaration of strings, numbers are not encapsulated inside of quotation marks, and one can simply assign a variable like so:
                pre
                    code var age = 40;
                p As you can see, the semantic aspects of declaring variables are already starting to show. Age is often associated with a numeric value, while the greeting variable above is indeed a statement often interpreted as a greeting. It is often said that naming variables is one of the programmer's greatest challenges. As you become more versed in programming, this difficulty will become more apparent. For now, however, simply think on the confusion a fellow programmer would have if we had simply switched our values for these two declarations:
                pre
                    code var age = "Hello World!";&#10var greeting = 40;
                p This is an obviously confusing series of declarations as each value the variables represent, while valid JavaScript, would not be looked on favorably by anyone having to parse through and read this code. These kinds of naming conventions often relate to the particular type of data being stored within the variable. Perhaps the importance of proper naming conventions will become even more apparent in the next data type we will cover, booleans.
                h3 Booleans
                p Booleans are perhaps the most simple to understand data type, as the value stored within a boolean variable can hold only the value of <code class="inline-code">true</code> or <code class="inline-code">false</code>, and their declaration is just that simple:
                pre
                    code var isOverForty = false;&#10var isUnderFifty = true;
                p Here, we introduce a few conventions. As you can see, I am declaring two variables, one called <code class="inline-code">isOverForty</code>. Notice the capitalization of each word, demarcating a kind of statement which corresponds to whether the value holds a boolean <code class="inline-code">true</code> or <code class="inline-code">false</code> value. This kind of capitalization is what is known as <em>Camel Case</em>, where each new word, rather than demarcated by a space like in traditional writing, is instead demarcated with a capitalized letter. This is because spaces in programming often indicate a new declaration or statement in programming, and thusly to ensure that a single variable is declared, no spaces can be used when naming variables that involve multiple words in the name. Additionally, to ensure the readability of the variable name, each letter is demarcated with a visually noticable capitalized letter.
                p Also notice the choice of semantics, <code class="inline-code">isOverForty</code> indicates a <code class="inline-code">true</code> or <code class="inline-code">false</code> value. It would be very poor practice to name this variable <code class="inline-code">mightBeOverForty</code>, as that indicates that it's value could be <em>either</em> <code class="inline-code">true</code> <em>or</em> <code class="inline-code">false</code>. Because we are storing a boolean value of <code class="inline-code">false</code> here, it is better to give this variable a name that indicates to us that the expected return value is <em>definitively</em> <code class="inline-code">true</code> or <code class="inline-code">false</code>.
                p Strings, numbers, and booleans within the JavaScript Programming Language (and other programming languages), are what are known as <em>Primitive</em> data types. There are other primitive data types (null, undefined, and symbols) which will not be covered in this introduction. The other two data types that we'll be covering are what are known as <em>Reference</em> data types. Specifically, we are referring to <em>Arrays</em>, and <em>Objects</em>. These data types can be thought of as stores or collections of data. Technically, <em>Functions</em> are also a Reference data type, but to ensure this introduction is kept as simple as possible, we'll be covering Arrays and Objects first before moving onto the slightly more complex subject of Functions. Let's start by introducing the Array data type.
                h3 Arrays
                p If you work in JavaScript long enough, you will eventually come across the saying "Everything is an object in JavaScript". We have yet to cover Objects as a data type, but know that this statement is more than just a sentiment, it is a statement of fact. For now, simply keep in your mind that Arrays and Objects in JavaScript share a lot in common.
                p The most simple way to think of Arrays in JavaScript are as a grouping of variables that itself can be contained within a variable. This is expressed by utilizing the square "[ ]" brackets to denote you are declaring an array of values being stored. Thusly a simple array of names could be declared like so:
                pre
                    code var groupOfNames = ["Mary", "John", "Larry", "Zoe"];
                p Practically speaking, one can create an array of any amount of values, of any type of values, and even include Arrays (or Objects) within Arrays. Usually Arrays are made up of variables of only one data type, but it is perfectly valid to create an Array of values, each of different data types. Here are a few examples:
                pre
                    code var groupOfAges = [12, 16, 59, 42, 0];&#10var groupOfGroups = [["Mary", "John"], ["Larry"], ["Zoe", "Lenny"]];&#10var groupOfRandomValues = [42, "Mary", true, "Don", 64, ["Nested String", 0], false];
                p Arrays are the most basic way of grouping values together in JavaScript, with a few caveats that contradict the expectations of those new to the language. One is that Arrays are what is known as "Zero Indexed". This essentially means that the first element in an array is not referenced "the 1st element", but rather "the 0th element" by the JavaScript interpeter. This is a convention in many programming languages. Thusly when wishing to reference a particular element of an array, one must subtract 1 from the count of elements up to the element they wish to reference. The following code snippet demonstrates this:
                pre
                    code var groupOfNames = ["Mary", "John", "Larry", "Brett"];&#10var firstNameInGroupOfNames = groupOfNames[0];&#10var secondNameInGroupOfNames = groupOfNames[1];&#10&#10console.log(firstNameInGroupOfNames);&#10// returns "Mary"&#10&#10console.log(secondNameInGroupOfNames);&#10// returns "John"
                p This convention seems straight forward enough to the beginner, but you'll see this convention unfortunately can often result in what are known as "off by one" errors when working with control flow statements (introduced later on in this article), as it is easily forgotten when first starting out. 
                p Lastly, I'll point out that should you desire to grab the last element in an array, regardless of it's length, one can always refer to the last element in an array like so:
                pre
                    code var groupOfNames = ["Mary", "John", "Larry", "Brett"];&#10var lastNameInGroupOfNames = groupOfNames[groupOfNames.length - 1];&#10&#10console.log(lastNameInGroupOfNames);&#10// returns "Brett"
                p This code snippet, to the beginner, might raise an eyebrow, as to why the "-1" is necessary. The .length property is an Array specific property that refers to the counted number of elements in the Array, but this number is always equivalent to index of the last element of the Array plus 1, as it is a count of the elements in the Array, and not simply a reference to the index. Thusly, to get the last element of an Array, one must reference it's length and then subtract 1 from it.
                p We'll be returning to Arrays later on in this article when we start working with control flow statements. For now, let's cover the other Reference data type in JavaScript, which also happens to be the most ubiquitously used, the JavaScript Object.
                h3 Objects
                p As mentioned earlier, the saying "Everything is an Object in JavaScript" is very often referenced when delving deep into the intricacies of the language. Objects are somewhat similar to Arrays in that they are stores of any kind of data types, with one small difference that makes Objects vastly more powerful than Arrays (at least when it comes to levels of abstraction). Unlike Arrays, which are automatically indexed by number, Objects can be indexed by strings. Thusly high level abstractions can be encapsulated within an Object. To start, one declares an Object very much like an array, but instead using the curly braces syntax, "{ }". Let's declare a basic object called <code class="inline-code">person</code> to demonstrate:
                pre
                    code var person = {&#10  name: "Mary",&#10  age: 25,&#10  favoriteFood: "chicken",&#10  isEmployed: true&#10};
                p Notice the way this object is declared. After instantiating our object, <code class="inline-code">person</code>, we open a set of curly braces and declare a <em>key</em>, <code class="inline-code">name</code>, and its corresponding <em>value</em>, <code class="inline-code">"Mary"</code>. This <em>key/value</em> pair declaration is then followed by a comma and carriage return before going onto declare more <em>key/value</em> pairs in a similar fashion until we finish off with the <em>key</em>, <code class="inline-code">"isEmployed"</code>, and finally close off the curly braces, encapsulating our new created Object, and finishing its declaration.
                p Notice the <em>keys</em> are always followed by a colon <code class="inline-code">":"</code> character, and then the <em>values</em> are declared very much like variables, ensuring strings are encapsulated by quotation marks, numbers and booleans are similarly declared like variables (without the quotation marks). Unlike arrays, where referencing these values by index can sometimes be unreadable, Objects allow the programmer to create <em>key/value</em> pair references that start to appear like English nouns, adjectives, and verbs.
                p So if we wish to reference our <code class="inline-code">person</code> Object's <code class="inline-code">name</code>, <code class="inline-code">age</code>, and <code class="inline-code">isEmployed</code> values. We can simply reference it like so, using the <em>object dot key</em> syntax:
                pre
                    code var person = {&#10  name: "Mary",&#10  age: 25,&#10  favoriteFood: "chicken",&#10  isEmployed: true&#10};&#10&#10console.log(person.name);&#10// returns "Mary"&#10&#10console.log(person.age);&#10// returns 25&#10&#10console.log(person.isEmployed);&#10// returns true
                p Objects can do so much in the realm of JavaScript. Hence why JavaScript is referred to as an "Object Oriented" programming language. Even the previous data types I've referenced can technically be thought of as Objects. We'll return to Objects later on when we cover Functions. We have now covered the basics of most common JavaScript data types. 
                p But declaring variables and storing data is only part of programming/coding. In order to work with this data in any meaningful way, we'll need other tools. What if we wish to change each element in an Array? What if we wish to list out only the <em>keys</em> or <em>values</em> in an object? This involves an essential concept in programming, the control flow statement.
                h2 Loops
                p Control Flow Statements, more commonly known as "loops", allow for a specific set of instructions to be invoked over and over again until a certain condition is met. After this condition is met, the loop is "broken out of", and the iteration is stopped. There are many forms of control flow statements, the most common being that of the "for loop". Other control flow statements include the "while loop" and the "do while" loop. There are also what are known as "higher order" functions which perform different operations on the data being passed to it. For the sake of keeping this article as introductory as possible, we'll only be covering one of these control flow statements, that of the classic "for loop".
                p Technically the for loop is a JavaScript function, which we haven't covered yet, but I feel that loops are a fine segue from the subject of Arrays and Objects, as loops are often used to iterate over, and sometimes change, the data within these Reference data types. Let's simply declare an array of names, then instead of referencing each one by index, we'll use a for loop to simply log each name to the console:
                pre
                    code var groupOfNames = ["Mary", "John", "Larry", "Lenny", "Bruce"];&#10&#10for (var i = 0; i <= groupOfNames.length -1; i++) {&#10  console.log(groupOfNames[i]);&#10}&#10&#10/*&#10 * returns:&#10 * Mary&#10 * John&#10 * Larry&#10 * Lenny&#10 * Bruce&#10*/
                p Here we declare an array of strings called <code class="inline-code">groupOfNames</code>. The for loop's syntax can look quite foreign to those who have never seen one before, so let's break it down. The reserved keyword <code class="inline-code">for</code> is first used to indicate that we wish to start a for loop. Afterwards which, we declare the logic to take place inside our for loop using an opening parentheses character, <code class="inline-code">(</code>. This is what indicates we are invoking a function call (more on that later). Inside these parentheses, we are defining a series of <em>arguments</em>, which tell the <code class="inline-code">for</code> function how to behave. Each argument is delineated by a comma character. In the case of a standard for loop, the function expects three arguments. Let's break down each argument in further detail.
                p Firstly we have the statement:
                pre
                    code var i = 0;
                p This statement should seem familiar, we simply declare a variable <code class="inline-code">i</code> and set it hold the value of the number <code class="inline-code">0</code>. The use of the letter <code class="inline-code">i</code> is based off of convention. It is meant to stand for <em>iterator</em>, and is generally what is used to keep count as we go through the loop.
                p The second argument to our for function call looks like a mathematical comparison, which indeed it is:
                pre
                    code i &lt= groupOfNames.length - 1;
                p Much like in mathematics, the <code class="inline-code">&lt=</code> indeed refers to "less than or equal to". This is our first equality statement covered thus far, and by the end of this article we will cover a few more. So what does this translate to? Well if our iterator, <code class="inline-code">i</code>, is <em>less than or equal to</em> the length of our <code class="inline-code">groupOfNames</code> array (minus one to account for the zero indexing). The statement here returns a boolean value of <code class="inline-code">true</code> or <code class="inline-code">false</code>. It is basically telling the for loop, as long as this condition is true, run the following code again.
                p Lastly we have the third argument of the for loop:
                pre
                    code i++;
                p This <code class="inline-code">++</code> is what is known as an increment operator. It is basically telling the for loop that at the end of each iteration, add one to the iterator number, <code class="inline-code">i</code>. Thusly on the first loop, after the first name is printed to the console, <code class="inline-code">i</code>, which was initially set to the number, <code class="inline-code">0</code>, is now set to the number, <code class="inline-code">1</code>. Let's also log to the console the iterator itself to hammer home the point:
                pre
                    code var groupOfNames = ["Mary", "John", "Larry", "Lenny", "Bruce"];&#10&#10for (var i = 0; i <= groupOfNames.length -1; i++) {&#10  console.log("index: ", i);&#10  console.log(groupOfNames[i]);&#10}&#10&#10/*&#10 * returns:&#10 * index: 0&#10 * Mary&#10 * index: 1&#10 * John&#10 * index: 2&#10 * Larry&#10 * index: 3&#10 * Lenny&#10 * index: 4&#10 * Bruce&#10*/
                p Hopefully the above example illustrates not only the basics of a classic for loop, but also reiterates the concepts around zero indexing of arrays introduced earlier. Let's now loop over an array of objects, and in the process, change each of the object's <code class="inline-code">age</code> value:
                pre
                    code var groupOfPeople = [&#10  {&#10    name: "Mary",&#10    age: 25&#10  },&#10  {&#10    name: "John",&#10    age: 37&#10  },&#10  {&#10    name: "Leslie",&#10    age: 64&#10  }&#10];&#10&#10for (var i = 0; i <= groupOfPeople.length - 1; i++) {&#10  var person = groupOfPeople[i];&#10  var statementOfAge = person.name + " is my name, my age is: " + person.age;&#10  console.log(statementOfAge);&#10&#10  person.age = ++person.age;&#10  var statementOfAgeAfterOneYear = "After one year's time, I, " + person.name + " will be " + person.age + " years old";&#10  console.log(statementOfAgeAfterOneYear);&#10}&#10&#10console.log(groupOfPeople);
                p This code is a bit more complicated than what we covered thus far, but hopefully my naming conventions have made it clear what the expected output of this for loop will be.
                p Let's cover first our declaration of our <code class="inline-code">groupOfPeople</code> array. Unlike our previous example, which simply was a collection of names, here we are declaring a series of objects, each object representing one single person. Each person is declared with a <code class="inline-code">name</code> and an <code class="inline-code">age</code> <em>key</em>, and have a corresponding string (their name), and number (their age). Very much like our previous example on referencing an array, we do so using the square bracket syntax, which is demonstrated within our for loop on the first line:
                pre
                    code var person = groupOfPeople[i];
                p This is more for semantics as to not be confusing. By shortening my reference to each individual <code class="inline-code">person</code> from <code class="inline-code">groupofPeople[i]</code>, I can more easily read the rest of the code inside my for loop.
                p Next a series of what is know as "string concatenation" operations occur. Unlike with numbers, when strings are <em>added</em> to each other using the <code class="inline-code">+</code> operator, the previous string is concatenated with whatever the following value is. If what follows is not a string, like the <code class="inline-code">age</code> value, JavaScript will <em>coerce</em> the value into a string.
                pre
                    code var statementOfAge = person.name + " is my name, my age is: " + person.age;
                p And of course, we then log out this statement to the console.
                p Next we then do something we have not covered in this article thus far. We reassign the person's <code class="inline-code">age</code> value to itself, but prepended with a <code class="inline-code">++</code> operator. Unlike in our for loop declaration, where the iterator is appended the <code class="inline-code">++</code> operator, the prepending of the <code class="inline-code">++</code> operator ensures that the value is changed prior to the remainder of the subsequent statement(s).
                pre
                    code person.age = ++person.age;
                p Then, we declare a new variable, <code class="inline-code">statementOfAgeAfterOneYear</code>, in which we then concatenate a new string, stating what the person's <code class="inline-code">age</code> will be after one year.
                pre
                    code var statementOfAgeAfterOneYear = "After one year's time, I, " + person.name + " will be " + person.age + " years old";
                p We once again log this statement to the console to reflect the change in the person's <code class="inline-code">age</code>.
                p Once the for loop is finished, delineated by the closing curly brace <code class="inline-code">}</code> character, we simply log to the console the entire <code class="inline-code">groupOfPeople</code> array. This demonstrates that the change of the <code class="inline-code">age</code> value on each of our persons in the <code class="inline-code">groupOfPeople</code> array did <em>actually change</em> our original array of objects. Let's take a look at our final print outs to the console:
                pre
                    code /*&#10 * returns:&#10 * Mary is my name, my age is: 25&#10 * After one year's time, I, Mary will be 26 years old&#10 * John is my name, my age is: 37&#10 * After one year's time, I, John will be 38 years old&#10 * Leslie is my name, my age is: 64&#10 * After one year's time, I, Leslie will be 65 years old&#10 * &#10 * &#10 * [&#10 *   {&#10 *     name: Mary,&#10 *     age: 26&#10 *   },&#10 *   {&#10 *     name: John,&#10 *     age: 38&#10 *   },&#10 *   {&#10 *     name: Leslie,&#10 *     age: 65&#10 *   }  &#10 * ]&#10*/ 
                p We have now covered the quintessential for loop. There are other control flow statements to investigate (while, do while loops), and modern JavaScript has many variations on these as well. Covering the varying control flow statements would take an entire article (or two) to really investigate the myriad of control flow statements available, but understanding the basic for loop can carry a JavaScript programmer very far, especially when used in the context of functions and conditional statements.
                h2 Functions and Conditionals
                p Functions are a series of procedures encapsulated within a block of code. Unlike procedures that take place within the global scope of the program (an explanation of scope will come shortly), functions take in a form of input and generate a form of output that is related to the input. Prior to covering functions however, I feel it is necessary to briefly touch on conditional statements.
                p Recall in our standard for loop examples, we have encapsulated inside the initial parentheses, <code class="inline-code">( )</code>, a series of <em>arguments</em>, delineated by a semicolon character, <code class="inline-code">;</code>.
                pre
                    code for (var i = 0; i <= groupOfPeople.length - 1; i++) {
                p Note the second <em>argument</em> in this for loop:
                pre
                    code i <= groupOfPeople.length - 1;
                p You may recall in our previous section that this utilizes a mathematical comparison, the <code class="inline-code">&lt=</code> or <em>less than or equal</em> operator which in essence tells our for loop that as long as "<code class="inline-code">i</code> is <em>less than or equal</em> to the <code class="inline-code">groupOfPeople</code> array's length," to continue repeating the following sequence of code encapsulated inside of the curly braces <code class="inline-code">{ }</code>.
                p This is what is known as a <em>conditional statement</em>. A conditional statement declares a comparative operation between two or more values that either returns <code class="inline-code">true</code> or <code class="inline-code">false</code>.
                p Technically these statements return <em>truthy</em> or <em>falsy</em> values, and this is one of the major reasons JavaScript is often criticized, as these comparitive statements can sometimes return a boolean value that is not expected. In the interest of keeping this introduction to the concept of conditional statements simple, however, we will not delve into these nuances at this time.
                h3 If Statements
                p The most common conditional statement one will see in many programs is the <code class="inline-code">if</code> statement. The <code class="inline-code">if</code> statement is very readable even to novice programmers, and relatively easy to pick up. Let us examine this simple block of code:
                pre
                    code var person = {&#10  name: "Janice",&#10  age: 42&#10}&#10&#10if (person.age == 42) {&#10  console.log("person's age is 42!");&#10}&#10&#10// returns "person's age is 42!"
                p This <code class="inline-code">if</code> statement is almost self explanatory, but let's break it down regardless. The reserved keyword, <code class="inline-code">if</code>, is used to instantiate a conditional statement. Within the parentheses characters <code class="inline-code">( )</code>, a conditional statement is passed which can only return a <code class="inline-code">true</code> or <code class="inline-code">false</code> boolean value. In this case, the <code class="inline-code">person</code> object's <code class="inline-code">age</code> <em>value</em> is compared to the number, <code class="inline-code">42</code>, using the double equal sign equivalency operator, <code class="inline-code">==</code>. Should the <code class="inline-code">person.age</code> <em>value</em> be equal to <code class="inline-code">42</code>, the code encapsulated within the curly braces is executed. In this case, the <code class="inline-code">person.age</code> variable is equal to <code class="inline-code">42</code>, so the logged message is dispalyed in the console.
                p Had the <code class="inline-code">person.age</code> <em>not</em> have been equal to <code class="inline-code">42</code>, no call to the console would have been invoked, and nothing would have been logged or outputted.
                h3 Else Clauses
                p While sometimes in programs, having a simple statement that only runs if a condition is true works just fine, but other times we wish to run some other code should that statement <em>not</em> return true. Very much like the syntax of the English language, we can follow up our <code class="inline-code">if</code> statement with an <code class="inline-code">else</code> statement, which should run if our initial <code class="inline-code">if</code> statement not return <code class="inline-code">true</code>. Here is a simple example:
                pre
                    code var person = {&#10  name: "Janice",&#10  age: 43&#10}&#10&#10if (person.age == 42) {&#10  console.log("person's age is 42!");&#10} else {&#10  console.log("person's age is NOT 42!");&#10}&#10&#10// returns "person's age is NOT 42!"
                p Else clauses in <code class="inline-code">if</code> statements are useful when there is some other outcome we wish to occur should our initial conditional statement fails.
                h3 Else If Clauses
                p But what if we have multiple conditionals we wish to check against? Let's utilize a for loop with conditional statements to demonstrate how to do so, now also using the <code class="inline-code">else if</code> clause:
                pre
                    code var groupOfPeople = [&#10  {&#10    name: "Mary",&#10    age: 21&#10  },&#10  {&#10    name: "John",&#10    age: 18&#10  },&#10  {&#10    name: "Leslie",&#10    age: 25&#10  }&#10];&#10&#10for (var i = 0; i <= groupOfPeople.length - 1; i++) {&#10  var person = groupOfPeople[i];&#10  var statement = "";&#10&#10  if (person.age < 21) {&#10    statement = "My name is: " + person.name + " and I am under 21";&#10  } else if (person.age == 21) {&#10    statement = "My name is: " + person.name + " and I recently turned 21";&#10  } else {&#10    statement = "My name is: " + person.name + " and I am over 21";&#10  }&#10&#10  console.log(statement);&#10}&#10&#10/*&#10 * returns:&#10 * My name is: Mary and I recently turned 21&#10 * My name is: John and I am under 21&#10 * My name is: Leslie and I am over 21&#10*/
                p Here we utilize a for loop which utilizes two conditional clauses, whether <code class="inline-code">person.age</code> is less than <code class="inline-code">21</code>:
                pre
                    code (person.age < 21)
                p And also to see if the person's age is equal to <code class="inline-code">21</code>:
                pre
                    code (person.age == 21)
                p Within our for loop, we iterate over the <code class="inline-code">groupOfPeople</code> array, checking each object's <code class="inline-code">age</code> property to see if the number value it returns is either <em>less than 21</em> or <em>equal to 21</em>. If neither of these conditions returns <code class="inline-code">true</code>, the <code class="inline-code">else</code> clause is run:
                pre
                    code statement = "My name is: " + person.name + " and I am over 21";
                p Also note here how we initialize the variable statement to an empty string:
                pre
                    code var statement = "";
                p This <code class="inline-code">statement</code> variable is set to an empty string every time our for loop runs, and then is assigned a new value based off of the set of <code class="inline-code">if</code>/<code class="inline-code">else if</code>/<code class="inline-code">else</code> conditionals that evaluate afterwards. Finally, at the end of each iteration, the <code class="inline-code">statement</code> is logged to the console. 
                h3 Functions
                p Functions are a series of code that is encapsulated into a reusable series of control flow statements and conditionals. It takes a series of inputs and outputs a result related to that input. Let's say I have two different arrays which include objects that represent people and their respective ages. I wish to extract all the people from these arrays that are over 21 and store them in a new array called <code class="inline-code">canDrink</code>. I then wish to log this new <code class="inline-code">canDrink</code> array to the console. I could do so with two consecutive for loops like so:
                pre
                    code var groupOne = [&#10  {&#10    name: "Mary",&#10    age: 25&#10  },&#10  {&#10    name: "Albert",&#10    age: 16&#10  },  &#10  {&#10    name: "Louis",&#10    age: 23&#10  }&#10];&#10&#10var groupTwo = [&#10  {&#10    name: "Clarence",&#10    age: 42&#10  },&#10  {&#10    name: "Alphonse",&#10    age: 12&#10  },  &#10  {&#10    name: "Lucy",&#10    age: 24&#10  }&#10];&#10&#10var canDrink = [];&#10&#10for (var i = 0; i <= groupOne.length -1; i++) {&#10  var person = groupOne[i];&#10  if (person.age > 21) {&#10    canDrink.push(person);&#10  }&#10}&#10&#10for (var i = 0; i <= groupTwo.length -1; i++) {&#10  var person = groupTwo[i];&#10  if (person.age > 21) {&#10    canDrink.push(person);&#10  }&#10}&#10&#10console.log(canDrink);&#10&#10/*&#10 * returns:&#10 * [&#10 *  {&#10 *    name: "Mary", &#10 *    age: 25&#10 *  },&#10 *  {&#10 *    name: "Louise",&#10 *    age: 23&#10 *  },&#10 *  {&#10 *    name: "Clarence",&#10 *    age: 42&#10 *  },&#10 *  {&#10 *    name: "Lucy",&#10 *    age: 24&#10 *  }&#10 * ] &#10*/
                p As you can see, the two for loops are only slightly different, one grabbing the persons from <code class="inline-code">groupOne</code> who are over <code class="inline-code">21</code>, and one grabbing the persons from <code class="inline-code">groupTwo</code> who are over <code class="inline-code">21</code>. The code, <code class="inline-code">canDrink.push</code>, by the way, is what is known as a method, specifically a method owned by the Array prototype (more on prototypes in a future article). The <code class="inline-code">push</code> method is relatively self explanatory. It simply adds the element passed to it onto the array it is called on. Thusly the <code class="inline-code">person</code> object is being <em>pushed</em> onto the end of the <code class="inline-code">canDrink</code> array in this particular example.
                p There's a simple saying in programming, "Don't Repeat Yourself" (known by the acronym, DRY), and while this rule isn't exactly dogma, one should consider rewriting code that repeats itself like our example here. Note that there really is just one difference between the two for loops (the array being operated on).
                p This is a classic case where a function can be utilized to encapsulate our for loop and the logic it uses so that we can accomplish the same task with a bit less code. See the following example:
                pre
                    code var groupOne = [&#10  {&#10    name: "Mary",&#10    age: 25&#10  },&#10  {&#10    name: "Albert",&#10    age: 16&#10  },  &#10  {&#10    name: "Louis",&#10    age: 23&#10  }&#10];&#10&#10var groupTwo = [&#10  {&#10    name: "Clarence",&#10    age: 42&#10  },&#10  {&#10    name: "Alphonse",&#10    age: 12&#10  },  &#10  {&#10    name: "Lucy",&#10    age: 24&#10  }&#10];&#10&#10var canDrink = [];&#10&#10function grabPersonsOfLegalAgeFrom(group) {&#10  for (var i = 0; i <= group.length -1; i++) {&#10    var person = group[i];&#10    if (person.age > 21) {&#10      canDrink.push(person);&#10    }&#10  }&#10}&#10&#10grabPersonsOfLegalAgeFrom(groupOne);&#10grabPersonsOfLegalAgeFrom(groupTwo);&#10&#10console.log(canDrink);&#10&#10/*&#10 * returns:&#10 * [&#10 *  {&#10 *    name: "Mary", &#10 *    age: 25&#10 *  },&#10 *  {&#10 *    name: "Louise",&#10 *    age: 23&#10 *  },&#10 *  {&#10 *    name: "Clarence",&#10 *    age: 42&#10 *  },&#10 *  {&#10 *    name: "Lucy",&#10 *    age: 24&#10 *  }&#10 * ] &#10*/
                p Functions are one of the essential building blocks of nearly all programming languages. By encapsulating our for loop inside of a declared function, <code class="inline-code">grabPersonsOfLegalAgeFrom</code>, and passing it the more generic argument, <code class="inline-code">group</code>, we have created a piece of reusable logic. Notice that we even call it <em>twice</em>, using our first for loop to grab all persons within the <code class="inline-code">groupOne</code> array that are over <code class="inline-code">21</code> and pushing them into the <code class="inline-code">canDrink</code> array, and then calling the <code class="inline-code">grabPersonsOfLegalAgeFrom</code> function once again to do the same with the <code class="inline-code">groupTwo</code> array. Let's break down this new chunk of code:
                pre
                    code var canDrink = [];&#10&#10function grabPersonsOfLegalAgeFrom(group) {&#10  for (var i = 0; i <= group.length -1; i++) {&#10    var person = group[i];&#10    if (person.age > 21) {&#10      canDrink.push(person);&#10    }&#10  }&#10}&#10&#10grabPersonsOfLegalAgeFrom(groupOne);&#10grabPersonsOfLegalAgeFrom(groupTwo);
                p Firstly, we instantiate our <code class="inline-code">canDrink</code> variable, assigning it the value of an empty array. We then invoke the creation of a new function by utilizing the reserved keyword, <code class="inline-code">function</code>. The new function is assigned the name <code class="inline-code">grabPersonsOfLegalAgeFrom</code>. Note that the lengthy name is a convention to ensure the readability of our code. 
                pre
                    code <b>function</b> grabPersonsOfLegalAgeFrom
                p While I could have easily named the function <code class="inline-code">grabAdults</code> or <code class="inline-code">grabPeople</code> or even just <code class="inline-code">g</code>, I try my best to name my functions in a way that other programmers (or my future self) can easily understand what the function is supposed to do, even if they don't necessarily understand the code inside the function itself.
                p The declared <code class="inline-code">grabPersonsOfLegalAgeFrom</code> function is then appended a pair of parentheses <code class="inline-code"> ( )</code>, inside of which the <em>argument</em>, <code class="inline-code">group</code> is provided.
                pre
                    code function grabPersonsOfLegalAgeFrom(<b>group</b>)
                p Arguments are the input to functions. Ideally, arguments should be somehow related to the function's output. A function can be declared with as many arguments as you'd like, including no arguments. When declared, a JavaScript function makes no assumptions as to the data types of the variables being passed to it as arguments. Thusly in truth we could have passed a string variable, a number variable, an object, etc. to the <code class="inline-code">grabPersonsOfLegalAgeFrom</code> function and JavaScript would still <e>attempt</em> to execute the code (possibly returning some unexpected output). 
                p After the declaration of our argumeents, we close off our parentheses, <code class="inline-code">( )</code>, and then instantiate the function body using curly braces, <code class="inline-code"> { }</code>. Inside the body of our function, we then encapsulate our previous logic from before. This time, however, the generic <code class="inline-code">group</code> argument is passed instead of the specific <code class="inline-code">groupOne</code> and <code class="inline-code">groupTwo</code> arrays. Afterwards which, we close off our function declaration using a closing curly brace, <code class="inline-code">}</code>.
                p Lastly we <em>invoke</em> or <em>call</em> our function directly by simply writing it's name, then passing the <code class="inline-code">groupOne</code> array as an argument to the <code class="inline-code">grabPersonsOfLegalAgeFrom</code> function. This syntax essentially tells the JavaScript interpreter, "run the code inside this function, and pass this variable as the argument(s) to it".
                pre
                    code grabPersonsOfLegalAgeFrom(groupOne);&#10grabPersonsOfLegalAgeFrom(groupTwo);
                p Had these two lines been omitted, the <code class="inline-code">canDrink</code> array would remain empty, as the function, <code class="inline-code">grabPersonsOfLegalAgeFrom</code>, although indeed is <em>defined</em>, was never <em>called</em>, and the code inside of it, thusly, never ran.
                h3 Scope and Returns
                p You'll note the declaration of the array <code class="inline-code">canDrink</code> in the previous example is instantiated prior to the declaration of the <code class="inline-code">grabPersonsOfLegalAgeFrom</code> function:
                pre
                    code var canDrink = [];&#10&#10function grabPersonsOfLegalAgeFrom(group) {
                p If you take some extra time to think on this, one might wonder: "Why not just instantiate the <code class="inline-code">candDrink</code> array <em>inside</em> of the <code class="inline-code">grabPersonsOfLegalAgeFrom</code> function? Why declare it <em>prior</em> to the function?" For the sake of demonstration, let's go ahead and input this code into our Developer Console and see the result of doing so:
                pre
                    code var groupOne = [&#10  {&#10    name: "Mary",&#10    age: 25&#10  },&#10  {&#10    name: "Albert",&#10    age: 16&#10  },  &#10  {&#10    name: "Louis",&#10    age: 23&#10  }&#10];&#10&#10var groupTwo = [&#10  {&#10    name: "Clarence",&#10    age: 42&#10  },&#10  {&#10    name: "Alphonse",&#10    age: 12&#10  },  &#10  {&#10    name: "Lucy",&#10    age: 24&#10  }&#10];&#10&#10function grabPersonsOfLegalAgeFrom(group) {&#10  var canDrink = [];&#10  for (var i = 0; i <= group.length -1; i++) {&#10    var person = group[i];&#10    if (person.age > 21) {&#10      canDrink.push(person);&#10    }&#10  }&#10}&#10&#10grabPersonsOfLegalAgeFrom(groupOne);&#10grabPersonsOfLegalAgeFrom(groupTwo);&#10&#10console.log(canDrink);
                p If we copy this code into the browser's console and run it, we'll receive the following error:
                pre
                    code Uncaught ReferenceError: canDrink is not defined
                p To the beginner, this might cause some annoyance. One can clearly see the <code class="inline-code">canDrink</code> variable is declared, just this time inside of the <code class="inline-code">grabPersonsOfLegalAgeFrom</code> function. Why did this subtle change cause an error? Before explaining, let's adjust our code slightly by putting a log to the console inside of the <code class="inline-code">grabPersonsOfLegalAgeFrom</code> function:
                pre
                    code function grabPersonsOfLegalAgeFrom(group) {&#10  var canDrink = [];&#10  for (var i = 0; i <= group.length -1; i++) {&#10    var person = group[i];&#10    if (person.age > 21) {&#10      canDrink.push(person);&#10    }&#10  }&#10  console.log(canDrink);&#10}&#10&#10grabPersonsOfLegalAgeFrom(groupOne);&#10grabPersonsOfLegalAgeFrom(groupTwo);&#10&#10console.log(canDrink);
                p The output to this gives us some insights into what is happening. By having a log to the console inside of our <code class="inline-code">grabPersonsOfLegalAgeFrom</code> function, as well as outside of it, we see that the inner logs to the console are actually showing us results:
                pre
                    code /*&#10 * returns&#10 * [&#10 *   {&#10 *     name: "Mary",&#10 *     age: 25&#10 *   },&#10 *   {&#10 *     name: "Louis",&#10 *     age: 23&#10 *   }&#10 * ]&#10 * and then returns&#10 * [&#10 *   {&#10 *     name: "Clarence",&#10 *     age: 42,&#10 *   },&#10 *   {&#10 *     name: "Lucy",&#10 *     age: 24,&#10 *   }&#10 * ]&#10 * and then logs the error:&#10 * Uncaught ReferenceError: canDrink is not defined&#10*/
                p First and foremost, unlike our previous return value, which was all encapsulated within a single array, the inner <code class="inline-code">canDrink</code> array is logged <em>twice</em>: two separate arrays are presented each from the respective original <code class="inline-code">groupOne</code> and <code class="inline-code">groupTwo</code> arrays. The people inside it are indeed over <code class="inline-code">21</code>, but why two arrays?
                p Scope within the JavaScript programming language can be thought of as the <em>context</em> in which variables can be "seen". Prior to our little investigation here, our <code class="inline-code">canDrink</code> array was instantiated inside of what is known as the <em>global scope</em>. This means there are no contexts outside of the one we instantiated it. It is visible to all functions, for loops, if statements, etc. because it was instantiated at the top most level, or "global", scope.
                p When we decided to investigate and see what happened if we instead instantiated the <code class="inline-code">canDrink</code> array inside of the <code class="inline-code">grabPersonsOfLegalAgeFrom</code> function, we made the <code class="inline-code">canDrink</code> variable "visible" only within the context of the <code class="inline-code">grabPersonsOfLegalAgeFrom</code> function. This means that the inner <code class="inline-code">for</code> loop and <code class="inline-code">if</code> statement all had access to and could "see" that <code class="inline-code">canDrink</code> exists, but any reference to it outside of the function would be as if we were to try and reference a variable we never declared. In programming, you cannot directly reference a variable that you did not first instantiate. In this case, we cannot reference the <code class="inline-code">canDrink</code> array outside of the function.
                p One might then say, "Ok, so why not just end our little experiment here and just declare <code class="inline-code">canDrink</code> as a global variable?". For the sake of this trivial program, we indeed could do so, but in larger scale applications, it is considered poor practice to declare every variable as a global variable. Global variables indeed exist in nearly every program, but every time we instantiate a variable, we are asking the browser, and by extension, the computer it's running on, to reserve a new place in memory (RAM) to hold onto the reference of our new variable. In a large enough program, if all variables were declared simply in the global scope, the memory footprint of our program would become unnecessary large.
                p Additionally, variables declared in the global scope that do not use the reserved keyword <code class="inline-code">const</code> (more on that in the next article), can be redeclared by any function that has access to the global scope. In other words, if you have multiple programmers working on a single file and one of them accidentally overwrites a global variable, they may throw off all the other functions that reference that variable, thus creating unexpected behavior in our program. Worse yet, our program wouldn't even throw any useful error messages as this is technically viable JavaScript, and thusly it would be difficult to pinpoint where exactly this unexpected behavior was originating from.
                p Please note that one cannot eliminate the use of global variables entirely. It's just good practice to keep the global scope of our programs as clean and concise as possible, ensuring variables are only declared in the global scope when they are to be returned to the user in some form or fashion, or are utilized by too many functions to justify repeatedly encapsulating said variables in multiple local scopes.
                p Ultimately when JavaScript threw this ReferenceError, it was not only letting us know that we didn't have a global variable called <code class="inline-code">canDrink</code>, but it was helping us determine what course of action to take to resolve this error (hopefully in an elegant fashion). Rather than simply reverting back to putting <code class="inline-code">canDrink</code> into the global scope, let's use a <code class="inline-code">return</code> statement within our <code class="inline-code">grabPersonsOfLegalAgeFrom</code> function, and then encapsulate the return values into variables that we can then utilize to return our <code class="inline-code">canDrink</code> array as before:
                pre
                    code var groupOne = [&#10  {&#10    name: "Mary",&#10    age: 25&#10  },&#10  {&#10    name: "Albert",&#10    age: 16&#10  },  &#10  {&#10    name: "Louis",&#10    age: 23&#10  }&#10];&#10&#10var groupTwo = [&#10  {&#10    name: "Clarence",&#10    age: 42&#10  },&#10  {&#10    name: "Alphonse",&#10    age: 12&#10  },  &#10  {&#10    name: "Lucy",&#10    age: 24&#10  }&#10];&#10&#10function grabPersonsOfLegalAgeFrom(group) {&#10  var canDrink = [];&#10  for (var i = 0; i <= group.length -1; i++) {&#10    var person = group[i];&#10    if (person.age > 21) {&#10      canDrink.push(person);&#10    }&#10  }&#10  return canDrink;&#10}&#10&#10var personsOfLegalAgeFromGroupOne = grabPersonsOfLegalAgeFrom(groupOne);&#10var personsOfLegalAgeFromGroupTwo = grabPersonsOfLegalAgeFrom(groupTwo);&#10&#10var globalCanDrink = personsOfLegalAgeFromGroupOne.concat(personsOfLegalAgeFromGroupTwo);&#10&#10console.log(globalCanDrink);
                p This is a contrived example, and probably is no better than the prior examples where <code class="inline-code">canDrink</code> was initially declared in the global scope as an empty array. This example, however, demonstrates the use of the <code class="inline-code">return</code> keyword, which is often used when you wish to output a value from a function and then subsequently encapsulate it in another variable (or work with it directly in another function).
                p By returning the <code class="inline-code">canDrink</code> array from our <code class="inline-code">grabPersonsOfLegalAgeFrom</code> function, we are now able to reference that value directly. Often this is more easily managed by declaring a variable that then holds the return value of the invoked function. 
                p To hammer home the point let's look at how our calls to <code class="inline-code">grabPersonsOfLegalAgeFrom</code> function have changed. In our previous piece of code, in which the <code class="inline-code">canDrink</code> array was initially declared in the global scope, our calls to <code class="inline-code">grabPersonsOfLegalAgeFrom</code> were simply invoked, <em>pushing</em> the people who's age is over <code class="inline-code">21</code> into the global <code class="inline-code">canDrink</code> array:
                pre
                    code grabPersonsOfLegalAgeFrom(groupOne);&#10grabPersonsOfLegalAgeFrom(groupTwo);
                p Our new version instead encapsulates the returned <code class="inline-code">canDrink</code> array inside two new variables:
                pre
                    code var personsOfLegalAgeFromGroupOne = grabPersonsOfLegalAgeFrom(groupOne);&#10var personsOfLegalAgeFromGroupTwo = grabPersonsOfLegalAgeFrom(groupTwo);
                p And then uses the Array prototype's <code class="inline-code">.concat</code> method to essentially merge/join the two arrays together so that our result is the same as our previous example's. I chose to encapsulate this in a variable called <code class="inline-code">globalCanDrink</code> to ensure that the differentiation from the canDrink's local scope is made overtly clear.
                pre
                    code var globalCanDrink = personsOfLegalAgeFromGroupOne.concat(personsOfLegalAgeFromGroupTwo);&#10&#10console.log(globalCanDrink);
                p Finally a call to the console shows our results, which are the same as our original example's:
                pre
                    code /*&#10 * returns:&#10 * [&#10 *  {&#10 *    name: "Mary", &#10 *    age: 25&#10 *  },&#10 *  {&#10 *    name: "Louise",&#10 *    age: 23&#10 *  },&#10 *  {&#10 *    name: "Clarence",&#10 *    age: 42&#10 *  },&#10 *  {&#10 *    name: "Lucy",&#10 *    age: 24&#10 *  }&#10 * ] &#10*/
                h1 Conclusion 
                p The subject of JavaScript is so vast that one could spend a lifetime trying to cover it all in detail. The same technically could be said of CSS and even HTML. Ultimately, however, the use of these three tools together are the backbone of the web itself, and it is my opinion that exploring each of these subjects together in the process of making web pages and applications to be the best way to learn each of them, as they were originally designed to work in concert together.
                p In my next article, I will be walking you through a small codebase that exemplifies a basic todo list application. It will utilize many of the concepts we have covered thus far as well as concepts covered in my previous two articles, <a class="inline-link" aria-label="a link to the article HTML: The Web's Skeleton" role="link" href="./html_the_webs_skeleton.html">HTML: The Web's Skeleton</a>, and <a class="inline-link" aria-label="a link to the article CSS: The Web's Makeup" role="link" href="./css_the_webs_makeup.html">CSS: The Web's Makeup</a>. Additionally, very basic git commands and other developer tools will be utilized to give you an introduction into the essential workflow of creating a basic interactive web page.
                p I do hope that this introduction to the JavaScript Programming Language has proven insightful and useful to you. Originally my hope was to encapsulate the subject matter into a single article, but as you can see, JavaScript is a vast language, and we haven't even started utilizing it on an acutal web page. I look forward to shedding further light on the topic in the next article, <a class="inline-link" aria-label="link to the article: HTML, CSS, and JS" role="link" href="#">HTML, CSS, and JS: All Together</a>.
            div.foot-arrows
                button.icons#up-arrow(title="back to top" aria-label="back-to-top" alt="back to top" role="navigation")
        footer
            div.foot-text
                ul.foot-text-menu(role="none")
                    li.foot-text-items(role="none")
                        div.foot-text-item#text-sun(aria-label="light-mode-text" role="none") light
                    li.foot-text-items(role="none")
                        div.foot-text-item#text-git(aria-label="git-text" role="none") git
                    li.foot-text-items(role="none")
                        div.foot-text-item#text-linkedin(aria-label="linkedin-text" role="none") linkedin
                    li.foot-text-items(role="none")
                        div.foot-text-item#text-mastodon(aria-label="mastodon-text" role="none") social
                    li.foot-text-items(role="none")
                        div.foot-text-item#text-moon(aria-label="dark-mode-text" role="none") dark
            div.foot-division
            ul.foot-menu(role="menu")
                li.foot-items(role="menuitem")
                    button.footer-button#sun-button
                        div.icons#sun(aria-label="light-mode" role="button") light
                li.foot-items(role="menuitem")
                    a.icons#git(aria-label="git" role="link" target="_blank" rel="noopener noreferrer" href="https://github.com/tomit4") git
                li.foot-items(role="menuitem")
                    a.icons#linkedin(aria-label="linkedin" target="_blank" rel="noopener noreferrer" role="link" href="https://linkedin.com/in/brian-hayes-33496067") linkedin
                li.foot-items(role="menuitem")
                    a.icons#mastodon(aria-label="social" target="_blank" rel="noopener noreferrer" role="link" href="https://mas.to/@brianhayesdev") social
                li.foot-items(role="menuitem")
                    button.footer-button#moon-button
                        div.icons#moon(aria-label="dark-mode" role="button") dark
        script(src="../index.js" defer default)
        script(data-goatcounter="https://770zjco994espvxwibsva.goatcounter.com/count" async src="//gc.zgo.at/count.js")
