doctype html
html(lang = "en")
    head
        title brianhayes.dev
        meta(charset='UTF-8')
        meta(name='viewport' content='width=device-width, initial-scale=1')
        meta(name="robots" content="follow, index, max-snippet:-1, max-image-preview:large")
        meta(name='description' content='A simple blog written by a Web Developer, for Web Developers. Covering Basics of HTML, CSS, JavaScript, and much more, including Linux and other subjects related to technology.')
        script(src="../toggle-temp.js")
        link(rel="icon" type="image/x-icon" href="../assets/icons/favicon.png")
        link(rel='icon' type='application/rss+xml' title='RSS Feed' href='../assets/feed.rss')
        link(rel='stylesheet' type='text/css' href='../css/style.css')
        link(rel="preload" href="../css/style.css" as="style" onload="this.onload=null;this.rel='stylesheet'")
        noscript
            link(rel="stylesheet" href="../css/style.css")
    body
        nav
            ul.nav-menu(role="menu")
                li.nav-items(role="menuitem")
                    a.icons#contact(aria-label="email" role="menuitem" href="mailto: brianhayes.dev@protonmail.com") contact
                li.nav-items(role="menuitem")
                    a.icons#folio(aria-label="folio" role="navigation" href="../folio.html") folio
                li.nav-items(role="menuitem")
                    a.icons#home(aria-label="home" role="navigation" href="../index.html") home
                li.nav-items(role="menuitem")
                    a.icons#blog(aria-label="blog" role="navigation" href="/blog/") blog
                li.nav-items(role="menuitem")
                    a.icons#rss(aria-label="rss" role="menuitem" href="../assets/feed.rss") rss
        div.nav-division
        div.nav-text
            ul.nav-text-menu(role="menu")
                li.nav-text-items(role="menubar")
                    div.nav-text-item#text-contact(aria-label="email" role="menuitem") email
                li.nav-text-items(role="menubar")
                    div.nav-text-item#text-folio(aria-label="folio-text" role="menuitem") folio
                li.nav-text-items(role="menubar")
                    div.nav-text-item#text-home(aria-label="home-text" role="menuitem") home
                li.nav-text-items(role="menubar")
                    div.nav-text-item#text-blog(aria-label="blog-text" role="menuitem") blog
                li.nav-text-items(role="menubar")
                    div.nav-text-item#text-rss(aria-label="rss-text" role="menuitem") rss 
        div.container.fadein
            div.arrows
                a.icons#left-arrow(aria-label="previous" role="navigation" href="")
                a.icons#right-arrow(aria-label="next" role="navigation" href="")
            div.arrows-text
                span.arrow-text#text-left-arrow prev
                span.arrow-text#text-right-arrow next
            main.title
                div.title-card
                    header JavaScript
                    div.subtitle The Web's Muscles
                    div.aside Published on 
                        time(datetime="2023-06-25") 2023-06-25
                picture(role="img")
                    source(media="(min-width: 62.5em)" srcset="../assets/images/intro_images/start_100m_desktop.jpg")
                    source(media="(min-width: 37.5em)" srcset="../assets/images/intro_images/start_100m_tablet.jpg")
                    img.intro-image(src="../assets/images/intro_images/start_100m_mobile.jpg" alt="A 100M Dash in Lisse, Zuid-Holland, circa 1968" title="A 100M Dash in Lisse, Zuid-Holland, circa 1968" cite="https://commons.wikimedia.org/wiki/File:Start_100m_dames._Lidy_Makkinje-Vonk,_Corrie_Bakker,_Wilma_van_der_Berg,_C._Civa,_Bestanddeelnr_921-3633.jpg?useskin=vector")
                figcaption A 100M Dash in Lisse, Zuid-Holland, circa 1968
                blockquote(cite="https://pdfroom.com/books/you-dont-know-js-async-performance/zW5n16ox2Nq") &#8220The only thing worse than not knowing why some code breaks is not knowing why it worked in the first place! It's the classic &#8216house of cards&#8217 mentality: &#8216it works, but I'm not sure why, so nobody touch it!&#8217 You may have heard, &#8216Hell is other people&#8127 (Sartre), and the programmer meme twist, &#8216Hell is other people's code.&#8217 I believe truly: &#8216Hell is not understanding my own code.&#8217 &#8221
                    div.quote_author -Kyle Simpson
            article.demo-button
                h1 Introduction
                p You may have noticed that this article's publish date is far later than my previous article on <a class="inline-link" aria-label="link to article, css, the web's makeup" role="link" href="./css_the_webs_makeup.html">CSS: The Web's Makeup</a>. While this is mainly due to other responsibilities which have as of recent required my attention, I must also admit that I have been a bit intimidated on writing on the subject of JavaScript. JavaScript is the first programming language I ever learned, and I am still continuing to learn it. Thusly, I don't yet feel I have any authority to write on the subject of JavaScript, even in the context of this article, which is meant as an introduction.
                p Nevertheless, in the context of introducing you, the reader, to the general tools of the web, I cannot avoid talking on the incredibly large role JavaScript has played in bringing the web to the state it is in today. I have come across many social media posts that joke/deride JavaScript for no longer being a programming language reserved solely to the realm of the web, but rather has pervaded into nearly every facet of modern computer applications. 
                p Indeed with the arrival of the JavaScript runtime, NodeJS, the Electron Software Framework, and the React Native Framework, JavaScript has made its way from its humble beginnings as a simple scripting language meant solely to add small bits of interactivity to web pages, to a full fledged programming language that can interact with native C libraries directly on your computer (NodeJS), interact with User Interface libraries to write desktop applications (Electron), and even write platform agnostic mobile applications (React Native). It is not an understatement to say that JavaScript is everywhere!
                p Perhaps you might now understand my reluctance to cover such a vast subject, as a single article, even one that attempts to be an introduction to the very basic aspects of the language, can only barely scratch the surface of the subject that is JavaScript. Indeed, entire blogs, books, videos, and podcasts have been produced that solely revolve around The JavaScript Programming Language and the vast ecosystem around it. 
                p JavaScript is both beloved and hated by programmers for a wide variety of reasons, sometimes justified, sometimes not, a topic I will briefly touch on later in this article. Regardless, JavaScript has long been, and continues to be, one of the most popular programming languages in the world due to its ubiquity within the world wide web. In short, with the rise of the web, so too went JavaScript. 
                p Even if it is not one's intent to become a web developer, it is in my humble opinion that it is worthwhile for anyone looking to create any substantial application on the web to at least have a basic familiarity with JavaScript's syntax, especially when it comes to how it interacts with the Document Object Model.
                p This will certainly not be my only article written which involves JavaScript in the context of programming, and I am sure to not cover the entirety of the JavaScript programming language in this short article. Nevertheless, in this article, it is my hope to give you a basic understanding of JavaScript and by extension, core programming concepts. This will include the basics of variable declaration and usage, boolean statements, conditionals, function declarations, arrays, objects, and finally basic interactions with the console and document objects. Firstly, however, I feel it is important to briefly overview what is JavaScript and it's history.
                h2 What Is JavaScript?
                p JavaScript is a high level programming language that originally was created to add interactivity to HTML elements after the page had loaded. The language is dynamically typed, supporting prototype based object oriented as well as functional and imperative programming styles. All major web browsers include a dedicated JavaScript engine which executes code on the user's device. On its own, JavaScript does not have native interfaces for interacting with standard Input/Output (I/O), unlike lower level languages, but JavaScript is often utilized with a wide array of APIs via a runtime system native to the browser, which facilitates interactivity with I/O.
                p As mentioned in the introduction, JavaScript is no longer solely the domain of client side scripting on the browser. That said, JavaScript still is predominantly utilized for client side scripting to add interactivity to the browser via scripted events which are generally utilized to add interactive behavior to the web. Examples of this interactive behavior include:
                ul
                    li
                        p Loading new content to the web page without reloading the entire page.
                    li
                        p Interacting with HTML elements via dynamically changing CSS attributes to add animations
                    li
                        p Validating Input Forms
                    li 
                        p Redirecting the User to Another Page
                    li
                        p Storing and retrieving data on the user's device (i.e. <a class="inline-link" aria-label="wikipedia link to http cookie article" target="_blank" rel="noopener noreferrer" role="link" href="https://en.wikipedia.org/w/index.php?title=HTTP_cookie">HTTP cookies</a>).
                p The use of JavaScript has more recently moved outside of the realm of the browser and into the server space with the advent of NodeJS arriving on the programming scene in 2009. This alone would have solidified JavaScript as the predominant programming language of the web, as it now allowed for servers as well as client side applications to be entirely written in JavaScript. Additionally, JavaScript now is utilized to create platform agnostic desktop and mobile applications using the Electron software framework and the React Native Framework respectively.
                p JavaScript's reach has expanded far and wide, especially in the realm of the web. Undoubtedly, the modern web would not have been possible without JavaScript, which leads us to the next subject of inquiry.
                h2 The History Of JavaScript
                p The history of JavaScript is closely tied to that of the Browser, and by extension, The World Wide Web. <a class="inline-link" aria-label="link to wikipedia article on the history of the world wide web" target="_blank" rel="noopener noreferrer" role="link" href="https://en.wikipedia.org/wiki/History_of_the_World_Wide_Web">The History Of The World Wide Web</a> is a subject outside the scope of this article. Sufficient to say that in 1990, one year after the inception of the World Wide Web itself, Tim Berners-Lee (the inventor of The World Wide Web) released the first web browser, simply known as the Line Mode Browser. Run from the terminal, this basic browser bore little resemblence to today's modern browsers, but demonstrated the promise of what the World Wide Web would come to fulfill, that of an easily accessible, interconnected world. As an aside, one can still run basic browsers from the terminal, <a class="inline-link" aria-label="a link to the links browser website" target="_blank" rel="noopener noreferrer" role="link" href="http://links.twibright.com/user_en.html">The Links Browser</a> is one of the oldest examples of these types of browser still in use today.
                p Three years later, in 1993, Lee would go on to release the <a class="inline-link" aria-label="a link to the wikipedia article on the mosaic browser" target="_blank" rel="noopener noreferrer" role="link" href="https://en.wikipedia.org/wiki/Mosaic_(web_browser)">Mosaic Browser</a>, which is credited as being the first web browser to gain widespread popularity. With its use of a graphical user interface instead of a terminal, the Mosaic Browser was widely considered to be much more accessible to the average person. The popularity and ease of use of The Mosaic Browser would usher in the Internet boom of the 1990s.
                p One year after The Mosaic Browser's release, Marc Andreessen, the leader of the Mosaic team, would found the company, Netscape. Their flagship product, the Netscape Navigator Browser, itself heavily inspired by The Mosaic Browser, would soon overshadow its predecessor in popularity. Shortly thereafter, in 1995, Microsoft would release the  Internet Explorer Browser, sparking a browser war with Netscape.
                p These early days of the web were filled with static sites, which, while pleasing, lacked interactivity once the page loaded. In order to interact with early web pages, one would have to initiate an event (such as a click on a button), which would cause the entire page to refresh in order for new content to be loaded onto the page. While still impressive for its time, it limited the kinds of interactions early web users could have with the pages they visited. It became apparent to those working at the forefront of this new burgeoning field to change this, to add more dynamism to user interactions with web pages. 
                p Thusly, in 1995, Netscape decided to add a scripting language to The Netscape Navigator Browser. Two routes were taken to achieve this ultimate goal. The first, in collaboration with Sun Microsystems, aimed to embed the Java Programming Language into the browser. The other route was put into the hands of a computer programmer named Brendan Eich, who was tasked with embedding the Scheme Programming Language. 
                p It wasn't long before Netscape management had determined that the best option was rather for Eich to develop a new programming language, which would incorporate syntax more similar to Java than Scheme. Although originally called "LiveScript" when first shipped with the Navigator beta in September of 1995, it was soon renamed to JavaScript when the official version release occurred in December of that year. Originally intended "to help nonprogrammers create dynamic, interactive web sites," it probably occurred to no one at the time how ubiquitous their new creation would become.
                h2 JavaScript Basics
                p While the history of JavaScript is much more extensive than this, this article will be lengthy enough without going into the entirety of JavaScript's history. Nevertheless, should you wish to find out more, I highly encourage you to <a class="inline-link" aria-label="a link to the wikipedia article on the history of javascript" target="_blank" rel="noopener noreferrer" role="link" href="https://en.wikipedia.org/w/index.php?title=JavaScript#History">read the Wikipedia article on the subject</a>, from which the majority of the previous section was referenced. 
                p The vast majority of the remainder of this article will be an extensive introduction to general programming concepts as they relate to JavaScript, including variables, data types, conditionals, control flow statements, and functions. As I mentioned at the beginning of this article, the topic of JavaScript is vast, but it is my hope that by the end of this article, you will have been given a basic grasp on the fundamentals of working with JavaScript and how to add basic interactivity to your web pages.  Firstly, however, it is important that we set up a working environment so that we can see the results of the JavaScript we write. For this we'll be working in the browser's developer tools.
                h2 The Console
                p Later on in this article, I will explain how to interact with JavaScript within the context of files that are directly linked to an HTML document, much like the document we created in <a class="inline-link" aria-label="a link to the article HTML, the web's skeleton" role="link" href="./html_the_webs_skeleton.html">HTML: The Web's Skeleton</a>. For now, however, it is time to introduce one of the most valuable tools in the web developer's toolbelt, that of the developer console. Open up your preferred browser and hit the F12 key. You should be presented with a separate partition or window that displays the underpinnings of the webpage you are currently on.
                figure
                    img.img-image(src="../assets/images/screenshots/devtools_ss_01.webp" alt="a screenshot showing the developer console alongside an open web page" title="the devtools console opened up at brianhayes.dev" cite="author screenshot" loading="lazy")
                figcaption Pressing the F12 key opens the browser's devtools
                p Notice the tabs on the top of the new window/partition. Navigate to the console window. For the majority of this article's examples, we will be working within the context of this window. You should see a blinking cursor on this window. You can think of this as being like a coding sandbox in which JavaScript can be written to test out code. Should you choose to follow along, simply copy the code snippets in the following examples into this console. Let's start off with variable declarations.
                h2 Variables
                p Much like in mathematics, variables in programming tie a particular piece of data to a symbol representing that data. The most simple example of this can be demonstrated by declaring the equivalency between a named symbol, and the data it represents. In JavaScript, this is done by using the var keyword. Inside your console, type out the following code:
                pre
                    code var greeting = "Hello World!";
                p This simple statement should be somewhat self explanatory, but let's break it down regardless. Firstly, let us address the var keyword. In JavaScript, like all programming languages, there are reserved keywords, with "var" being one of them. This keyword is to let the JavaScript interpreter know that we are declaring a variable. The next word greeting, is the name of the variable we are declaring. JavaScript has no reference to greeting until we have declared it. Next, we utilize an equal sign to declare that greeting is equal to the following value. In this case we apply what is known in programming as a <em>string</em>, or a series of characters. The quotations are required to delineate that we are declaring a string. To summarize, we are declaring a variable called "greeting" which holds the string value of "Hello World!".
                p If we write out this statement and then hit the "Enter" key inside of our browser's console window, the console will give us a return "undefined". This may seem perplexing to the unitiated, but simply put the console is acknowledging our assignment, but we have not returned anything from such a declaration. In other words, we have not asked the JavaScript interpreter to do anything other than hold onto the declaration of greeting in memory. Let's now retrieve our value using a simple call to the console like so:
                pre
                    code console.log(greeting);
                p After typing out this bit of code and hitting enter, the JavaScript interpreter will then print out the value we have assigned to the greeting variable, "Hello World!":
                figure
                    img.img-image(src="../assets/images/screenshots/devtools_ss_02.webp" alt="a screenshot of the devtools displaying a basic javascript hello world example" title="declaring a variable and then logging the value to the console in javascript" cite="author screenshot" loading="lazy")
                figcaption Variable declaration and logging to the console
                p While simple, the declarations of variables in programming is akin to learning your ABCs in the alphabet. By creating associations between variable names with values they represent, we can create semantic associations to make our code more readable to both ourselves and others. Let' us declare some other variables in the next section, where I will introduce you to the basic data types within JavaScript. We have already covered strings, let us now cover numbers, booleans, arrays, and objects.
                h2 Data Types
                h3 Numbers
                p All programming languages have a series of data types which serve various purposes. Much of JavaScript's data types have to do with abstractions that are easily parsed/understood by the underlying computer architecture. Strings are one of the easiest to grasp examples for the beginner, as they are simple a sequence of characters meant usually to represent names, words, or statements. Another easy to understand data structure are numbers. Unlike variable declaration of strings, numbers are not encapsulated inside of quotation marks, and one can simply assign a variable like so:
                pre
                    code var age = 40;
                p As you can see, the semantic aspects of declaring variables already are starting to show. Age is often associated with a numeric number, while the greeting variable above is indeed a statement often interpreted as a greeting. It is often said that naming variables is one of the programmer's greatest challenges. As you become more versed in programming, this difficult will become more apparent. For now, however, simply think on the confusion a fellow programmer would be if we had simply switched our values for these two declarations:
                pre
                    code var age = "Hello World!";&#10var greeting = 40;
                p This is an obviously confusing series of declarations as each value the variables represent, while valid JavaScript, would not be looked on favorably by anyone having to parse through and read this code. These kinds of naming conventions often relate to the kind of data being stored within the variable. This perhaps will become even more apparent in covering the next data type, booleans.
                h3 Booleans
                p Booleans are perhaps the most simple to understand data type, as the value stored within a boolean variable can hold only the value of true or false, and their declaration is just that simple:
                pre
                    code var isOverForty = false;&#10var isUnderFifty = true;
                p A couple conventions here are being introduced here. As you can see, I am declaring two variables, one called "isOverForty". Notice the capitalization of each word, demarcating a kind of statement which corresponds to whether the value holds a boolean true or false value. This kind of capitalization is what is known as "camel case", where each new word, rather than demarcated by a space like in traditional writing, is instead demarcated with a capitalized letter. This is because spaces in programming often indicate a new declaration or statement in programming, and thusly to ensure that a single variable is declared, no spaces can be used when naming variables. Additionally, to ensure that the readability of the variable name, each letter is demarcated with a visually noticable capitalized letter.
                p Also notice the choice of semantics, "isOverForty" indicates a true or false value. It would be very poor practice to name this variable "mightBeOverForty", as that indicates that it's value could be either true or false. Because we are storing a boolean value of false here, it is a better naming convention to name this variable something that indicates that the expected return value is either true or false.
                p Strings, numbers, and booleans within the JavaScript Programming Language (and other programming languages), are what are known as "primitive" data types. There are other primitive data types (null, undefined, and symbols) which will not be covered in this introduction. The other two data types that we'll be covering are what are known as "reference" data types. Specifically, we are referring to arrays, and objects. These data types can be thought of as stores or collections of data. Technically functions are also a reference data type, but to ensure this introduction is kept as simple as possible, we'll be covering arrays and objects first before moving onto the slightly more complex subject of functions. Let's start by introducing the Array data type.
                h3 Arrays
                p If you work in JavaScript long enough, you will eventually come across the saying "Everything is an object in JavaScript". I personally am still wrestling with whether or not this statement is completely true or a safe generalization to make, so I'll refrain from expressing my opinion on the validity of this sentiment at this time. Sufficient to say that Arrays and Objects in JavaScript share a lot in common, so much so that if one uses the "typeof" operator on an Array, one will receive back the value of "object", but I'm getting ahead of myself.
                p The most simple way to think of Arrays in JavaScript are as a grouping of variables that itself can be contained within a variable. This is expressed by utilizing the square "[ ]" brackets to denote you are declaring an array of values being stored. Thusly a simple array of names could be declared like so:
                pre
                    code var groupOfNames = ["Mary", "John", "Larry", "Zoe"];
                p Practically speaking, one can create an array of any amount of values, of any type of values, and even include Arrays (or Objects) within arrays. Usually Arrays are made up of variables of only one data type, but it is perfectly valid to include numbers and booleans as well. Here are a few examples:
                pre
                    code var groupOfAges = [12, 16, 59, 42, 0];&#10var groupOfGroups = [["Mary", "John"], ["Larry"], ["Zoe", "Lenny"]];&#10var groupOfRandomValues = [42, "Mary", true, "Don", 64, ["Nested String", 0], false];
                p Arrays are the most basic way of grouping values together in JavaScript, with a few caveats that shake the expectations of those new to the language. One is that Arrays are what is known as "Zero Indexed" in JavaScript. This essentially means that the first element in an array is not called "the first element", but rather "the 0th element". This is a convention in many programming languages. Thusly when wishing to reference a particular element of an array, one must subtract 1 from the count of elements up to the element they wish to reference. The following code snippet demonstrates this:
                pre
                    code var groupOfNames = ["Mary", "John", "Larry", "Brett"];&#10var firstNameInGroupOfNames = groupOfNames[0];&#10var secondNameInGroupOfNames = groupOfNames[1];&#10&#10console.log(firstNameInGroupOfNames);&#10// returns "Mary"&#10&#10console.log(secondNameInGroupOfNames);&#10// returns "John"
                p This convention seems straight forward enough to the beginner, but you'll see this kind of thinking unfortunately can often result in what are known as "off by one" errors when working with control flow statements (introduced later on in this article). Lastly, I'll point out that should you desire to grab the last element in an array, regardless of it's length, one can always refer to the last element in an array like so:
                pre
                    code var groupOfNames = ["Mary", "John", "Larry", "Brett"];&#10var lastNameInGroupOfNames = groupOfNames[groupOfNames.length - 1];&#10&#10console.log(lastNameInGroupOfNames);&#10// returns "Brett"
                p This code snippet, to the beginner, might raise an eyebrow, as to why the "-1" is necessary. The .length property is an Array specific property that refers to the counted number of elements in the Array, but this number is always equivalent to index of the last element of the Array plus 1, as it is a count of the elements in the Array, and not simply a reference to the index. Thusly, to get the last element of an Array, one must reference it's length and then subtract 1 from it. See what I mean by "off by one" errors. Happens all the time.
                p We'll be returning to Arrays later on in this article when we start working with control flow statements. For now, let's cover the other reference data type in JavaScript, which also happens to be the most ubiquitously used, the JavaScript Object.
                h3 Objects
                p As mentioned earlier, the saying "Everything is an Object in JavaScript" is very often referenced when delving deep into the intricacies of the language. Objects are somewhat similar to Arrays in that they are stores of any kind of data types, with one small difference that makes Objects vastly more powerful than Arrays (at least when it comes to levels of abstraction). Unlike Arrays, which are automatically idnexed by number, Objects can be indexed by strings. Thusly high level abstractions can be encapsulated within an Object. To start, one declares an Object very much like an array, but instead using the curly braces syntax, "{ }". Let's declare a basic object called person to demonstrate:
                pre
                    code var person = {&#10  name: "Mary",&#10  age: 25,&#10  favoriteFood: "chicken",&#10  isEmployed: true&#10};
                p Notice the way this object is declared. After instantiating our object, "person", we open a set of curly braces and declare a "key", "name", and its corresponding value, "Mary", followed by a comma and carriage return before going onto declare more key value pairs in a similar fashion until we finish off with the key, "isEmployed", and close off the curly braces.
                p Notice the keys are always followed by a colon ":" character, and then the values are declared very much like variables, ensuring strings are encapsulated by quotation marks, numbers and booleans are similarly declared like variables (without the quotation marks). Unlike arrays, where referencing these values by index can sometimes appear unreadable, Objects allow the programmer to create key/value pair references that start to appear like English nouns, adjectives, and even verbs (more on the verbs part later on when we cover functions).
                p So if we wish to reference our person Object's name, age, and isEmployed values. We can simply reference it like so, using the "object" "dot" "key" syntax:
                pre
                    code var person = {&#10  name: "Mary",&#10  age: 25,&#10  favoriteFood: "chicken",&#10  isEmployed: true&#10};&#10&#10console.log(person.name);&#10// returns "Mary"&#10&#10console.log(person.age);&#10// returns 25&#10&#10console.log(person.isEmployed);&#10// returns true
                p Objects can do so much in the realm of JavaScript, and many other programming languages have even oriented their entire paradigm around JavaScript (just take a look at Java). Hence why JavaScript is referred to as an "Object Oriented" programming language. Even the previous data types I've referenced can technically be though of as an object. We'll return to Objects later on when we cover Functions. We have now covered the basics of most common JavaScript data types. 
                p But declaring variables and storing data is only part of programming/coding. In order to work with this data in any meaningful way, we'll need other tools. What if we wish to change each element in an Array? What if we wish to list out only the keys or values in an object? This involves a key concept in programming. That of iteration, that of the control flow statement, otherwise known as "loops".
                h2 Loops
                p Control Flow Statements, more commonly known as "loops", allow for a specific set of instructions to be invoked over and over again until a certain condition is met, afterwards which the loop is "broken out of", and the iteration is stopped. There are many forms of this iteration, with the most common being that of the "for loop". Other control flow statements include the "while loop" and the "do while" loop. There are also what are known as "higher order" functions which perform different operations on the data being passed to it, but for the sake of keeping this article as introductory as possible. We'll only be covering one of these control flow statements, that of the classic "for loop".
                p Technically the for loop is a JavaScript function, which we haven't covered yet, but I feel that loops are a fine segue from the subject of Arrays and Objects, as loops are often used to iterate over, and sometimes change, the data within these reference data types. Let's simply declare an array of names, then instead of referencing each one by index, we'll use a for loop to simply log each name to the console:
                pre
                    code var groupOfNames = ["Mary", "John", "Larry", "Lenny", "Bruce"];&#10&#10for (var i = 0; i <= groupOfNames.length -1; i++) {&#10  console.log(groupOfNames[i]);&#10}&#10&#10/*&#10 * returns:&#10 * Mary&#10 * John&#10 * Larry&#10 * Lenny&#10 * Bruce&#10*/
                p Here we declare an array of strings called groupOfNames. The for loop's syntax can look quite foreign to those who have never seen one before, so let's break it down. The reserved keyword "for" is first used to indicate that we wish to start a for loop. Afterwards which an opening parentheses is written. This is what indicates we are invoking a function call (more on that later). Inside these parentheses, we are indicating a series of "arguments", which tell the "for" function how to behave. Each argument is delinated by a comma character. In the case of a standard for loop, the function expects three arguments. Let's break down each argument in further detail.
                p Firstly we have the statement:
                pre
                    code var i = 0;
                p This statement should seem familiar, we simply declare a variable i and set it hold the value of the number 0. The use of the letter "i" is based off of convention. It is meant to stand for "iterator", and is generally what is used to keep count as we go through the loop.
                p The second argument to our for function call looks like a mathematical comparison, which indeed it is:
                pre
                    code i <= groupOfNames.length - 1;
                p Much like in mathematics, the "<=" indeed refers to "less than or equal to". This is our first equality statement covered thus far, and by the end of this article we will cover a few more. So what does this translate to? Well if our iterator, "i", is "less than or equal to" the length of our groupOfNames array minus one (to account for the zero index of JavaScript) arrays. The statement here returns a boolean value of true or false. It is basically telling the for loop, as long as this condition is true, run the following code again.
                p Lastly we have the third argument of the for loop:
                pre
                    code i++;
                p This is what is known as an increment operator. It is basically telling the for loop that at the end of each iteration, add one to the iterator number. Thusly on the first loop, after the first name is printed to the console, i, which was initially set to the number, 0, is now set to the number 1. Let's also log to the console the iterator itself to hammer home the point:
                pre
                    code var groupOfNames = ["Mary", "John", "Larry", "Lenny", "Bruce"];&#10&#10for (var i = 0; i <= groupOfNames.length -1; i++) {&#10  console.log("index: ", i);&#10  console.log(groupOfNames[i]);&#10}&#10&#10/*&#10 * returns:&#10 * index: 0&#10 * Mary&#10 * index: 1&#10 * John&#10 * index: 2&#10 * Larry&#10 * index: 3&#10 * Lenny&#10 * index: 4&#10 * Bruce&#10*/
                p Hopefully the above example not only illustrates not only the basics of a classic for loop, but also reiterates the concepts around zero indexing of arrays introduced earlier. Let's now loop over an array of objects, and in the process, change the values of one of the objects values:
                pre
                    code var groupOfPeople = [&#10  {&#10    name: "Mary",&#10    age: 25&#10  },&#10  {&#10    name: "John",&#10    age: 37&#10  },&#10  {&#10    name: "Leslie",&#10    age: 64&#10  }&#10];&#10&#10for (var i = 0; i <= groupOfPeople.length - 1; i++) {&#10  var person = groupOfPeople[i];&#10  var statementOfAge = person.name + " is my name, my age is: " + person.age;&#10  console.log(statementOfAge);&#10&#10  person.age = ++person.age;&#10  var statementOfAgeAfterOneYear = "After one year's time, I, " + person.name + " will be " + person.age + " years old";&#10  console.log(statementOfAgeAfterOneYear);&#10}&#10&#10console.log(groupOfPeople);
                p This code is a bit more complicated than what we covered thus far, but hopefully my naming conventions have made it clear what the expected output of this for loop will be.
                p Let's cover first our declaration of our groupOfPeople. Unlike our previous example, which simply was a collection of names, here we are declaring a series of objects, each object representing one single person. Each person is declared with a name and an age key, and have a corresponding string (their name), and number (their age). Very much like our previous example on referencing an array, we do so using the square bracket syntax, which is demonstrated within our for loop on the first line:
                pre
                    code var person = groupOfPeople[i];
                p This is more for semantics as to not be confusing. By shortening my reference to each individual person from groupofPeople[i], I can more easily read the rest of the code inside my for loop.
                p Next a series of what is know of "string concatenation" occurs. Unlike with numbers, when strings are "added" to each other using the "+" operator, the previous string is concatenated with whatever the string value is. If what follows is not a string, like the age value, JavaScript will "coerce" the value into a string.
                pre
                    code var statementOfAge = person.name + " is my name, my age is: " + person.age;
                p And of course, we then log out this statement to the console.
                p Next we then do something we have not covered in this article thus far, we reassign the person's age value to itself, but prepended with a "++" operator. Unlike in our for loop declaration, where the iterator is appended the "++" operator, the prepending of the "++" operator ensures that the value is changed prior to the remainder of the following statement.
                pre
                    code person.age = ++person.age;
                p Then, we declare a new variable, "statementOfAgeAfterOneYear", in which we then concatenate a new string, stating what the person's age will be after one year.
                pre
                    code var statementOfAgeAfterOneYear = "After one year's time, I, " + person.name + " will be " + person.age + " years old";
                p We once again log this statement to the console to reflect the change in the person's age.
                p Once the for loop is finished (having iterated over all the elements in the groupOfPeople array), delinated by the closing curly brace "}" character, we simply log to the console the entire groupOfPeople. This demonstrates that the change of the age value on each of our persons in the groupOfPeople array indeed did change our original array of objects. Let's take a look at our final print outs to the console:
                pre
                    code /*&#10 * returns:&#10 * Mary is my name, my age is: 25&#10 * After one year's time, I, Mary will be 26 years old&#10 * John is my name, my age is: 37&#10 * After one year's time, I, John will be 38 years old&#10 * Leslie is my name, my age is: 64&#10
            div.foot-arrows
                button.icons#up-arrow(title="back to top" aria-label="back-to-top" alt="back to top" role="navigation")
        footer(role="menu")
            div.foot-text
                ul.foot-text-menu(role="menu")
                    li.foot-text-items(role="menubar")
                        div.foot-text-item#text-sun(aria-label="light-mode-text" role="menuitem") light
                    li.foot-text-items(role="menubar")
                        div.foot-text-item#text-git(aria-label="git-text" role="menuitem") git
                    li.foot-text-items(role="menubar")
                        div.foot-text-item#text-linkedin(aria-label="linkedin-text" role="menuitem") linkedin
                    li.foot-text-items(role="menubar")
                        div.foot-text-item#text-mastodon(aria-label="mastodon-text" role="menuitem") social
                    li.foot-text-items(role="menubar")
                        div.foot-text-item#text-moon(aria-label="dark-mode-text" role="menuitem") dark
            div.foot-division
            ul.foot-menu(role="menu")
                li.foot-items(role="menuitem")
                    button.footer-button#sun-button
                        div.icons#sun(aria-label="light-mode" role="button") light
                li.foot-items(role="menuitem")
                    a.icons#git(aria-label="git" role="link" target="_blank" rel="noopener noreferrer" href="https://github.com/tomit4") git
                li.foot-items(role="menuitem")
                    a.icons#linkedin(aria-label="linkedin" target="_blank" rel="noopener noreferrer" role="link" href="https://linkedin.com/in/brian-hayes-33496067") linkedin
                li.foot-items(role="menuitem")
                    a.icons#mastodon(aria-label="social" target="_blank" rel="noopener noreferrer" role="link" href="https://mas.to/@brianhayesdev") social
                li.foot-items(role="menuitem")
                    button.footer-button#moon-button
                        div.icons#moon(aria-label="dark-mode" role="button") dark
        script(src="../index.js" defer default)
