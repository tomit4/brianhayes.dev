doctype html
html(lang = "en")
    head
        title brianhayes.dev
        meta(charset='UTF-8')
        meta(name='viewport' content='width=device-width, initial-scale=1')
        link(rel="icon" type="image/x-icon" href="../assets/icons/favicon.png")
        link(rel='stylesheet' type='text/css' href='../css/style.css')
    body
        nav
            ul.nav-menu(role="menu")
                li.nav-items(role="menubar")
                    a.icons#contact(aria-label="email" role="menuitem" href="mailto: brianhayes.dev@protonmail.com") contact
                li.nav-items
                    a.icons#folio(aria-label="folio" role="navigation" href="../folio.html") folio
                li.nav-items
                    a.icons#home(aria-label="home" role="navigation" href="../index.html") home
                li.nav-items
                    a.icons#blog(aria-label="blog" role="navigation" href="./index.html") blog
                li.nav-items
                    a.icons#rss(aria-label="rss" role="menuitem" href="../assets/feed.rss") rss
        div.nav-division
        div.nav-text
            ul.nav-text-menu(role="menu")
                li.nav-text-items(role="menubar")
                    div.nav-text-item#text-contact(aria-label="email" role="menuitem") email
                li.nav-text-items(role="menubar")
                    div.nav-text-item#text-folio(aria-label="folio-text" role="menuitem") folio
                li.nav-text-items(role="menubar")
                    div.nav-text-item#text-home(aria-label="home-text" role="menuitem") home
                li.nav-text-items(role="menubar")
                    div.nav-text-item#text-blog(aria-label="blog-text" role="menuitem") blog
                li.nav-text-items(role="menubar")
                    div.nav-text-item#text-rss(aria-label="rss-text" role="menuitem") rss 
        div.container.fadein
            div.arrows
                a.icons#left-arrow(aria-label="previous" role="navigation" href="./git_basics.html")
                a.icons#right-arrow(aria-label="next" role="navigation" href="" style="visibility: hidden")
            div.arrows-text
                span.arrow-text#text-left-arrow prev
                span.arrow-text#text-right-arrow next
            div.title
                div.title-card
                    header The ReadMe
                    div.subtitle Documentation For Beginners
                    div.aside Published on 2023-01-13
                picture(role="img")
                    source(media="(min-width: 62.5em)" srcset="../assets/images/intro_images/reader_desktop.jpg")
                    source(media="(min-width: 37.5em)" srcset="../assets/images/intro_images/reader_tablet.jpg")
                    img.intro-image(src="../assets/images/intro_images/reader_mobile.jpg" alt="Monument to the Reader, Yerevan" title="Monument to the Reader, Yerevan" cite="https://commons.wikimedia.org/wiki/File:Monument_to_the_Reader,_Yerevan_18.jpg?useskin=vector" loading="lazy")
                figcaption Monument To The Reader, Yerevan
                blockquote(cite="https://upload.wikimedia.org/wikipedia/commons/4/48/Markdown-mark.svg") "Documentation is a love letter that you write to your future self"
                    br
                    a.inline-link.quote_author(target="_blank" rel="noopener noreferrer" href="https://en.wikipedia.org/wiki/Damian_Conway") Damian Conway
            article.demo-button
                h1 Introduction
                p Documentation in the world of software is an essential part of the development process. Without proper documentation both users and developers are given the monumental task of parsing out a project line by line in order to understand how to debug the project, contribute to the project, or indeed, even utilize the software itself.
                p There are many forms of documenting projects, be they man pages accessible via the terminal to official documentation provided by the developer hosted on their website. One essential type of documentation that a new software developer must become familiar with is the README.md file. If you have ever perused a properly maintained repository on Github or other hosting service websites, you have most certainly come across a README.md. The finished document looks something like this:
                figure
                    img.img-image(src="../assets/images/screenshots/readme-pic-01.webp" alt="A sample page of a readme" title="A sample page of a readme" cite="author screenshot" loading="lazy")
                figcaption A Sample README.md from the Timeshift Repository
                h2 The Basic Readme
                p The README is a document that one can think of as being the entry point to learning about and using a piece of software. Oftentimes this document provides instructions on installation, basic usage, and configuration. Sometimes multiple READMEs are provided on more extensive projects to help developers extend, debug, and manage a piece of software.
                p Not including a README, even when working on a trivial or basic project, is considered poor etiquette, as having no README leaves any potential user or developer with absolutely no information about what lies within the project, and indicates that the project maintainer doesn't care about the project, or at least, doesn't care to provide documentation. Very simply, it is always a good idea to provide at least a basic README when creating a project.
                p Although a README can be written in plain text or even HTML, the markdown language has become the standard for writing READMEs, as it provides a quick way to create formatted text that is well presented to the reader. READMEs are traditionally capitalized so that the 'ls' command prioritizes its display, and the .md appended to the end of the README indicative that the document is written in markdown.
                h2 The Markdown Language
                p Anyone familiar with The HyperText Markup Language, commonly known as HTML, will find themselves comfortable working in Markdown, as many pieces of Markdown are interchangeable with classic HTML elements, just expressed differently.
                p In certain circumstances, the Markdown language is even more powerful than HTML, as it can very quickly represent tables, graphs, checkboxes, and other common presentation elements in a way that is easier to read and requires fewer typed characters to express them.
                p For the remainder of this blog post, I will cover how to create a standard README for a software project. While Markdown has many extensive features such as presentation graphs and tables, I will solely be covering the basics for the sake of brevity and this is only meant as an introduction. Should you desire to explore what other features the Markdown language has to offer, I advise you to take a look at the <a class="inline-link" target="_blank" rel="noopener noreferrer" href="https://www.markdownguide.org/">official guide</a>.
                h2 Getting Started
                p At the end of the day, Markdown is simply an extension upon a plain text document, so one can get started working in it right away. Navigate to the base of a project you'd like to write a README for (or just create a test directory), and let's create one from the command line using the touch command:
                pre
                    code &#35bash shell&#10[~]$ touch README.md
                p Next we'll open up our newly created README.md file in our favorite text editor and start documenting our project. I'll be using NeoVim for my examples, and will also be using an extension called <a class="inline-link" target="_blank" rel="noopener noreferrer" href="https://github.com/iamcco/markdown-preview.nvim">markdown-preview</a>. If you are reading this blog post and want to follow along in VS Code, there is equivalent functionality available for that editor as well in the form of different extensions.
                p Let's write out a header, with the title of our project. I'm going to call my project, "markdown_ex".
                figure
                    img.img-image(src="../assets/images/screenshots/readme-pic-02.webp" alt="a h1 header displayed in both neovim and the browser" title="a h1 header displayed in both neovim and the browser" cite="author screenshot" loading="lazy")
                figcaption An H1 header expressed in Markdown
                p As you can see, a single hashtag "#" character is interpreted by Markdown as indicating the beginning of a header. This is equivalent to an &lth1&gt tag in HTML. Let's create some other headers as an example.
                figure
                    img.img-image(src="../assets/images/screenshots/readme-pic-03.webp" alt="a series of headers expressed in markdown" title="a series of headers expressed in markdown" cite="author screenshot" loading="lazy")
                figcaption A series of headers expressed in Markdown
                p Now, what's nice about Markdown is at this point you can simply start typing out your documentation. Unlike in HTML, there is no need to encapsulate everything in paragraph tags, so working in Markdown becomes more akin to working in an extremely basic word processor. You can revert to using HTML elements if you'd like, but especially in this mentioned example, it is not necessary:
                figure
                    img.img-image(src="../assets/images/screenshots/readme-pic-04.webp" alt="a series of headers expressed in markdown" title="a series of headers expressed in markdown" cite="author screenshot" loading="lazy")
                figcaption No paragraph tags are necessary in Markdown
                h2 Stylizing Text
                p Let's now explore some of the basic features that Markdown has to offer. Let's say we wish to stylize our text a little beyond just making headers. Well, we have many options at our disposal. Let's create some bold, italic, underline, and strike-through pieces of text:
                figure
                    img.img-image(src="../assets/images/screenshots/readme-pic-05.webp" alt="various stylizing of markdown text" title="various stylizing of markdown text" cite="author screenshot" loading="lazy")
                figcaption Bold, Italicize, Strike-through and Underline in Markdown
                p Here we see the various syntax utilized for styling pieces of text in markdown. I'll cover briefly the basic syntax here:
                pre
                    code &#60&#33-- README.md --&#62&#10&#10**two stars creates bold text**&#10&#95&#95two underscores also creates bold text&#95&#95&#10&#10*single star creates italicized text*&#10&#95single underscore also creates italicized text&#95&#10&#10~~two tildes creates strikethrough text~~&#10&#60u&#62html style u tags creates underline text&#60/u&#62
                h2 Creating Lists
                p As I mentioned earlier, the syntax of Markdown can be far nicer than HTML in many respects. A good example of this is creating ordered and unordered lists. In HTML, creating an unordered list looks like this:
                pre
                    code &#60&#33-- index.html --&#62&#10&#10&#60u&#62&#10    &#60li&#62My first item&#60/li&#62&#10    &#60li&#62My second item&#60/li&#62&#10    &#60li&#62My third item&#60/li&#62&#10&#60/u&#62
                p As opposed to in Markdown:
                pre
                    code &#60&#33-- README.md --&#62&#10&#10 - My first item&#10 - My second item&#10 - My third item&#10
                p The following picture demonstrates the simple creation of ordered and unordered lists in markdown:
                figure
                    img.img-image(src="../assets/images/screenshots/readme-pic-06.webp" alt="a demonstration of creating lists in markdown" title="a demonstration of creating lists in markdown" cite="author screenshot" loading="lazy")
                figcaption Creating Lists In Markdown Is Easy
                h2 Creating Links
                p Markdown is especially easy on the eyes when it comes to creating links. In HTML, creating a basic link can be created like so:
                pre
                    code &#60&#33-- index.html --&#62&#10&#60a href="https://www.example.com"&#62my example link&#60/a&#62
                p The same can be accomplished in Markdown like so:
                pre
                    code &#60&#33-- README.md --&#62&#10[my example link](https://www.example.com)
                h2 Code Snippets
                p The Markdown language is multifaceted, it can be utilized to document anything from scientific papers to simple blog posts and is often utilized in online forums. One of the most common usage for Markdown is code snippets, which can be expressed using backticks like so:
                pre
                    code &#60&#33-- README.md --&#62&#10```console.log('nice code block!')```
                p Or Like so:
                pre
                    code &#60&#33-- README.md --&#62&#10`console.log('nice code block!')`
                p If, for example, you needed to present some basic JSON, you could do so very simply like so:
                pre
                    code &#60&#33-- README.md --&#62&#10&#10``&#10{&#10    "firstName": "John",&#10    "lastName": "Smith",&#10    "age": 25&#10}&#10``
                p The following picture demonstrates the effect:
                figure
                    img.img-image(src="../assets/images/screenshots/readme-pic-07.webp" alt="demonstration of writing code blocks in markdown" title="demonstration of writing code blocks in markdown" cite="author screenshot" loading="lazy")
                figcaption Writing Code Blocks Is Essential For Software
                h2 Checkboxes
                p One of my personal favorite uses of Markdown is to place a list of checkboxes towards the bottom of my READMEs. This usually is a list of various aspects of my software that need to be worked on, such as new features, bug fixes, and documentation.
                p Checkboxes can be instantiated like so, one is checked off, the other is not:
                pre
                    code &#60&#33-- README.md --&#62&#10&#10 - [x] This is a completed task&#10 - [ ] This task has yet to be done
                p And here is an example Picture showing the results:
                figure
                    img.img-image(src="../assets/images/screenshots/readme-pic-08.webp" alt="demonstration of how to write checkboxes in markdown" title="demonstration of how to write checkboxes in markdown" cite="author screenshot" loading="lazy")
                figcaption Checkboxes Are A Great Way Of Keeping Track Of Your Project
                h1 Conclusion
                p The capabilities of Markdown are vast. In addition to what has been covered here, one can create tables, graphs, and embed images/GIFs into Markdown files to further help document your projects.
                p A good README can often be the saving grace of a project. Even if a project is poorly designed or not well maintained, a good README can provide a general overview of a piece of software and help others navigate its use, configuration, and further development. Without a README, the potential user or developer is left solely with the code itself to determine everything about the project. Indeed, a project without a README is probably not worth investigating, unless the codebase is particularly small and even then, some form of introductory documentation would be highly encouraged.
                p As a beginning software developer, the README is one of your most important resources when learning about a new tool, or even referring back to one of your old projects. It is within your best interest to develop a good habit of writing READMEs and other forms documentation for your projects, so take the time to familiarize yourself with one of the most common forms of it, Markdown.
                p I do hope this has been helpful to you and provides you with a basic understanding of the Markdown language and how to utilize it for a basic README. Cheers and Happy Coding!
        footer(role="menu")
            div.foot-text
                ul.foot-text-menu(role="menu")
                    li.foot-text-items(role="menubar")
                        div.foot-text-item#text-sun(aria-label="light-mode-text" role="menuitem") light
                    li.foot-text-items(role="menubar")
                        div.foot-text-item#text-git(aria-label="git-text" role="menuitem") git
                    li.foot-text-items(role="menubar")
                        div.foot-text-item#text-linkedin(aria-label="linkedin-text" role="menuitem") linkedin
                    li.foot-text-items(role="menubar")
                        div.foot-text-item#text-mastodon(aria-label="mastodon-text" role="menuitem") social
                    li.foot-text-items(role="menubar")
                        div.foot-text-item#text-moon(aria-label="dark-mode-text" role="menuitem") dark
            div.foot-division
            ul.foot-menu(role="menubar")
                li.foot-items
                    button.footer-button#sun-button
                        div.icons#sun(aria-label="light-mode" role="button") light
                li.foot-items
                    a.icons#git(aria-label="git" role="link" target="_blank" rel="noopener noreferrer" href="https://github.com/tomit4") git
                li.foot-items
                    a.icons#linkedin(aria-label="linkedin" target="_blank" rel="noopener noreferrer" role="link" href="https://linkedin.com/in/brian-hayes-33496067") linkedin
                li.foot-items
                    a.icons#mastodon(aria-label="social" target="_blank" rel="noopener noreferrer" role="link" href="https://mas.to/@brianhayesdev") social
                li.foot-items
                    button.footer-button#moon-button
                        div.icons#moon(aria-label="dark-mode" role="button") dark
        script(src="../index.js" default)
